@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/bomberos/editar/{BomberoId:int?}"

@if (existe)
{
    <label>Nombre:</label>
    <input type="text" @bind="bomberoView.Nombre" />
    <br>
    <label>Apellido:</label>
    <input type="text" @bind="bomberoView.Apellido" />
    <br>
    <label>Dotacion:</label>
    <input type="text" @bind="bomberoView.Dotacion" />
    <br>
    <label>Brigada:</label>
    <br />
    <InputFile OnChange="SubirFoto" />
    <br />
    <input type="text" @bind="bomberoView.Brigada" />
    <br>
    <label>DNI:</label>
    <input type="text" @bind="bomberoView.Documento" />
    <br>
    <label>Fecha De Nacimiento:</label>
    <input type="text" @bind="bomberoView.FechaNacimiento" />
    <br>
    <label>Numero De Legajo:</label>
    <input type="number" @bind="bomberoView.NumeroLegajo" />
    <br>
    <label>Fecha De Aceptacion:</label>
    <input type="date" @bind="bomberoView.FechaAceptacion" />
    <br>
    <label> Direccion:</label>
    <input type="text" @bind="bomberoView.Direccion" />
    <br>
    <label>Nº De IOMA:</label>
    <input type="text" @bind="bomberoView.NumeroIoma" />
    <br>
    <label>Lugar De Nacimiento:</label>
    <input type="text" @bind="bomberoView.LugarNacimiento" />
    <br>
    <label>Grupo Sanguineo:</label>
    <input type="text" @bind="bomberoView.GrupoSanguineo" />
    <br>
    <label>Observaciones:</label>
    <input type="text" @bind="bomberoView.Observaciones" />
    <br>
    <label>Profesion:</label>
    <input type="text" @bind="bomberoView.Profesion" />
    <br>
    <label>Nivel De Estudios:</label>
    <input type="text" @bind="bomberoView.NivelEstudios" />
    <br>
    <label>Resulucion 1:</label>
    <input type="text" @bind="bomberoView.Resolucion1" />
    <br>
    <label>Resulucion 2:</label>
    <input type="text" @bind="bomberoView.Resolucion2" />
    <br>
    <label>Resulucion 3:</label>
    <input type="text" @bind="bomberoView.Resolucion3" />
    <br>
    <label>Resulucion 4:</label>
    <input type="text" @bind="bomberoView.Resolucion4" />
    <br>
    <label>Resulucion 5:</label>
    <input type="text" @bind="bomberoView.Resolucion5" />
    <br>
    <label>Resulucion 6:</label>
    <input type="text" @bind="bomberoView.Resolucion6" />
    <br>
    <input type="checkbox" @bind="bomberoView.Chofer" />
    if (bomberoView.Chofer)
    {
        <label>Es chofer</label>
        <input type="date" @bind="bomberoView.VencimientoRegistro" />
    }
    if (!bomberoView.Chofer)
    {
        <label>No es chofer</label>
    }
    <br>
    <select @bind="bomberoView.Grado">
        <option value=" @EscalafonJerarquico.ComandanteGeneral">Comandante General</option>
        <option value=" @EscalafonJerarquico.ComandanteMayor">Comandante Mayor</option>
        <option value=" @EscalafonJerarquico.Comandante">Comandante</option>
        <option value=" @EscalafonJerarquico.SubComandante">Sub Comandante</option>
        <option value=" @EscalafonJerarquico.OficialAuxiliarDotacion">Oficial Auxiliar De Dotacion</option>
        <option value=" @EscalafonJerarquico.OficialAuxiliarEscuadra">Oficial Auxiliar De Escuadra</option>
        <option value=" @EscalafonJerarquico.OficialAuxiliar">Oficial Auxiliar</option>
        <option value=" @EscalafonJerarquico.SubOficialAyudanteMayor">Sub Oficial Ayudante Mayor</option>
        <option value=" @EscalafonJerarquico.SubOficialAyudantePrincipal">Sub Oficial Ayudante Principal</option>
        <option value=" @EscalafonJerarquico.SubOficialAyudantePrimera">Sub Oficial Ayudante De Primera</option>
        <option value=" @EscalafonJerarquico.SubOficialAyudante">Sub Oficial Ayudante</option>
        <option value=" @EscalafonJerarquico.SuboficialSubAyudante">Sub Oficial Sub Ayudante</option>
        <option value=" @EscalafonJerarquico.SegundoAyudante">2ºdo Ayudante</option>
        <option value=" @EscalafonJerarquico.Bombero">Bombero</option>
        <option value=" @EscalafonJerarquico.Aspirante">Aspirante</option>
    </select>
    <br>
    <select @bind="bomberoView.Estado">
        <option value="@EstadoBombero.Retirado">Retirado</option>
        <option value="@EstadoBombero.ComisionDirectiva">Comision Directiva</option>
        <option value="@EstadoBombero.CuerpoActivo">Cuerpo Activo</option>
    </select>
    <br>
    <select @bind="bomberoView.Sexo">
        <option value="@TipoSexo.Hombre">Masculino</option>
        <option value="@TipoSexo.Mujer">Femenino</option>
        <option value="@TipoSexo.Otro">Otro</option>
    </select>

    <h5>Contacto</h5>

    <label>Telefono Celular:</label>
    <input type="text" @bind="contactoView.TelefonoCel" />
    <br>
    <label>Telefono Fijo:</label>
    <input type="text" @bind="contactoView.TelefonoFijo" />
    <br>
    <label>Telefono laboral:</label>
    <input type="text" @bind="contactoView.TelefonoLaboral" />
    <br>
    <label>Email:</label>
    <input type="text" @bind="contactoView.Email" />
    <br>

    <button @onclick="EditarBombero">Editar bombero</button>
}
else
{
<h1> Error 404</h1>
}

@code {
    [Parameter]
    public int? BomberoId { get; set; }

    public class BomberosViewModel
    {
        public DateOnly FechaNacimiento { get; set; }
        public DateOnly FechaAceptacion { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public EstadoBombero Estado { get; set; }
        public int NumeroLegajo { get; set; }
        public EscalafonJerarquico Grado { get; set; }
        [Required, StringLength(255)]
        public string Dotacion { get; set; }
        [Required, StringLength(255)]
        public string Brigada { get; set; }
        public bool Chofer { get; set; }
        public DateOnly? VencimientoRegistro { get; set; }
        public TipoSexo Sexo { get; set; }
        [Required, StringLength(255)]
        public string Direccion { get; set; }
        [Required, StringLength(255)]
        public string LugarNacimiento { get; set; }
        [Required, StringLength(255)]
        public string Documento { get; set; }
        [Required, StringLength(255)]
        public string GrupoSanguineo { get; set; }
        [Required, StringLength(255)]
        public string Observaciones { get; set; }
        [Required, StringLength(255)]
        public string Profesion { get; set; }
        [Required, StringLength(255)]
        public string NivelEstudios { get; set; }
        [Required, StringLength(255)]
        public string NumeroIoma { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion1 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion2 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion3 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion4 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion5 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion6 { get; set; }


    }
    public class ContactoViewModel
    {
        [Required, StringLength(255)]
        public string? TelefonoCel { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoLaboral { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoFijo { get; set; }
        [Required, StringLength(255)]
        public string? Email { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }

    public ImagenViewModel imagenView { get; set; } = new();
    public BomberosViewModel bomberoView { get; set; } = new();
    public ContactoViewModel contactoView { get; set; } = new();
    public Bombero[]? bomberos;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        Bombero? bombero = await db.Bomberos.Where(b => b.PersonaId == BomberoId).Include(b => b.Contacto).SingleOrDefaultAsync();

        if(bombero is not null)
        {
            bomberoView.Chofer = bombero.Chofer;
            bomberoView.Nombre = bombero.Nombre;
            bomberoView.NumeroLegajo = bombero.NumeroLegajo;
            bomberoView.NumeroIoma = bombero.NumeroIoma;
            bomberoView.Profesion = bombero.Profesion;
            bomberoView.Apellido = bombero.Apellido;
            bomberoView.Brigada = bombero.Brigada;
            bomberoView.Direccion = bombero.Direccion;
            bomberoView.GrupoSanguineo = bombero.GrupoSanguineo;
            bomberoView.Grado = bombero.Grado;
            bomberoView.Documento = bombero.Documento;
            bomberoView.Dotacion = bombero.Dotacion;
            bomberoView.Estado = bombero.Estado;
            bomberoView.FechaAceptacion = bombero.FechaAceptacion;
            bomberoView.FechaNacimiento = bombero.FechaNacimiento;
            bomberoView.NivelEstudios = bombero.NivelEstudios;
            bomberoView.Resolucion1 = bombero.Resolucion1;
            bomberoView.Resolucion2 = bombero.Resolucion2;
            bomberoView.Resolucion3 = bombero.Resolucion3;
            bomberoView.Resolucion4 = bombero.Resolucion4;
            bomberoView.Resolucion5 = bombero.Resolucion5;
            bomberoView.Resolucion6 = bombero.Resolucion6;
            bomberoView.Sexo = bombero.Sexo;
            bomberoView.VencimientoRegistro = bombero.VencimientoRegistro;
            bomberoView.LugarNacimiento = bombero.LugarNacimiento;
            bomberoView.Observaciones = bombero.Observaciones;

            Contacto? contacto = await db.Contactos.Where(c => c.ContactoId == bombero.Contacto.ContactoId).SingleOrDefaultAsync();

            if(contacto is not null)
            {
                contactoView.Email = contacto.Email;
                contactoView.TelefonoFijo = contacto.TelefonoFijo;
                contactoView.TelefonoCel = contacto.TelefonoCel;
                contactoView.TelefonoLaboral = contacto.TelefonoLaboral;
            }

            Imagen? imagen = await db.ImagenesBomberos.Where(i => i.ImagenId == bombero.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Base64 = imagen.Base64Imagen;
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
            }
            existe = true;
        }
        else if (bombero is null)
        {
            existe = false;
        }
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenView.Base64 = imagenBase64;
        imagenView.TipoImagen = e.File.ContentType;
        imagenView.Nombre = e.File.Name;
    }

    public async void EditarBombero()
    {
        using var db = DbFactory.CreateDbContext();

        if (bomberoView.NumeroLegajo != 0)
        {
            Bombero? bombero = await db.Bomberos.Where(b => b.NumeroLegajo == bomberoView.NumeroLegajo).Include(b => b.Contacto).SingleOrDefaultAsync();

            if (bombero is not null)
            {
                bombero.FechaNacimiento = bomberoView.FechaNacimiento;
                bombero.Sexo = bomberoView.Sexo;
                bombero.Nombre = bomberoView.Nombre;
                bombero.Apellido = bomberoView.Apellido;
                bombero.Documento = bomberoView.Documento;
                bombero.NumeroLegajo = bomberoView.NumeroLegajo;
                bombero.NumeroIoma = bomberoView.NumeroIoma;
                bombero.LugarNacimiento = bomberoView.LugarNacimiento;
                bombero.Grado = bomberoView.Grado;
                bombero.Imagen = new()
                    {
                        NombreImagen = imagenView.Nombre,
                        TipoImagen = imagenView.TipoImagen,
                        Base64Imagen = imagenView.Base64
                    };
                bombero.Dotacion = bomberoView.Dotacion;
                bombero.Brigada = bomberoView.Brigada;
                bombero.Resolucion1 = bomberoView.Resolucion1;
                bombero.Resolucion2 = bomberoView.Resolucion2;
                bombero.Resolucion3 = bomberoView.Resolucion3;
                bombero.Resolucion4 = bomberoView.Resolucion4;
                bombero.Resolucion5 = bomberoView.Resolucion5;
                bombero.Resolucion6 = bomberoView.Resolucion6;
                bombero.GrupoSanguineo = bomberoView.GrupoSanguineo;
                bombero.Estado = bomberoView.Estado;
                bombero.Chofer = bomberoView.Chofer;
                bombero.VencimientoRegistro = bomberoView.VencimientoRegistro;
                bombero.Direccion = bomberoView.Direccion;
                bombero.Observaciones = bomberoView.Observaciones;
                bombero.Profesion = bomberoView.Profesion;
                bombero.NivelEstudios = bomberoView.NivelEstudios;
                bombero.FechaAceptacion = bomberoView.FechaAceptacion;

                Contacto? contacto = await db.Contactos.Where(c => c.ContactoId == bombero.Contacto.ContactoId).SingleOrDefaultAsync();
                if(contacto is not null)
                {
                    db.Remove(contacto);
                }
                bombero.Contacto = new()

                {
                    TelefonoCel = contactoView.TelefonoCel,
                    TelefonoFijo = contactoView.TelefonoFijo,
                    TelefonoLaboral = contactoView.TelefonoLaboral,
                    Email = contactoView.Email
                };

                await db.SaveChangesAsync();
            }
        }
    }
}
