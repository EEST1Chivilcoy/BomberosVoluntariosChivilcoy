@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/moviles/editar/{VehiculoId:int?}"

@*@if (movilView is not null)
{
    <label>Marca:</label>
    <input type="text" @bind="movilView.Marca" />
    <br>
    <label>Modelo:</label>
    <input type="text" @bind="movilView.Modelo" />
    <br>
    <label>Año:</label>
    <input type="text" @bind="movilView.Año" />
    <br>
    <label>Patente:</label>
    <input type="text" @bind="movilView.Patente" />
    <br>
    <label>Tipo:</label>
    <input type="text" @bind="movilView.Tipo" />
    <br>
    <label>Nº movil:</label>
    <input type="text" @bind="movilView.NumeroMovil" />
    <br>
    <label>Nº motor:</label>
    <input type="text" @bind="movilView.NumeroMotor" />
    <br>
    <label>Nº chasis:</label>
    <input type="text" @bind="movilView.NumeroChasis" />
    <br>
    <select @bind="movilView.Estado">
        <option value="@TipoEstadoMovil.Activo">Activo</option>
        <option value="@TipoEstadoMovil.Inactivo">Inactivo</option>
        <option value="@TipoEstadoMovil.Reparacion">Reparacion</option>
        <option value="@TipoEstadoMovil.Limpieza">Limpieza</option>
    </select>
    <br>
    <h4>Seguro</h4>
    <label>Compañia:</label>
    <input type="text" @bind="seguroView.CompañiaAseguradora" />
    <br>
    <label>Nº poliza:</label>
    <input type="text" @bind="seguroView.NumeroDePoliza" />
    <br>
    <label>Fecha de vencimiento:</label>
    <input type="date" @bind="seguroView.FechaDeVencimiento" />
    <br />
    <br />
    @if (bomberos is not null)
    {
        <h4>Bomberos</h4>
        <br />
        <h5>Encargado:</h5>
        <br />
        <select @onclick="@(() => { TipoRol tipo = TipoRol.Encargado; EnlazarId(tipo); })" @bind="bomberoView.PersonaId">
            <option selected value="0">-Seleccione un bombero-</option>
            @foreach (Bombero b in bomberos)
            {
                <option value="@b.PersonaId">@b.Apellido  @b.Nombre</option>
            }
        </select>
    }
    <br />
    <br />
    <br />
    <br />
    <button @onclick="Editar">Crear movil</button>
}*@
@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    public class MovilViewModel
    {
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)]
        public string NumeroMovil { get; set; }
        [Required, StringLength(255)]
        public string NumeroMotor { get; set; }
        [Required, StringLength(255)]
        public string NumeroChasis { get; set; }
        public TipoEstadoMovil Estado { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }
    public class SeguroViewModel
    {
        [Required, StringLength(255)]
        public string CompañiaAseguradora { get; set; }
        [Required, StringLength(255)]
        public string NumeroDePoliza { get; set; }
        public DateTime FechaDeVencimiento { get; set; }
    }
    public class BomberoViewModel
    {
        public TipoRol Rol { get; set; }
        public Bombero? Bombero { get; set; }
        public int PersonaId { get; set; }
    }

    public ImagenViewModel imagenView { get; set; } = new();
    public MovilViewModel movilView { get; set; } = new();
    public SeguroViewModel seguroView { get; set; } = new();
    public BomberoViewModel bomberoView { get; set; } = new();
    public List<BomberoViewModel> bomberoViews { get; set; } = new();
    public Bombero[]? bomberos;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        bomberos = await db.Bomberos.ToArrayAsync();

        Movil? movil = await db.Moviles.Where(m => m.VehiculoId == VehiculoId).SingleOrDefaultAsync();

        if (movil is not null)
        {
            movilView.Marca = movil.Marca;
            movilView.Modelo = movil.Modelo;
            movilView.Año = movil.Año;
            movilView.Patente = movil.Patente;
            movilView.Tipo = movil.Tipo;
            movilView.NumeroMovil = movil.NumeroMovil;
            movilView.NumeroMotor = movil.NumeroMotor;
            movilView.NumeroChasis = movil.NumeroChasis;
            movilView.Estado = movil.Estado;

            SeguroVehiculo? seguro = await db.SeguroVehiculos.Where(s => s.SeguroId == movil.SeguroId).SingleOrDefaultAsync();

            if (seguro is not null)
            {
                seguroView.CompañiaAseguradora = seguro.CompañiaAseguradora;
                seguroView.NumeroDePoliza = seguro.NumeroDePoliza;
                seguroView.FechaDeVencimiento = seguro.FechaDeVencimineto;
            }

            ImagenMovil? imagen = await db.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
                imagenView.Base64 = imagen.Base64Imagen;
            }
            existe = true;
        }
        else if (movil is null)
        {
            existe = false;
        }
    }

    public async void EnlazarId(TipoRol tipo)
    {
        using var db = DbFactory.CreateDbContext();

        if (bomberoView.PersonaId != null)
        {
            BomberoViewModel b = new()
            {
                    Rol = tipo,
                    PersonaId = bomberoView.PersonaId,
                    Bombero = await db.Bomberos.Where(b => b.PersonaId == bomberoView.PersonaId).SingleOrDefaultAsync()
            };

            bomberoViews.Add(b);
        }
    }

    public async void EditarMovil()
    {
        using var db = DbFactory.CreateDbContext();

        if (movilView is not null)
        {
            Movil? comprobante = await db.Moviles.Where(m => m.NumeroMovil == movilView.NumeroMovil).SingleOrDefaultAsync();

            if (comprobante is null)
            {
                Movil movil = new Movil()
                {
                    Marca = movilView.Marca,
                    Modelo = movilView.Modelo,
                    Año = movilView.Año,
                    Patente = movilView.Patente,
                    Tipo = movilView.Tipo,
                    Imagen = new()
                    {
                        NombreImagen = imagenView.Nombre,
                        TipoImagen = imagenView.TipoImagen,
                        Base64Imagen = imagenView.Base64
                    },
                    NumeroChasis = movilView.NumeroChasis,
                    NumeroMotor = movilView.NumeroMotor,
                    NumeroMovil = movilView.NumeroMovil,
                    Estado = movilView.Estado,
                    Seguro = new()
                    {
                        CompañiaAseguradora = seguroView.CompañiaAseguradora,
                        FechaDeVencimineto = seguroView.FechaDeVencimiento,
                        NumeroDePoliza = seguroView.NumeroDePoliza
                    }
                };

                foreach (BomberoViewModel m in bomberoViews)
                {
                    MovilBombero bombero = new()
                        {
                            Rol = m.Rol,
                            PersonaId = m.PersonaId,
                            Bombero = m.Bombero
                        };
                    movil.Bomberos.Add(bombero);
                }

                db.Moviles.Add(movil);
                await db.SaveChangesAsync();
            }
        }
    }
}

