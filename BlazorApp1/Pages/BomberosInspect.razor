@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/bomberos/{NumeroLegajoP}"

<h3>Bombero</h3>
@if (existe)
{
    @if (bomberosView is not null)
    {
        <label>Nombre: @bomberosView.Nombre</label>
        <br>
        <label>Apellido: @bomberosView.Apellido</label>
        <br>
         <label>Fecha de nacimiento: @bomberosView.FechaNacimiento</label>
        <br>
        <label>Sexo: @bomberosView.Sexo</label>
        <br>
        <label>Documento: @bomberosView.Documento</label>
        <br>
        <label>Direccion: @bomberosView.Direccion</label>
        <br>
        <label>Lugar de nacimiento: @bomberosView.LugarNacimiento</label>
        <br>
        <label>Grupo sanguineo: @bomberosView.GrupoSanguineo</label>
        <br>
        <label>Numero de ioma: @bomberosView.NumeroIoma</label>
        <br>
        <label>Numero de legajo: @bomberosView.NumeroLegajo</label>
        <br>
        <label>Estado del bombero: @bomberosView.Estado</label>
        <br>
        <label>Fecha de aceptacion: @bomberosView.FechaAceptacion</label>
        <br>
        <label>Grado del bombero: @bomberosView.Grado</label>
        <br>
        <label>Dotacion: @bomberosView.Dotacion</label>
        <br>
        <label>Brigada: @bomberosView.Brigada</label>
        <br>
        <label>Resolucion 1: @bomberosView.Resolucion1</label>
        <br>
        <label>Resolucion 1: @bomberosView.Resolucion2</label>
        <br>
        <label>Resolucion 1: @bomberosView.Resolucion3</label>
        <br>
        <label>Resolucion 1: @bomberosView.Resolucion4</label>
        <br>
        <label>Resolucion 1: @bomberosView.Resolucion5</label>
        <br>
        <label>Resolucion 1: @bomberosView.Resolucion6</label>
        <br>
        <label>Este bombero es chofer: @bomberosView.Chofer</label>
        <br>
        <label>Fecha de vencimiento del registro: @bomberosView.VencimientoRegistro</label>
        <br>
        <br>

        <button @onclick="EliminarBombero">Eliminar este bombero</button>
    }
}
else
{
    <h1>No existe ese movil</h1>
}
@code {
    [Parameter]
    public int NumeroLegajoP { get; set; }

    public class BomberosViewModel
    {
        public DateTime FechaNacimiento { get; set; }

        public TipoSexo Sexo { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        [Required, StringLength(255)]
        public string Direccion { get; set; }
        [Required, StringLength(255)]
        public string Documento { get; set; }
        [Required, StringLength(255)]
        public string LugarNacimiento { get; set; }
        [Required, StringLength(255)]
        public string GrupoSanguineo { get; set; }
        [Required, StringLength(255)]
        public string NumeroIoma { get; set; }

        public int NumeroLegajo { get; set; }

        public EstadoBombero Estado { get; set; }

        public DateTime FechaAceptacion { get; set; }

        public EscalafonJerarquico Grado { get; set; }
        [Required, StringLength(255)]
        public string Dotacion { get; set; } 
        [Required, StringLength(255)]
        public string Brigada { get; set; } 
        [Required, StringLength(255)]
        public string? Resolucion1 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion2 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion3 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion4 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion5 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion6 { get; set; }

        public bool Chofer { get; set; }

        public DateTime? VencimientoRegistro { get; set; }
    }

    public BomberosViewModel bomberosView { get; set; } = new();

    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        Bombero? bombero = await db.Bomberos.Where(m => m.NumeroLegajo == NumeroLegajoP).SingleOrDefaultAsync();
        if (bombero is not null)
        {    
            bomberosView.FechaNacimiento = bombero.FechaNacimiento;
            bomberosView.Sexo = bombero.Sexo;
            bomberosView.Nombre = bombero.Nombre;
            bomberosView.Apellido = bombero.Apellido;
            bomberosView.Direccion = bombero.Direccion;
            bomberosView.Documento = bombero.Documento;
            bomberosView.LugarNacimiento = bombero.LugarNacimiento;
            bomberosView.GrupoSanguineo = bombero.GrupoSanguineo;
            bomberosView.NumeroIoma = bombero.NumeroIoma;
            bomberosView.NumeroLegajo = bombero.NumeroLegajo;
            bomberosView.Estado = bombero.Estado;
            bomberosView.FechaAceptacion = bombero.FechaAceptacion;
            bomberosView.Grado = bombero.Grado;
            bomberosView.Dotacion = bombero.Dotacion;
            bomberosView.Brigada = bombero.Brigada;
            bomberosView.Resolucion1 = bombero.Resolucion1;
            bomberosView.Resolucion2 = bombero.Resolucion2;
            bomberosView.Resolucion3 = bombero.Resolucion3;
            bomberosView.Resolucion4 = bombero.Resolucion4;
            bomberosView.Resolucion5 = bombero.Resolucion5;
            bomberosView.Resolucion6 = bombero.Resolucion6;
            bomberosView.Chofer = bombero.Chofer;
            bomberosView.VencimientoRegistro = bombero.VencimientoRegistro;

            existe = true;
        }
        else if (bombero is null)
        {
            existe = false;
        }

    }
    public async void EliminarBombero()
    {
        using var db = DbFactory.CreateDbContext();

        Bombero? bombero = await db.Bomberos.Where(m => m.NumeroLegajo == bomberosView.NumeroLegajo).SingleOrDefaultAsync();

        if(bombero is not null)
            db.Remove(bombero);
        await db.SaveChangesAsync();

        navigationManager.NavigateTo("/bomberos");
    }
}
