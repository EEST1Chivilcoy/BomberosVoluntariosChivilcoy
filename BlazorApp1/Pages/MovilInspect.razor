@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/moviles/{VehiculoId:int?}"

<h3>Movil </h3>
@if (existe)
{
    @if (movilView is not null)
    {
        <label>Marca: @movilView.Marca</label>
        <br>
        <label>Modelo: @movilView.Modelo</label>
        <br>
        <label>Año: @movilView.Año</label>
        <br>
        <label>Patente: @movilView.Patente</label>
        <br>
        <label>Tipo: @movilView.Tipo</label>
        <br>
        <label>N° motor: @movilView.NumeroMotor</label>
        <br>
        <label>N° movil: @movilView.NumeroMovil</label>
        <br>
        <label>N° chasis: @movilView.NumeroChasis</label>
        <br>
        <label>Estado: @movilView.Estado</label>
        <br>
        <br>

        <h4>seguro</h4>
        <br>
        <br>

        <label>Compañia: @seguroView.CompañiaAseguradora</label>
        <br>
        <label>N° poliza: @seguroView.NumeroDePoliza</label>
        <br>
        <label>Fecha de vencimiento: @seguroView.FechaDeVencimiento</label>

        <button @onclick="EliminarMovil">Eliminar este movil</button>
    }
}
else
{
    <h1>No existe ese movil</h1>
}

@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    public class MovilViewModel
    {
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)]
        public string NumeroMovil { get; set; }
        [Required, StringLength(255)]
        public string NumeroMotor { get; set; }
        [Required, StringLength(255)]
        public string NumeroChasis { get; set; }
        public TipoEstadoMovil Estado { get; set; }
    }

    public class SeguroViewModel
    {
        [Required, StringLength(255)]
        public string CompañiaAseguradora { get; set; }
        [Required, StringLength(255)]
        public string NumeroDePoliza { get; set; }
        public DateTime FechaDeVencimiento { get; set; }
    }

    public MovilViewModel movilView { get; set; } = new();
    public SeguroViewModel seguroView { get; set; } = new();
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        Movil? movil = await db.Moviles.Where(m => m.VehiculoId == VehiculoId).SingleOrDefaultAsync();

        if (movil is not null)
        {
            movilView.Marca = movil.Marca;
            movilView.Modelo = movil.Modelo;
            movilView.Año = movil.Año;
            movilView.Patente = movil.Patente;
            movilView.Tipo = movil.Tipo;
            movilView.NumeroMovil = movil.NumeroMovil;
            movilView.NumeroMotor = movil.NumeroMotor;
            movilView.NumeroChasis = movil.NumeroChasis;
            movilView.Estado = movil.Estado;

            Seguro? seguro = await db.Seguros.Where(s => s.SeguroId == movil.SeguroId).SingleOrDefaultAsync();

            if (seguro is not null)
            {
                seguroView.CompañiaAseguradora = seguro.CompañiaAseguradora;
                seguroView.NumeroDePoliza = seguro.NumeroDePoliza;
                seguroView.FechaDeVencimiento = seguro.FechaDeVencimineto;
            }
            existe = true;
        }
        else if (movil is null)
        {
            existe = false;
        }
    }

    public async void EliminarMovil()
    {
        using var db = DbFactory.CreateDbContext();

        Movil? movil = await db.Moviles.Where(m => m.NumeroMovil == movilView.NumeroMovil).SingleOrDefaultAsync();

        if(movil is not null)
            db.Remove(movil);
        await db.SaveChangesAsync();

        navigationManager.NavigateTo("/moviles");
    }
}
