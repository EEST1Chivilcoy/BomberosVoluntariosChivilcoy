@implements IDisposable
@inject IDbContextFactory<BomberosDbContext> DbFactory

@if (existe)
{
    <div>
        <p>Marca: @movil.Marca</p>
        <p>Modelo: @movil.Modelo</p>
        <p>Año: @movil.Año</p>
        <p>Patente: @movil.Patente</p>
        <p>Tipo: @movil.Tipo</p>
        <p>Numero de movil: @movil.NumeroMovil</p>
        <p>Numero de motor: @movil.NumeroMotor</p>
        <p>Numero de chasis: @movil.NumeroChasis</p>
        <p>Modelo de bomba: @movil.ModeloBomba</p>
        <p>Estado: @movil.Estado</p>
        <p>Encargado: @if(movil.Encargado != null){@movil.Encargado.Nombre  @movil.Encargado.Apellido}</p>
    </div>
}
else if (!existe)
{
    <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
        <Spin Delay="500" Indicator=antIcon />
    </div>
    //Hay que ver si se puede cambiar el contenido despues del delay
    @code {
        RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
    }
}

@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    BomberosDbContext Context;
    Movil? movil { get; set; }
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        await MostrarDatos();
    }
    public async Task MostrarDatos()
    {
        movil = await Context.Moviles.Where(e => e.VehiculoId == VehiculoId).SingleOrDefaultAsync();
        existe = movil is not null;
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}