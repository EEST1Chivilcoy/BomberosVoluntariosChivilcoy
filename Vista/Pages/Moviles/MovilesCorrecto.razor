@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@page "/moviles"

<style>
    /*card:hover {
        box-shadow: 2px 2px 3px #D8D8D8;
        height: 284px!important;
        width: 184px!important;
        position: sticky;
        transition: .3s ease;
    }*/

    .botonCarta {
        width: 33.3%;
        outline: none;
        box-shadow: none;
        border-bottom-color: #fff !important;
    }
    .grid{
        height: 100%;
        width: 1036px;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 12px;
        margin: 30px .5em;
    }
</style>

<div style="display: flex;flex-direction: column;justify-content:center;align-items:center;height: 100%;width:100%;">
    <div style="display: flex;justify-content: space-between;margin: 1em 1em;width: 1036px;padding: 0; align-items: center;">
        <div style="position: relative;">
            <p style="font-family:'Agency FB';width: 15em;position: absolute; transform: translate(0%, -50%);font-size: 1.5em;">
                <b>ALTA / BAJA / MODIFICACION DE MOVILES</b>
            </p>
        </div>
        <div>
            <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/Moviles-baja"); })">
                <Button Type="@ButtonType.Primary" Style="background: rgb(62, 24, 24);color: #fff;border: none;">Moviles de baja</Button>
            </a>
            <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/agregar"); })">
                <Button Type="@ButtonType.Primary" Style="background: rgb(62, 24, 24);color: #fff;border: none;">Agregar Movil</Button>
            </a>
        </div>
    </div>
    <div class="grid">
        @if (moviles is not null)
        {
            @foreach(Movil m in moviles)
            {
                if (m.Estado != TipoEstadoMovil.Activo) continue;
                <card class="cartaPropia" style="display: flex; flex-direction: column;height: 345px;width: 250px;border-radius: 3px;box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);">
                    <div style="width: 100%;height: 75%;margin: 0; padding: 0;">
                        <img src="@CargarImage(m)" style="width: 100%;height:100%;object-fit: cover;overflow: hidden;border-radius: 3px 3px 0 0;">
                    </div>
                    <div style="width: 100%;height:25%;">
                        <div style="height: 50%">
                            <p style="height: 100%;background: #fff;font-size: 14px;display:flex;justify-content: center;align-items: center;font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';">Movil nº @m.NumeroMovil</p>
                        </div>
                        <div style="display: flex; flex-direction: row;height: 50%;background: transparent;">
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0 0 0 3px;border-right: 0;border-left: 0;border-top: 1px solid #d9d9d9;" OnClick="@(() => { navigationManager.NavigateTo($"/moviles/movil/{m.VehiculoId}"); })">
                                <Icon Type="ellipsis" Theme="outline" />
                            </Button>
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0;border-right: 1px solid #d9d9d9;border-left: 1px solid #d9d9d9;border-top: 1px solid #d9d9d9;" OnClick="()=>EditarMovilModal(m.VehiculoId)">
                                <Icon Type="edit" Theme="outline" />
                            </Button>
                            <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro de dar de baja a este movil?"
                                        OnConfirm="()=>CambiarEstado(m.VehiculoId,TipoEstadoMovil.Inactivo)"
                                        OnCancel="Cancel">
                                <Button class="botonCarta" Style="width: 100%!important;height: 100%;border-radius: 0 0 3px 0;border-right: 0;border-left: 0;border-top: 1px solid #d9d9d9;">
                                    <Icon Type="down" Theme="outline" />
                                </Button>
                            </Popconfirm>
                        </div>
                    </div>
                </card>
                <Modal Title="Editar" OnCancel="@HandleCancel" Visible="@editarVisible">
                    <MovilEditar VehiculoId="@EditarPorId" />
                </Modal>
            }
        }
        else
        {
            <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
                <Spin Delay="500" Indicator=antIcon />
            </div>
            //Hay que ver si se puede cambiar el contenido despues del delay
            @code {
                RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
            }
        }
    </div>
</div>

@code {

    public Movil[]? moviles;
    public bool editarVisible;
    int EditarPorId;
    // string xeditar;
    // public MovilEditar? movilEditar = new();
    BomberosDbContext Context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();

        moviles = await Context.Moviles.ToArrayAsync();
    }

    public string CargarImage(Movil movil)
    {
        using var db = DbFactory.CreateDbContext();

        string src = "/";

        ImagenMovil? imagen = db.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }

        return src;
    }

    public async void EditarMovilModal(int id)
    {
        EditarPorId = id;
        editarVisible = true;
        // MovilEditar.GetMovilesViewModel(xeditar);
        // await movilEditar.Init();
        // movilEditar.LimpiarDatos();
        StateHasChanged();
    }
    
    public async void CambiarEstado(int id, TipoEstadoMovil estado)
    {
        Movil? movil_a_modificar = await Context.Moviles.Where(m => m.VehiculoId == id).SingleOrDefaultAsync();
        if (movil_a_modificar is not null)
        {
            movil_a_modificar.Estado = estado;
        }
        await Context.SaveChangesAsync();
        //NumeroMovil.NumeroMovil = string.Empty;
        moviles = await Context.Moviles.ToArrayAsync();
        StateHasChanged();
    }

    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        editarVisible = false;
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}


