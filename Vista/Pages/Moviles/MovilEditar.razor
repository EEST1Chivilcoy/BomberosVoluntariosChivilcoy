@implements IDisposable
@using Vista.Services
@inject IMovilService MovilService
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

<style>
    .inpt-container {
        position: relative;
        padding: .8em 0;
    }

    input[type=text], input[type=number] {
        border: none;
        background: none;
        border-bottom: 1px solid #bdb8b8;
        outline: none;
        padding: 1em;
        width: 100%;
        height: .6em;
    }

    .inpt-label {
        position: absolute;
        top: 0;
        left: 5px;
        transform: translateY(10px);
        color: #bdb8b8;
        transition: transform .5s, color .3s;
    }

    input[type=text]:focus, input[type=number]:focus, input[type=file]:focus, input[type=date]:focus {
        border-bottom: 1px solid rgb(62, 24, 24);
        transition: 1s;
    }

        input[type = text]:focus + .inpt-label, input[type = text]:not(:placeholder-shown) + .inpt-label {
            transform: translateY(-4px) scale(.9);
            transform-origin: left top;
            color: rgb(62, 24, 24);
        }

    .lblInputFile {
        border: 1px solid #403F3F;
        color: #403F3F;
        padding: .5em .8em;
        border-radius: 50px;
        background: #eee;
        cursor: pointer;
        font-family: unset;
        font-size: 14px;
        width: 60%;
        transform: translate(50% -50%);
        text-align: center;
    }

    .select-estadoMovil {
        padding: .8em 0;
        width: 100%;
        border: 1px solid #bdb8b8;
        outline: none;
        box-shadow: none;
    }

        .select-estadoMovil option {
            border: 1px solid #bdb8b8;
        }

    .raro {
        padding: 6em 0;
    }

    .ant-modal-body {
        width: 100%;
        height: 100%;
        padding: 0;
    }

    .ant-modal-content {
        width: 100%;
        height: 100%;
    }

    .ant-modal-footer {
        display: none;
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

</style>

<div style="width: 100%;padding: 1em;">
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>
    <div class="steps-content" style="height: 100%;width: 100%;padding-top: 0;border: none;">
        <div style="width: 100%;height: 100%; background: #fff;">
            @if (current == 0)
            {
                <div style="height: 22em;width: 100%;padding: 10px;">
                    <div class="inpt-container">
                        <input type="text" @bind="movilView.Marca" placeholder="Marca: " />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="movilView.Modelo" placeholder="Modelo: " />
                    </div>
                    <div class="inpt-container">
                        <input type="number" @bind="movilView.Año" placeholder="Año: " />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="movilView.Patente" placeholder="Patente: " />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="movilView.Tipo" placeholder="Tipo: " />
                    </div>
                    <div class="inpt-container">
                        <label class="lblInputFile" for="fotoMovil"><Icon Type="cloud-upload" Theme="outline" Style="height: 14px;width: 14px;" />Cargar foto del móvil</label>
                        <InputFile OnChange="SubirFoto" id="fotoMovil" style="display: none;" />
                        <h3 id="path" style="display: inline-block;font-size:12px;">@imagenView.Nombre @* <Icon Type="eye" Theme="outline" /> *@</h3>
                    </div>
                </div>
            }
            else if (current == 1)
            {
                <div style="height: 22em;width: 100%;padding: 10px;">
                    <div class="inpt-container">
                        <input type="text" @bind="movilView.NumeroMovil" placeholder="Nº del Móvil:" />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="movilView.NumeroMotor" placeholder="Nº Motor:" />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="movilView.NumeroChasis" placeholder="Nº Chasis:" />
                    </div>
                    <div class="inpt-container">
                        <select @bind="movilView.Estado" class="select-estadoMovil">
                            <option value="@TipoEstadoMovil.Estado" selected disabled hidden>Seleccione estado del móvil</option>
                            <option value="@TipoEstadoMovil.Activo">Activo</option>
                            <option value="@TipoEstadoMovil.Inactivo">Inactivo</option>
                            <option value="@TipoEstadoMovil.Reparacion">Reparación</option>
                            <option value="@TipoEstadoMovil.Limpieza">Limpieza</option>
                        </select>
                    </div>
                    <div style="height: 6.8em;">
                    </div>
                </div>
            }
            else if (current == 2)
            {
                <div style="width: 100%;height: 22em;background: #fff;">
                    <div style="height: 100%;width: 100%;padding: 10px;">
                        <div class="inpt-container">
                            <Select TItem="BomberoViewModel"
                                    TItemValue="string"
                                    DataSource="@ListaBomberos"
                                    Placeholder="Seleccione Bombero Encargado"
                             @bind-Value="@movilView.EncargadoId"
                                    LabelName="@nameof(BomberoViewModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViewModel.NumeroLegajo)"
                                    DefaultValue="@movilView.NombreYApellido">
                            </Select>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="steps-action">
        @if (current > 0)
        {
            <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
        }
        @if (current < steps.Length - 1)
        {
            <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
        }
        @if (current == steps.Length - 1)
        {
            <Button Class="boton_p" @onclick="EditarMovil">
                Editar movil
            </Button>
        }
    </div>
</div>

<style>
    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
    }
</style>
@code {
    [Parameter]
    public int? VehiculoIdEditar { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    BomberosDbContext? Context { get; set; }

    public class MovilViewModel
    {
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int? Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)]
        public string NumeroMovil { get; set; }
        [Required, StringLength(255)]
        public string NumeroMotor { get; set; }
        [Required, StringLength(255)]
        public string NumeroChasis { get; set; }
        public TipoEstadoMovil Estado { get; set; }
        public string NombreYApellido { get; set; }
        public string EncargadoId { get; set; }
    }

    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }

    public class BomberoViewModel
    {
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string NombreYApellido { get { return Nombre + " " + Apellido; } }
        public string NumeroLegajo { get; set; }
    }

    public MovilViewModel movilView { get; set; } = new();
    public ImagenViewModel imagenView { get; set; } = new();
    public List<BomberoViewModel> ListaBomberos = new();
    public Bombero[]? bomberos;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        movilView = new();
        imagenView = new();
        Context = DbFactory.CreateDbContext();

        bomberos = await Context.Bomberos.ToArrayAsync();

        await CargarMovil();
        await CargarBomberosView();
    }

    private async Task CargarMovil()
    {

        Movil? movil = await Context.Moviles.Include(e => e.Encargado).Include(i => i.Imagen).SingleOrDefaultAsync(v => v.VehiculoId == VehiculoIdEditar);

        if (movil is not null)
        {
            movilView.Marca = movil.Marca;
            movilView.Modelo = movil.Modelo;
            movilView.Año = movil.Año;
            movilView.Patente = movil.Patente;
            movilView.Tipo = movil.Tipo;
            movilView.NumeroMovil = movil.NumeroMovil;
            movilView.NumeroMotor = movil.NumeroMotor;
            movilView.NumeroChasis = movil.NumeroChasis;
            movilView.Estado = movil.Estado;
            imagenView.Nombre = movil.Imagen.NombreImagen;
            imagenView.TipoImagen = movil.Imagen.TipoImagen;
            imagenView.Base64 = movil.Imagen.Base64Imagen;
            movilView.NombreYApellido = movil.Encargado.Nombre + " " + movil.Encargado.Apellido;
            existe = true;

            StateHasChanged();
        }
        else if (movil is null)
        {
            existe = false;
        }

    }

    public async void EditarMovil() //FUNCION FINALIZAR EDITAR
    {
        try
        {
            if (movilView.NumeroMovil is not null)
            {
                //Movil? movil = await Context.Moviles.SingleOrDefaultAsync(e => e.VehiculoId == VehiculoIdEditar); ;
                Movil? comprobante = await Context.Moviles.Where(m => m.NumeroMovil == movilView.NumeroMovil).SingleOrDefaultAsync();
                Bombero? EncargadoNew = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == int.Parse(movilView.EncargadoId));
                if (comprobante is not null)
                {
                    Movil movil = new Movil()
                        {
                            VehiculoId = comprobante.VehiculoId,
                            Marca = movilView.Marca,
                            Modelo = movilView.Modelo,
                            Año = movilView.Año,
                            Patente = movilView.Patente,
                            Tipo = movilView.Tipo,
                            Encargado = EncargadoNew,
                            Imagen = new()
                            {
                                NombreImagen = imagenView.Nombre,
                                TipoImagen = imagenView.TipoImagen,
                                Base64Imagen = imagenView.Base64
                            },
                            //ModeloBomba no se implementa en la edición
                            NumeroChasis = movilView.NumeroChasis,
                            NumeroMotor = movilView.NumeroMotor,
                            NumeroMovil = movilView.NumeroMovil,
                            Estado = movilView.Estado,
                            //Seguro no se implementa en la edicion
                        };
                    MovilService.EditarMovil(movil);
                    StateHasChanged();
                    await Init();
                    await OnClose.InvokeAsync();
                    await message.Success("Se logro editar correctamente");
                }
            }
            
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
        
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenView.Base64 = imagenBase64;
        imagenView.TipoImagen = e.File.ContentType;
        imagenView.Nombre = e.File.Name;

        await message.Success("Imagen cargada");
        StateHasChanged();
    }

    private async Task CargarBomberosView()
    {
        ListaBomberos = new();
        var bomberos = await Context.Bomberos.ToListAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel Bvm = new()
                {
                    Apellido = b.Apellido,
                    Nombre = b.Nombre,
                    NumeroLegajo = b.NumeroLegajo.ToString()

                };
            ListaBomberos.Add(Bvm);
        }
    }
        public class StepItem
        {
            public string Title { get; set; }
            public string Content { get; set; }
        }

        public int current { get; set; } = 0;

        public StepItem[] steps =
        {
        new StepItem {Title = "Básico"},
        new StepItem {Title = "Datos"},
        new StepItem {Title = "Seguro"}
    };

        void OnPreClick()
        {
            current--;
        }

        void OnNextClick()
        {
            current++;
        }

        public void Dispose()
        {
            Context?.Dispose();
        }
}


