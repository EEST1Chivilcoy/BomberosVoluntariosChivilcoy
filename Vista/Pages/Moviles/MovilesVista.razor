@using Vista.Services
@inject IMovilService MovilService
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@page "/moviles"

<style>

    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 1em;
        padding: 0;
        overflow: auto;
    }

    .botonCarta {
        width: 33.3%;
        outline: none;
        box-shadow: none;
        border-bottom-color: #fff !important;
    }

    .grid {
        max-width: 1300px;
        min-width: 320px;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 12px;
        margin: 30px 0;
    }

    @@media screen and (max-width: 1048px) {
        .grid div:first-child {
            flex-direction: column !important;
            align-items: flex-start !important;
        }
    }

    @@media screen and (max-width: 719px) {
        .grid div:first-child div:last-child {
            flex-direction: column !important;
        }
    }
</style>

<div class="template">
    <div class="grid">
        <div style="display: flex;justify-content: space-between;width: 100%;min-width: 320px;align-items: center;">
            <div style="position: relative;">
                <p style="font-family:'Agency FB';width: 15em;position: absolute; transform: translate(0%, -50%);font-size: 1.5em;display: contents;">
                    <b>ALTA / BAJA / MODIFICACIÓN DE MÓVILES</b>
                </p>
            </div>
            <div style="display: flex; gap: 5px;">
                <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/Moviles-baja"); })">
                    <Button Style="background: rgb(62, 24, 24);color: #fff;border: none;">Móviles de baja</Button>
                </a>
                <a @onclick="AgregarMovilModal">
                    <Button Style="background: rgb(62, 24, 24);color: #fff;border: none;">Agregar móvil</Button>
                </a>
            </div>
        </div>
        @if (moviles is not null)
        {
            @foreach (Movil m in moviles)
            {
                if (m.Estado != TipoEstadoMovil.Activo) continue;
                <card class="cartaPropia" style="margin-bottom: 15px;display: flex; flex-direction: column;height: 345px;width: 250px;border-radius: 3px;box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);">
                    <div style="width: 100%;height: 75%;margin: 0; padding: 0;">
                        <img src="@CargarImage(m)" style="width: 100%;height:100%;object-fit: cover;overflow: hidden;border-radius: 3px 3px 0 0;">
                    </div>
                    <div style="width: 100%;height:25%;">
                        <div style="height: 50%">
                            <p style="height: 100%;background: #fff;font-size: 14px;display:flex;justify-content: center;align-items: center;font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';">Móvil nº @m.NumeroMovil</p>
                        </div>
                        <div style="display: flex; flex-direction: row;height: 50%;background: transparent;">
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0 0 0 3px;border-right: 0;border-left: 0;border-top: 1px solid #d9d9d9;" OnClick="()=>DetallesMovilModal(m.VehiculoId)">
                                <Icon Type="Menu" Theme="outline" />
                            </Button>
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0;border-right: 1px solid #d9d9d9;border-left: 1px solid #d9d9d9;border-top: 1px solid #d9d9d9;" OnClick="()=>FichaMovilModal(m.VehiculoId)">
                                <Icon Type="Tool" Theme="outline" />
                            </Button>
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0;border-right: 1px solid #d9d9d9;border-left: 1px solid #d9d9d9;border-top: 1px solid #d9d9d9;" OnClick="()=>LimpiezasMovilModal(m.VehiculoId)">
                                <Icon Type="Schedule" Theme="outline" />
                            </Button>
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0;border-right: 1px solid #d9d9d9;border-left: 1px solid #d9d9d9;border-top: 1px solid #d9d9d9;" OnClick="()=>EditarMovilModal(m.VehiculoId)">
                                <Icon Type="edit" Theme="outline" />
                            </Button>
                            <Popconfirm Style="width: 33.3%;" Title="¿Estás seguro de dar de baja a este móvil?"
                                        OnConfirm="()=>CambiarEstado(m.VehiculoId,TipoEstadoMovil.Inactivo)"
                                        OnCancel="Cancel">
                                <Button class="botonCarta" Style="width: 100%!important;height: 100%;border-radius: 0 0 3px 0;border-right: 0;border-left: 0;border-top: 1px solid #d9d9d9;">
                                    <Icon Type="delete" Theme="outline" />
                                </Button>
                            </Popconfirm>
                        </div>
                    </div>
                </card>
            }

            @if (EditarVisible)
            {
                <Modal Footer="null" Title="Editar" OnCancel="@HandleCancel" Visible="true">
                    <MovilEditar VehiculoIdEditar="@EditarPorId" OnClose="@CerrarModal" />
                </Modal>
            }

            @if (DetallesVisible)
            {
                <Modal Footer="null" Title="Detalles" OnCancel="@HandleDCancel" Visible="true" Style="width: 35%!important;">
                    <MovilDetalles VehiculoIdDetalle="@DetallesPorId" OnClose="@CerrarDModal" />
                </Modal>
            }
            @if (LimpiezasVisible)
            {
                <Modal Footer="null" OnCancel="@HandleLCancel" Visible="true" Style="width: 35%!important;">
                    <MovilLimpiezas VehiculoId="@DetallesPorId" OnClose="@CerrarLModal" />
                </Modal>
            }
            @if (FichaVisible)
            {
                <Modal Footer="null" Title="Ficha técnica" OnCancel="@HandleFCancel" Visible="true" Style="width: 35%!important;">
                    <MovilFichaTecnica VehiculoId="@DetallesPorId" />
                </Modal>
            }
            @if (AgregarVisible)
            {
                <Modal Footer="null" Title="Agregar" OnCancel="@HandleACancel" Visible="true">
                    <MovilAgregar OnClose="@CerrarAModal" />
                </Modal>
            }
        }
        else
        {
            <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
                <Spin Delay="500" Indicator=antIcon />
            </div>
            //Hay que ver si se puede cambiar el contenido despues del delay
            @code {
            RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
        }
        }
    </div>
</div>

@code {
    Movil[]? moviles;
    bool EditarVisible { get; set; }
    bool DetallesVisible { get; set; }
    bool LimpiezasVisible { get; set; }
    bool FichaVisible { get; set; }
    bool AgregarVisible { get; set; }
    int EditarPorId { get; set; }
    int DetallesPorId { get; set; }
    BomberosDbContext Context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();

        moviles = await Context.Moviles.ToArrayAsync();
    }

    public string CargarImage(Movil movil)
    {
        Context = DbFactory.CreateDbContext();

        string src = "/";

        ImagenMovil? imagen = Context.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }

        return src;
    }

    public void EditarMovilModal(int id)
    {
        EditarPorId = id;
        EditarVisible = true;
        StateHasChanged();
    }
    public void DetallesMovilModal(int id)
    {
        DetallesPorId = id;
        DetallesVisible = true;
        StateHasChanged();
    }
    public void LimpiezasMovilModal(int id)
    {
        DetallesPorId = id;
        LimpiezasVisible = true;
        StateHasChanged();
    }
    public void FichaMovilModal(int id)
    {
        DetallesPorId = id;
        FichaVisible = true;
        StateHasChanged();
    }
    public void AgregarMovilModal()
    {
        AgregarVisible = true;
    }

    public async void CambiarEstado(int movilid, TipoEstadoMovil estado)
    {
        await MovilService.CambiarEstado(movilid, estado);
        moviles = await Context.Moviles.ToArrayAsync();
        StateHasChanged();
        await _message.Success("Este movil se dio de baja");
    }

    private void Cancel()
    {
        _message.Error("Operación cancelada.");
    }

    private void HandleCancel(MouseEventArgs e)
    {
        CerrarModal();
    }
    private async void CerrarModal()
    {
        EditarVisible = false;
        await Init();
        StateHasChanged();
    }

    private void HandleDCancel(MouseEventArgs e)
    {
        CerrarDModal();
    }
    private void HandleLCancel(MouseEventArgs e)
    {
        LimpiezasVisible = false;
    }
    private void HandleFCancel(MouseEventArgs e)
    {
        FichaVisible = false;
    }
    private void CerrarDModal()
    {
        DetallesVisible = false;
    }
    private void CerrarLModal()
    {
        LimpiezasVisible = false;
    }

    private void HandleACancel(MouseEventArgs e)
    {
        CerrarAModal();
    }
    private async void CerrarAModal()
    {
        AgregarVisible = false;
        await Init();
        StateHasChanged();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}