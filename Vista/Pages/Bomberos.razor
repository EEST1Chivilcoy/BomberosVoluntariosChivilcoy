@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/bomberos"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;

<div class="Titulo">
    <h3> Bomberos</h3>
</div>
<BSContainer id="agregar-bombero">
    <a @onclick="@(() => { navigationManager.NavigateTo($"/bomberos/agregar"); })">
        <BSButton id="button-center" Color="BSColor.Danger">Agregar Bombero +</BSButton>
    </a>
</BSContainer>
<br/>
<BSContainer id="agregar-bombero">
    <a @onclick="@(() => { navigationManager.NavigateTo($"/bomberos/AgregarBrigada"); })">
        <BSButton id="button-center" Color="BSColor.Danger">Agregar Brigada +</BSButton>
    </a>
</BSContainer>

<Table @ref="table"
       TItem="Bombero"
       DataSource="@bomberos"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange"
       >

    <Selection Key="@(context.NumeroLegajo.ToString())" />
    <PropertyColumn Property="c=>c.NumeroLegajo" Sortable />
    <PropertyColumn Property="c=>c.Nombre" Sortable />
    <PropertyColumn Property="c=>c.Apellido" Sortable />
    <PropertyColumn Property="c=>c.Grado" Sortable />
    <ActionColumn Title="Action">
        <Space>
            <SpaceItem><Button Danger OnClick="()=>Delete(context.NumeroLegajo)">Delete</Button></SpaceItem>
                <Button Type="primary" OnClick="()=>ShowModal(context.NumeroLegajo)">Editar</Button>
        </Space>
    </ActionColumn>
 


    @*--------------------------------------------Modal-----------------------------------------------*@
</Table>
                
<Modal Title="@("BasicModal")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
          <Form Loading="loading" Model="@bomberoVM"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form">

                <FormItem Label="Nombre">
                <Input DefaultValue="@bomberoVM.Nombre" @bind-Value="@bomberoVM.Nombre" />
                </FormItem>
                <FormItem Label="Apellido">
                <Input DefaultValue="@bomberoVM.Apellido" @bind-Value="@bomberoVM.Apellido" />
                </FormItem>

                <FormItem Label="Fecha de Nacimiento">
                    <DatePicker @bind-Value="@bomberoVM.FechaNacimiento" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
                    @*<DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@bomberoView.FechaNacimiento" Style="width: 100%;"/>*@
                </FormItem>

                <FormItem Label="DNI">
            <Input DefaultValue="@bomberoVM.Documento" @bind-Value="@bomberoVM.Documento" />
                </FormItem>
                <FormItem Label="Direccion">
            <Input DefaultValue="@bomberoVM.Direccion" @bind-Value="@bomberoVM.Direccion" />
                </FormItem>
                <FormItem Label="Dotaciones">
                    <EnumSelect DefaultValue="@bomberoVM.Dotacion" TEnum="TipoDotaciones" @bind-Value="@bomberoVM.Dotacion" />
                </FormItem>

                <FormItem Label="Numero Legajo">
                    <AntDesign.InputNumber DefaultValue="@bomberoVM.NumeroLegajo" @bind-Value="@bomberoVM.NumeroLegajo" />
                </FormItem>

                <FormItem Label="Fecha de Aceptacion">
                    @*<DatePicker @bind-Value="@bomberoView.FechaAceptacion" TValue="DateTime?" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />*@
            <DatePicker DefaultValue="@bomberoVM.FechaAceptacion" @bind-Value="@bomberoVM.FechaAceptacion" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
                </FormItem>

                <FormItem Label="Numero IOMA">
                    <Input DefaultValue="@bomberoVM.NumeroIoma" @bind-Value="@bomberoVM.NumeroIoma" />
                </FormItem>

                <FormItem Label="Lugar de nacimiento">
                    <Input DefaultValue="@bomberoVM.LugarNacimiento" @bind-Value="@bomberoVM.LugarNacimiento" />
                </FormItem>

                @*<FormItem Label="Grupo Sanguineo" >
                <Input @bind-Value="@bomberoView.GrupoSanguineo"/>
                </FormItem>*@

                <FormItem Label="Dotaciones">
                    <EnumSelect DefaultValue="@bomberoVM.GrupoSanguineo" TEnum="TipoGrupoSanguineo" @bind-Value="@bomberoVM.GrupoSanguineo" />
                </FormItem>

                <FormItem Label="Observaciones">
                    <Input DefaultValue="@bomberoVM.Observaciones" @bind-Value="@bomberoVM.Observaciones" />
                </FormItem>

                <FormItem Label="Nivel de estuduio">
            <Input DefaultValue="@bomberoVM.NivelEstudios" @bind-Value="@bomberoVM.NivelEstudios" />
                </FormItem>

                <FormItem Label="Profesion">
                    <Input DefaultValue="@bomberoVM.Profesion" @bind-Value="@bomberoVM.Profesion" />
                </FormItem>

                <FormItem Label="Resolucion 1">
            <Input DefaultValue="@bomberoVM.Resolucion1" @bind-Value="@bomberoVM.Resolucion1" />
                </FormItem>
                <FormItem Label="Resolucion 2">
                    <Input DefaultValue="@bomberoVM.Resolucion2" @bind-Value="@bomberoVM.Resolucion2" />
                </FormItem>
                <FormItem Label="Resolucion 3">
                    <Input DefaultValue="@bomberoVM.Resolucion3" @bind-Value="@bomberoVM.Resolucion3" />
                </FormItem>
                <FormItem Label="Resolucion 4">
                    <Input DefaultValue="@bomberoVM.Resolucion4" @bind-Value="@bomberoVM.Resolucion4" />
                </FormItem>
                <FormItem Label="Resolucion 5">
                    <Input DefaultValue="@bomberoVM.Resolucion5" @bind-Value="@bomberoVM.Resolucion5" />
                </FormItem>
                <FormItem Label="Resolucion 6">
                    <Input DefaultValue="@bomberoVM.Resolucion6" @bind-Value="@bomberoVM.Resolucion6" />
                </FormItem>

                <FormItem Label="Es chofer">
            <Checkbox DefaultValue="@bomberoVM.Chofer" @bind-Checked="@bomberoVM.Chofer">
                    </Checkbox>
                    @if (bomberoVM.Chofer)
                    {
                        <label id="texto">Fecha vencimiento del carnet</label>
                        <br>
                        @*<DatePicker @bind-Value="@bomberoView.VencimientoRegistro" TValue="DateTime?" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />*@
                <DatePicker DefaultValue="@bomberoVM.VencimientoRegistro" @bind-Value="@bomberoVM.VencimientoRegistro" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
                    }
                    @if (!bomberoVM.Chofer)
                    {
                        <label id="texto">No es chofer</label>
                    }
                </FormItem>

                <FormItem Label="Grado">
            <EnumSelect DefaultValue="@bomberoVM.Grado" TEnum="EscalafonJerarquico" @bind-Value="@bomberoVM.Grado" />
                </FormItem>


                <FormItem Label="Estado">
                    <EnumSelect DefaultValue="@bomberoVM.Estado" TEnum="EstadoBombero" @bind-Value="@bomberoVM.Estado" />
                </FormItem>

                <FormItem Label="Sexo">
                    <EnumSelect DefaultValue="@bomberoVM.Sexo" TEnum="TipoSexo" @bind-Value="@bomberoVM.Sexo" />
                </FormItem>


                @*Carga Contacto-----------------------------------------------------------------------*@
                <FormItem Label="Telefono Laboral">
                    <Input DefaultValue="@bomberoVM.TelefonoLaboral" @bind-Value="@bomberoVM.TelefonoLaboral" />
                </FormItem>

                <FormItem Label="Telefono Celular">
                    <Input DefaultValue="@bomberoVM.TelefonoCel" @bind-Value="@bomberoVM.TelefonoCel" />
                </FormItem>

                <FormItem Label="Telefono Fijo">
                    <Input DefaultValue="@bomberoVM.TelefonoFijo" @bind-Value="@bomberoVM.TelefonoFijo" />
                </FormItem>

                <FormItem Label="Email">
            <Input DefaultValue="@bomberoVM.Email" @bind-Value="@bomberoVM.Email" />
                </FormItem>
                @*Carga Brigada-----------------------------------------------------------------------*@
                <FormItem Label="Nombre Brigada">
            <Input DefaultValue="@bomberoVM.NombreBrigada" @bind-Value="@bomberoVM.NombreBrigada" />
                </FormItem>
          </Form>
 </Modal>
                <br />
                <p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

                <br />
                <h5>selections:</h5>
                @if (selectedRows != null && selectedRows.Any())
{
    <Button Danger Size="small" OnClick="@(e => { selectedRows = null; })">Clear</Button>

    @foreach (var selected in selectedRows)
    {
        <Tag @key="selected.NumeroLegajo" Closable OnClose="e=>RemoveSelection(selected.NumeroLegajo)">@selected.NumeroLegajo - @selected.NumeroLegajo</Tag>
    }
}

<Button OnClick="()=> { _pageIndex--; }">Previous page</Button>
<Button OnClick="()=> { _pageIndex++; }">Next Page</Button>

@code {

    #region "tabla"

    Bombero[]? bomberos;

    IEnumerable<Bombero> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        bomberos = await db.Bomberos.ToArrayAsync();

    }

    private async Task OnChange(QueryModel<Bombero> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.NumeroLegajo != id);
        selectedRows = selected;
    }

    private async void Delete(int id)
    {
        using var context = DbFactory.CreateDbContext();
        Bombero? bombero = await context.Bomberos.Where(b => b.NumeroLegajo == id).SingleOrDefaultAsync();
        context.Remove(bombero);
        bomberos = bomberos.Where(x => x.NumeroLegajo != id).ToArray();
        _total = bomberos.Length;
        await context.SaveChangesAsync();
        StateHasChanged();
    }
    #endregion
    //----------------------------------------------------------------------------------------------
    #region "ViewModel"
    private class BomberosViewModel
    {
        public DateTime FechaNacimiento { get; set; }
        public DateTime FechaAceptacion { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public EstadoBombero Estado { get; set; }
        public int NumeroLegajo { get; set; }
        public EscalafonJerarquico Grado { get; set; }
        public TipoDotaciones Dotacion { get; set; }
        [Required, StringLength(255)]
        public string Brigada { get; set; }
        public bool Chofer { get; set; }
        public DateTime? VencimientoRegistro { get; set; }
        public TipoSexo Sexo { get; set; }
        [Required, StringLength(255)]
        public string Direccion { get; set; }
        [Required, StringLength(255)]
        public string LugarNacimiento { get; set; }
        [Required, StringLength(255)]
        public string Documento { get; set; }
        [Required, StringLength(255)]
        public TipoGrupoSanguineo GrupoSanguineo { get; set; }
        [Required, StringLength(255)]
        public string Observaciones { get; set; }
        [Required, StringLength(255)]
        public string Profesion { get; set; }
        [Required, StringLength(255)]
        public string NivelEstudios { get; set; }
        [Required, StringLength(255)]
        public string NumeroIoma { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion1 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion2 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion3 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion4 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion5 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion6 { get; set; }
        //Contacto-------------------------------
        [Required, StringLength(255)]
        public string? TelefonoCel { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoLaboral { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoFijo { get; set; }
        [Required, StringLength(255)]
        public string? Email { get; set; }
        //Imagen-------------------------------
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string NombreImagen { get; set; }
        //Brigada-------------------------------
        public string NombreBrigada { get; set; }
    }
    #endregion
    //private void OnFinish(EditContext editContext)
    //{
    //    Console.WriteLine($"Success:{JsonSerializer.Serialize(bomberoView)}");
    //}

    //private void OnFinishFailed(EditContext editContext)
    //{
    //    Console.WriteLine($"Failed:{JsonSerializer.Serialize(bomberoView)}");
    //}
    #region original form coding

    private BomberosViewModel bomberoVM = new BomberosViewModel();

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(bomberoVM)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    #endregion

    #region original modal coding

    bool _visible = false;

    private async void ShowModal(int id)
    {
        _visible = true;
        bomberoVM = await GetBomberoViewModel(id);

    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visible = false;
    }

    #endregion

    /*
    * Careful!
    *
    * next bind submit event to modal OK button
     */

    private Form<BomberosViewModel> _form;

    /// <summary>
    /// when form is submited, close the modal
    /// </summary>
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visible = false;
    }

    /// <summary>
    /// on modal OK button is click, submit form manually
    /// </summary>
    /// <param name="e"></param>
    private void HandleOk(MouseEventArgs e)
    {
        _form.Submit();
    }

    private async Task<BomberosViewModel> GetBomberoViewModel(int id)
    {
        using var context = DbFactory.CreateDbContext();
        Bombero? bombero = await context.Bomberos.Where(b => b.NumeroLegajo == id).SingleOrDefaultAsync(); 
        Contacto? contacto = await context.Contactos.Where(c => c.ContactoId == bombero.Contacto.ContactoId).SingleOrDefaultAsync(); 
        Brigada? brigada = await context.Brigadas.Where(b => b.BrigadaId == bombero.BrigadaId).SingleOrDefaultAsync();
        Imagen? imagen = await context.ImagenesBomberos.Where(i => i.ImagenId == bombero.ImagenId).SingleOrDefaultAsync();

        BomberosViewModel BomeroPasajeVM = new()
        {
                FechaNacimiento = bombero.FechaNacimiento,
                Sexo = bombero.Sexo,
                Nombre = bombero.Nombre,
                Apellido = bombero.Apellido,
                Documento = bombero.Documento,
                NumeroLegajo = bombero.NumeroLegajo,
                NumeroIoma = bombero.NumeroIoma,
                LugarNacimiento = bombero.LugarNacimiento,
                Grado = bombero.Grado,

                NombreImagen =imagen.NombreImagen,
                TipoImagen = imagen.TipoImagen,
                Base64 = imagen.Base64Imagen,

                Dotacion = bombero.Dotacion,

                NombreBrigada = brigada.Nombre,

                Resolucion1 = bombero.Resolucion1,
                Resolucion2 = bombero.Resolucion2,
                Resolucion3 = bombero.Resolucion3,
                Resolucion4 = bombero.Resolucion4,
                Resolucion5 = bombero.Resolucion5,
                Resolucion6 = bombero.Resolucion6,
                GrupoSanguineo = (TipoGrupoSanguineo)Enum.Parse(typeof(TipoGrupoSanguineo), bombero.GrupoSanguineo),
                Estado = bombero.Estado,
                Chofer = bombero.Chofer,
                VencimientoRegistro = bombero.VencimientoRegistro,
                Direccion = bombero.Direccion,
                Observaciones = bombero.Observaciones,
                Profesion = bombero.Profesion,
                NivelEstudios = bombero.NivelEstudios,
                FechaAceptacion = bombero.FechaAceptacion,

                TelefonoCel = contacto.TelefonoCel,
                TelefonoFijo =contacto.TelefonoFijo,
                TelefonoLaboral = contacto.TelefonoLaboral,
                Email = contacto.Email
        };
        StateHasChanged();
        return BomeroPasajeVM;
    }
}
