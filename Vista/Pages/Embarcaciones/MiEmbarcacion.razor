@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/embarcaciones/miembarcacion/{VehiculoId:int?}/{BomberoId:int?}"

<style>
    #inferior {
        font-family: calibri light;
        text-align: center;
        font-size: 20px;
    }

    #Centro {
        text-align: center;
        font-size: 20px;
        color: white;
        border-radius: 15px;
        max-width: 380px;
        min-width: 300px;
        background-color: rgb(79, 34, 34);
    }

    #ImagenMovil {
        border-style: solid;
        border-color: #000;
        border-width: 1px;
        max-height: 200px;
        max-width: 380px;
        min-width: 380px;
        min-height: 200px;
        border-radius: 15px;
    }

    #blanco {
        width: 100%;
        padding: 40px;
    }

    #blancoA {
        width: 100%;
        padding: 10px;
    }

    #tipo {
        text-align: center;
        font-size: 25px;
        color: white;
        background-color: rgb(79, 34, 34);
        border-radius: 15px;
    }
</style>
@if (existe)
{
    <BSContainer id="blancoA">

    </BSContainer>
    <BSRow>
        <BSCol Column="4"></BSCol>
        <BSCol Column="4"> <img id="ImagenMovil" src="data:@imagenView.TipoImagen;base64,@imagenView.Base64" /></BSCol>
        <BSCol Column="4"></BSCol>
    </BSRow>
    <BSContainer id="blanco">
    </BSContainer>
    <BSRow Align="Align.Center">
        <BSCol Column="4"></BSCol>
        <BSCol Column="4">
            <BSTable Color="OTRColor" id="Centro">
                <BSTHead>
                    <BSTR>
                        <BSTD>Estado</BSTD>
                        <BSTD>Nº Movil</BSTD>
                    </BSTR>
                </BSTHead>
                <BSTBody>
                    <BSTR>
                        <BSTD>@movilView.Estado</BSTD>
                        <BSTD>@movilView.NumeroMovil</BSTD>
                    </BSTR>
                </BSTBody>
            </BSTable>
        </BSCol>
        <BSCol Column="4"></BSCol>
    </BSRow>
    <BSContainer id="blanco">
    </BSContainer>
    <BSContainer id="inferior">
        <BSRow Align="Align.Center">
            <BSCol Column="1">
            </BSCol>
            <BSCol Column="10">
                <BSTable Color="OTRColor" id="tipo">
                    <BSTHead>
                        <BSTR>
                            <BSTD>Tipo</BSTD>
                            <BSTD>Encargado</BSTD>
                            <BSTD>Marca</BSTD>
                            <BSTD>Modelo</BSTD>
                            <BSTD>Patente</BSTD>
                        </BSTR>
                    </BSTHead>
                    <BSTBody>
                        <BSTR>
                            <BSTD>@movilView.Tipo</BSTD>
                            <BSTD>@movilView.EncargadoNombre</BSTD>
                            <BSTD>@movilView.Marca</BSTD>
                            <BSTD>@movilView.Modelo</BSTD>
                            <BSTD>@movilView.Patente</BSTD>
                        </BSTR>
                    </BSTBody>
                </BSTable>
            </BSCol>
            <BSCol Column="1">
            </BSCol>
        </BSRow>
    </BSContainer>
    <BSContainer id="blanco">
    </BSContainer>
    <BSContainer id="blanco">
    </BSContainer>
    <h2>Firmar:</h2>
    <BSContainer id="blanco">
    </BSContainer>
    <label id="texto">Modelo:</label>
    <br>
    <input id="estilo" type="text" @bind="movilView.Modelo" />

}
else if (!existe)
{
    <h5>No existe este movil</h5>
}
@code {
    private BSColor OTableColor { get; set; } = BSColor.Default;
    private BSColor OTRColor { get; set; } = BSColor.Default;

    [Parameter]
    public int? VehiculoId { get; set; }
    [Parameter]
    public int? BomberoId { get; set; }

    public class MovilViewModel
    {
        public int EncargadoId { get; set; }
        [Required, StringLength(255)]
        public string EncargadoNombre { get; set; }
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int? Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)]
        public string NumeroMovil { get; set; }
        [Required, StringLength(255)]
        public string NumeroMotor { get; set; }
        [Required, StringLength(255)]
        public string NumeroChasis { get; set; }
        public TipoEstadoMovil Estado { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }
    public ImagenViewModel imagenView { get; set; } = new();
    public MovilViewModel movilView { get; set; } = new();
    public bool existe = false;


    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        Movil? movil = await db.Moviles.Include(m => m.Bomberos).ThenInclude(b => b.Bombero).Where(m => m.VehiculoId == VehiculoId).SingleOrDefaultAsync();

        if (movil is not null)
        {
            movilView.Marca = movil.Marca;
            movilView.Modelo = movil.Modelo;
            movilView.Año = movil.Año;
            movilView.Patente = movil.Patente;
            movilView.Tipo = movil.Tipo;
            movilView.NumeroMovil = movil.NumeroMovil;
            movilView.NumeroMotor = movil.NumeroMotor;
            movilView.NumeroChasis = movil.NumeroChasis;
            movilView.Estado = movil.Estado;
            foreach (MovilBombero b in movil.Bomberos)
            {
                if (b.Rol == TipoRol.Encargado)
                {
                    movilView.EncargadoId = b.Bombero.PersonaId;
                    movilView.EncargadoNombre = $"{b.Bombero.Nombre} {b.Bombero.Apellido}";
                }
            }
            ImagenMovil? imagen = await db.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
                imagenView.Base64 = imagen.Base64Imagen;
            }
            existe = true;
        }
        else if (movil is null)
        {
            existe = false;
        }
    }

    public async void EliminarMovil()
    {
        using var db = DbFactory.CreateDbContext();

        Movil? movil = await db.Moviles.Where(m => m.NumeroMovil == movilView.NumeroMovil).SingleOrDefaultAsync();

        if (movil is not null)
            db.Remove(movil);
        await db.SaveChangesAsync();

        navigationManager.NavigateTo("/moviles");
    }
}
