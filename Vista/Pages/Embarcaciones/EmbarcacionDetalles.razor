@inject IDbContextFactory<BomberosDbContext> DbFactory

<style>
    #ImagenMovil {
        border: 1px solid #f0f5f5;
        border-radius: 2px;
        height: 25em;
        max-height: 25em;
        min-height: 25em;
        width: 100%;
        max-width: 100%;
        min-width: 100%;
    }

    .ant-table-pagination.ant-pagination {
        display: none !important;
    }
</style>
@if (existe)
{
    <div>
        <img id="ImagenMovil" src="data:@imagenView.TipoImagen;base64,@imagenView.Base64" />
    </div>
    <br>
    <div>
        <Table TItem="Data" DataSource="data" Responsive>
                <PropertyColumn Property="c=>c.Tipo"> @embarcacionView.Tipo </PropertyColumn>
                <PropertyColumn Property="c=>c.Encargado">@embarcacionView.EncargadoNombre</PropertyColumn>
                <PropertyColumn Property="c=>c.Marca"> @embarcacionView.Marca </PropertyColumn>
                <PropertyColumn Property="c=>c.Modelo">@embarcacionView.Modelo</PropertyColumn>
                <PropertyColumn Property="c=>c.Patente">@embarcacionView.Patente</PropertyColumn>
        </Table>
    </div>
}
else if (!existe)
{
    <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
        <Spin Delay="500" Indicator=antIcon />
    </div>
    //Hay que ver si se puede cambiar el contenido despues del delay
    @code {
        RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
    }
}

@code {
    Data[] data = new Data[]
    {
        new()
        {
            Key = "1",
            Tipo = "John Brown",
            Encargado = 32,
            Marca = "New York No. 1 Lake Park",
            Modelo = "developer",
            Patente = ""
        }
    };

    public record Data
    {
        public string Key { get; set; }

        public string Tipo { get; set; }

        public int Encargado { get; set; }

        public string Marca { get; set; }

        public string Modelo { get; set; }

        public string Patente { get; set; }
    }
}
@code {
    string title = "Embarcación info";
    bool _visible = true;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
}
@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    public class EmbarcacionViewModel
    {
        public string EncargadoId { get; set; }
        [Required, StringLength(255)]
        public string EncargadoNombre { get; set; }
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int? Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        public TipoEstadoMovil Estado { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }

    public ImagenViewModel imagenView { get; set; } = new();
    public EmbarcacionViewModel embarcacionView { get; set; } = new();
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        Embarcacion? embarcacion = await db.Embarcacion.Include(e => e.Encargado).Include(i => i.ImagenEmbarcacion).SingleOrDefaultAsync(e => e.VehiculoId == VehiculoId);

        if (embarcacion is not null)
        {
            embarcacionView.Marca = embarcacion.Marca;
            embarcacionView.Modelo = embarcacion.Modelo;
            embarcacionView.Año = embarcacion.Año;
            embarcacionView.Patente = embarcacion.Patente;
            embarcacionView.Tipo = embarcacion.Tipo;
            embarcacionView.Estado = embarcacion.Estado;
            embarcacionView.EncargadoNombre = embarcacion.Encargado.Nombre + " " + embarcacion.Encargado.Apellido;
     
            ImagenEmbarcacion? imagen = await db.Set<ImagenEmbarcacion>().Where(i => i.ImagenId == embarcacion.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
                imagenView.Base64 = imagen.Base64Imagen;
            }
            existe = true;
        }
        else if (embarcacion is null)
        {
            existe = false;
        }
    }
}
