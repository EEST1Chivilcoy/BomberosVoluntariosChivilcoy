@using Vista.Services
@inject IEmbarcacionService EmbarcacionService
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

<style>
    .steps-content {
        border: none !important;
    }

    .inpt-container {
        position: relative;
        padding: .8em 0;
    }

    input[type=text], input[type=number] {
        border: none;
        background: none;
        border-bottom: 1px solid #bdb8b8;
        outline: none;
        padding: 1em;
        width: 100%;
        height: .6em;
    }

    .inpt-label {
        position: absolute;
        top: 0;
        left: 5px;
        transform: translateY(10px);
        color: #bdb8b8;
        transition: transform .5s, color .3s;
    }

    input[type=text]:focus, input[type=number]:focus, input[type=file]:focus, input[type=date]:focus {
        border-bottom: 1px solid rgb(62, 24, 24);
        transition: 1s;
    }

        input[type = text]:focus + .inpt-label, input[type = text]:not(:placeholder-shown) + .inpt-label {
            transform: translateY(-4px) scale(.9);
            transform-origin: left top;
            color: rgb(62, 24, 24);
        }

    .select-estadoMovil {
        padding: .8em 0;
        width: 100%;
        border: 1px solid #bdb8b8;
        outline: none;
        box-shadow: none;
    }

        .select-estadoMovil option {
            border: 1px solid #bdb8b8;
        }

    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .lblInputFile {
        border: 1px solid #403F3F;
        color: #403F3F;
        padding: .5em .8em;
        border-radius: 50px;
        background: #eee;
        cursor: pointer;
        font-family: unset;
        font-size: 14px;
        width: 60%;
        transform: translate(50% -50%);
        text-align: center;
    }

    .raro {
        padding: 6em 0;
    }


    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

</style>
@if (embarcacionView is not null)
{
    <div style="width: 100%;">
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <div class="steps-content" style="width: 100%;padding-top: 0;">
            <div style="width: 100%;height: 100%; background: #fff;">
                @if (current == 0)
                {
                    <div style="height: 22em;width: 100%;padding: 10px;">
                        <div class="inpt-container">
                            <input type="text" @bind="embarcacionView.Marca" placeholder=" " />
                            <label class="inpt-label">Marca:</label>
                        </div>
                        <div class="inpt-container">
                            <input type="text" @bind="embarcacionView.Modelo" placeholder=" " />
                            <label class="inpt-label">Modelo:</label>
                        </div>
                        <div class="inpt-container">
                            <input type="text" @bind="embarcacionView.Año" placeholder=" " />
                            <label class="inpt-label">Año:</label>
                        </div>
                        <div class="inpt-container">
                            <input type="text" @bind="embarcacionView.Patente" placeholder=" " />
                            <label class="inpt-label">Patente:</label>
                        </div>
                        <div class="inpt-container">
                            <label class="lblInputFile" for="fotoMovil"><Icon Type="cloud-upload" Theme="outline" Style="height: 14px;width: 14px;" />Cargar foto de la embarcación</label>
                            <InputFile OnChange="SubirFoto" id="fotoMovil" style="display: none;" />
                            <h3 id="path" style="display: inline-block;font-size:12px;">@imagenView.Nombre</h3>
                        </div>
                    </div>
                }
                @if (current == 1)
                {
                    <div style="height: 22em;width: 100%;padding: 10px;">
                        <div class="inpt-container">
                            <input type="text" @bind="embarcacionView.Tipo" placeholder=" " />
                            <label class="inpt-label">Tipo:</label>
                        </div>
                        <div class="inpt-container">
                            <input type="text" @bind="embarcacionView.NumeroMovil" placeholder=" " />
                            <label class="inpt-label">Nº Embarcación</label>
                        </div>

                        <div class="inpt-container">
                            <select @bind="embarcacionView.Estado" class="select-estadoMovil">
                                <option value="@TipoEstadoMovil.Estado" selected disabled hidden>Seleccione estado de la embarcación</option>
                                <option value="@TipoEstadoMovil.Activo">Activo</option>
                                <option value="@TipoEstadoMovil.Inactivo">Inactivo</option>
                                <option value="@TipoEstadoMovil.Reparacion">Reparacion</option>
                                <option value="@TipoEstadoMovil.Limpieza">Limpieza</option>
                            </select>
                        </div>
                        <div class="inpt-container">
                            <Select TItem="BomberoViweModel"
                                    TItemValue="int"
                                    DataSource="@BomberoTodos"
                                    @bind-Value="@BomberoEncargado"
                                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                    Placeholder="Seleccione Bombero Encargado"
                                    DefaultActiveFirstOption="false"
                                    EnableSearch>
                            </Select>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <Button Class="boton_p" @onclick="SubirEmbarcacion">
                    Agregar embarcacion
                </Button>
            }
        </div>
        <style>
            .steps-content {
                margin-top: 16px;
                border: 1px dashed #e9e9e9;
                border-radius: 6px;
                background-color: #fafafa;
                min-height: 200px;
                text-align: center;
                padding-top: 80px;
            }

            .steps-action {
                margin-top: 24px;
            }
        </style>
    </div>
}

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    public int BomberoEncargado { get; set; }
    BomberosDbContext Context { get; set; }

    public class EmbarcacionViewModel
    {
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int? Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        public string NumeroMovil { get; set; }
        [Required, StringLength(255)]
        public TipoEstadoMovil Estado { get; set; }
    }

    public class SeguroViewModel
    {
        [Required, StringLength(255)]
        public string CompañiaAseguradora { get; set; }
        [Required, StringLength(255)]
        public string NumeroDePoliza { get; set; }
        public DateTime FechaDeVencimiento { get; set; }
    }

    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }

    public ImagenViewModel imagenView { get; set; } = new();
    public EmbarcacionViewModel embarcacionView { get; set; } = new();
    public SeguroViewModel seguroView { get; set; } = new();
    public Bombero[]? bomberos;
    Bombero[] TodosBomberos;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        BomberoEncargado = -1;

        Context = DbFactory.CreateDbContext();

        bomberos = await Context.Bomberos.ToArrayAsync();

        CargarBomberosView();
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenView.Base64 = imagenBase64;
        imagenView.TipoImagen = e.File.ContentType;
        imagenView.Nombre = e.File.Name;

        await message.Success("Imagen cargada");
        StateHasChanged();
    }

    private async void SubirEmbarcacion()
    {
        try
        {
            if (embarcacionView is not null)
            {
                VehiculoSalida? comprobante = await Context.Set<VehiculoSalida>().Where(e => e.NumeroMovil == embarcacionView.NumeroMovil).SingleOrDefaultAsync();
                Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();
                //Validaciones
                if (string.IsNullOrEmpty(imagenView.Base64))
                {
                    await message.Error("Se debe ingresar una foto de la embarcación");
                    return;
                }
                if (comprobante is null)
                {
                    Embarcacion embarcacion = new Embarcacion()
                        {
                            Marca = embarcacionView.Marca,
                            Modelo = embarcacionView.Modelo,
                            Año = embarcacionView.Año,
                            Patente = embarcacionView.Patente,
                            Tipo = embarcacionView.Tipo,
                            ImagenEmbarcacion = new()
                            {
                                NombreImagen = imagenView.Nombre,
                                TipoImagen = imagenView.TipoImagen,
                                Base64Imagen = imagenView.Base64
                            },
                            Encargado = bomberoEncargado,
                            NumeroMovil = embarcacionView.NumeroMovil,
                            Estado = embarcacionView.Estado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = seguroView.CompañiaAseguradora,
                                FechaDeVencimineto = seguroView.FechaDeVencimiento,
                                NumeroDePoliza = seguroView.NumeroDePoliza
                            }
                        };
                    await EmbarcacionService.AgregarEmbarcacion(embarcacion);
                    await Init();
                    await message.Success("Se agrego la embarcación");
                    await OnClose.InvokeAsync();
                }
                else
                {
                    await message.Error("Existe un vehiculo con el mismo Nº Embarcación");
                }
            }
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error("Información de la embarcacion ausente u ocurrio un error inesperado");
            //await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(("Error inesperado: " + e.Message), 5);

        }
        StateHasChanged();
    }

    List<BomberoViweModel> BomberoTodos = new List<BomberoViweModel>();
    public void CargarBomberosView()
    {
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    Dotacion = b.Dotacion,
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                };
            BomberoTodos.Add(bombero);
        }
    }

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public int current { get; set; } = 0;

    public StepItem[] steps =
    {
        new StepItem {Title = "First", Content = "First-content"},
        new StepItem {Title = "Last", Content = "Last-content"}
    };

    void OnPreClick()
    {
        current--;
    }

    void OnNextClick()
    {
        current++;
    }
}