@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@page "/Moviles/Embarcaciones-baja"

<style>
    .cartaPropia:hover {
        box-shadow: 2px 2px 3px #D8D8D8;
    }

    .botonCarta {
        width: 33.3%;
        outline: none;
        box-shadow: none;
        border-bottom-color: #fff !important;
    }

    .grid {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 12px;
        height: 100%;
        width: 100vh;
        margin: 1em 1em;
    }
</style>

<div style="display: flex;justify-content: space-between;margin: 1em 1em;width: 100vh;padding: 0; align-items: center;">
    <div style="position: relative;">
        <p style="font-family:'Agency FB';width: 15em;position: absolute; transform: translate(0%, -50%);font-size: 1.5em;">
            <b>ALTA / BAJA / MODIFICACION DE EMBARCACION</b>
        </p>
    </div>
    <div>
        <a @onclick="@(() => { navigationManager.NavigateTo($"/Embarcaciones"); })">
            <Button Type="@ButtonType.Primary" Style="background: rgb(62, 24, 24);color: #fff;border: none;">EMBARCACIONES ACTIVAS</Button>
        </a>
    </div>
</div>
<hr style="background:#fff; margin: 1em 1em;width: 100vh;" />
<div class="grid">
    @if (embarcaciones_de_baja is not null)
    {
        @foreach (Embarcacion e in embarcaciones_de_baja)
        {
            if (e.Estado != TipoEstadoMovil.Inactivo) continue;
            <card class="cartaPropia" style="display: flex; flex-direction: column;height: 280px; width: 180px;border-radius: 2px;border: 1px solid #BABABA;">
                <div style="width: 100%;height: 75%;margin: 0; padding: 0;">
                    <img src="@CargarImage(e)" style="width: 100%;height:100%;object-fit: cover;overflow: hidden;">
                </div>
                <div style="width: 100%;height:25%;">
                    <div style="height: 50%">
                        <p style="height: 100%;background: #fff;font-size: 14px;display:flex;justify-content: center;align-items: center;font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';">Embarcacion nº @e.NumeroMovil</p>
                    </div>
                    <div style="display: flex; flex-direction: row;height: 50%;">
                        <Button class="botonCarta" Style="border-radius: 0;border-top:1px solid #BABABA;height: 100%;border-left-color: #fff;" OnClick="@(() => { navigationManager.NavigateTo($"/moviles/movil/{e.VehiculoId}"); })">
                            <Icon Type="ellipsis" Theme="outline" />
                        </Button>
                        <Button class="botonCarta" Style="border-radius: 0;border-top:1px solid #BABABA;border-left:1px solid #BABABA;border-right:1px solid #BABABA;height: 100%;" OnClick="@(() => { navigationManager.NavigateTo($"/moviles/editar/{e.VehiculoId}"); })">
                            <Icon Type="edit" Theme="outline" />
                        </Button>
                        <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro de dar de alta a este movil?"
                                    OnConfirm="()=>CambiarEstado(e.VehiculoId,TipoEstadoMovil.Activo)"
                                    OnCancel="Cancel">
                            <Button class="botonCarta" Style="width: 100%!important;border-radius: 0;border-top: 1px solid #BABABA;height: 100%;border-right-color: #fff;">
                                <Icon Type="up" Theme="outline" />
                            </Button>
                        </Popconfirm>
                    </div>
                </div>
            </card>
        }
    }
    else
    {
        <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
            <Spin Delay="500" Indicator=antIcon />
        </div>
        //Hay que ver si se puede cambiar el contenido despues del delay
        @code {
        RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
    }
    }
</div>

@code {    
    public Embarcacion[]? embarcaciones_de_baja;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        embarcaciones_de_baja = await db.Embarcacion.Where(m => m.Estado == TipoEstadoMovil.Inactivo).ToArrayAsync();
    }


    public string CargarImage(Embarcacion embarcaciones)
    {
        using var db = DbFactory.CreateDbContext();

        string src = "/";

        ImagenMovil? imagen = db.ImagenesMoviles.Where(i => i.ImagenId == embarcaciones.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }

        return src;
    }
    public async void CambiarEstado(int id, TipoEstadoMovil estado)
    {
        using var context = DbFactory.CreateDbContext();
        Embarcacion? movil_a_modificar = await context.Embarcacion.Where(e => e.VehiculoId == id).SingleOrDefaultAsync();
        if (movil_a_modificar is not null)
        {
            movil_a_modificar.Estado = estado;
        }
        embarcaciones_de_baja = await context.Embarcacion.Where(m => m.Estado == TipoEstadoMovil.Inactivo).ToArrayAsync();
        await context.SaveChangesAsync();
        StateHasChanged();
    }
    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }
}
