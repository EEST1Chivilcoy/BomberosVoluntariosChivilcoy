@implements IDisposable
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

<style>
    .inpt-container {
        position: relative;
        padding: .8em 0;
    }

    input[type=text], input[type=number] {
        border: none;
        background: none;
        border-bottom: 1px solid #bdb8b8;
        outline: none;
        padding: 1em;
        width: 100%;
        height: .6em;
    }

    .inpt-label {
        position: absolute;
        top: 0;
        left: 5px;
        transform: translateY(10px);
        color: #bdb8b8;
        transition: transform .5s, color .3s;
    }

    input[type=text]:focus, input[type=number]:focus, input[type=file]:focus, input[type=date]:focus {
        border-bottom: 1px solid rgb(62, 24, 24);
        transition: 1s;
    }

        input[type = text]:focus + .inpt-label, input[type = text]:not(:placeholder-shown) + .inpt-label {
            transform: translateY(-4px) scale(.9);
            transform-origin: left top;
            color: rgb(62, 24, 24);
        }

    .lblInputFile {
        border: 1px solid #403F3F;
        color: #403F3F;
        padding: .5em .8em;
        border-radius: 50px;
        background: #eee;
        cursor: pointer;
        font-family: unset;
        font-size: 14px;
        width: 60%;
        transform: translate(50% -50%);
        text-align: center;
    }

    .select-estadoMovil {
        padding: .8em 0;
        width: 100%;
        border: 1px solid #bdb8b8;
        outline: none;
        box-shadow: none;
    }

        .select-estadoMovil option {
            border: 1px solid #bdb8b8;
        }

    .raro {
        padding: 6em 0;
    }

    .ant-modal-body {
        width: 100%;
        height: 100%;
        padding: 0;
    }

    .ant-modal-content {
        width: 100%;
        height: 100%;
    }

    .ant-modal-footer {
        display: none;
    }
</style>
<div style="width: 100%;padding: 1em;">
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>
    <div class="steps-content" style="height: 100%;width: 100%;padding-top: 0;border: none;">
        <div style="width: 100%;height: 100%; background: #fff;">
            @if (current == 0)
            {
                <div style="height: 22em;width: 100%;padding: 10px;">
                    <div class="inpt-container">
                        <input type="text" @bind="embarcacionView.Marca" placeholder=" " />
                        <label class="inpt-label">Marca:</label>
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="embarcacionView.Modelo" placeholder=" " />
                        <label class="inpt-label">Modelo:</label>
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="embarcacionView.Año" placeholder=" " />
                        <label class="inpt-label">Año:</label>
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="embarcacionView.Patente" placeholder=" " />
                        <label class="inpt-label">Patente:</label>
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="embarcacionView.Tipo" placeholder=" " />
                        <label class="inpt-label">Tipo:</label>
                    </div>
                    <div class="inpt-container">
                        <label class="lblInputFile" for="fotoMovil"><Icon Type="cloud-upload" Theme="outline" Style="height: 14px;width: 14px;" />Cargar foto de embarcación</label>
                        <InputFile OnChange="SubirFoto" id="fotoMovil" style="display: none;" />
                        <h3 id="path" style="display: inline-block;font-size:12px;">@imagenView.Nombre @*<Icon Type="eye" Theme="outline" />*@</h3>
                    </div>
                </div>
            }
            else if (current == 1)
            {
                <div style="height: 22em;width: 100%;padding: 10px;">
                    <div class="inpt-container">
                        <input type="text" @bind="embarcacionView.NumeroMovil" placeholder=" " />
                        <label class="inpt-label">Nº embarcación:</label>
                    </div>
                    <div class="inpt-container">
                        <select @bind="embarcacionView.Estado" class="select-estadoMovil">
                            <option value="@TipoEstadoMovil.Estado" selected disabled hidden>Seleccione estado de la embarcación</option>
                            <option value="@TipoEstadoMovil.Activo">Activo</option>
                            <option value="@TipoEstadoMovil.Inactivo">Inactivo</option>
                            <option value="@TipoEstadoMovil.Reparacion">Reparacion</option>
                            <option value="@TipoEstadoMovil.Limpieza">Limpieza</option>
                        </select>
                    </div>
                    <div class="inpt-container">
                        <Select TItem="BomberoViweModel"
                                TItemValue="int"
                                DataSource="@BomberoTodos"
                                @bind-Value="@BomberoEncargado"
                                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                Placeholder="Seleccione Bombero Encargado"
                                DefaultActiveFirstOption="false"
                                EnableSearch>
                        </Select>
                    </div>
                </div>      
            }
        </div>
    </div>
    <div class="steps-action">
        @if (current > 0)
        {
            <Button Type="primary" OnClick="OnPreClick">Anterior</Button>
        }
        @if (current < steps.Length - 1)
        {
            <Button Type="primary" OnClick="OnNextClick">Siguiente</Button>
        }
        @if (current == steps.Length - 1)
        {
            <Button Type="primary" @onclick="EditarEmbarcacion">
                Editar embarcacion
            </Button>
        }
    </div>
</div>

<style>
    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
    }
</style>

@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback RenderVista { get; set; }

    int EncargadoId { get; set; }

    public class EmbarcacionViewModel
    {
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int? Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)]
        public string NumeroMovil { get; set; }
        public TipoEstadoMovil Estado { get; set; }
        public Bombero? Encargado { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }
    public class BomberoViewModel
    {
        public TipoRol Rol { get; set; }
        public int PersonaId { get; set; }
    }

    BomberosDbContext Context { get; set; }

    public ImagenViewModel imagenView { get; set; } = new();
    public EmbarcacionViewModel embarcacionView { get; set; } = new();
    public List<BomberoViewModel> bomberoViews { get; set; } = new();
    public Bombero[]? bomberos;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        embarcacionView = new();
        imagenView = new();
        Context = DbFactory.CreateDbContext();
        bomberos = await Context.Bomberos.ToArrayAsync();

        CargarBomberosView();

        await CargarEmbarcacion();
    }

    private async Task CargarEmbarcacion()
    {
        Embarcacion? embarcacion = await Context.Embarcacion.Where(e => e.VehiculoId == VehiculoId).SingleOrDefaultAsync();

        if (embarcacion is not null)
        {
            embarcacionView.Marca = embarcacion.Marca;
            embarcacionView.Modelo = embarcacion.Modelo;
            embarcacionView.Año = embarcacion.Año;
            embarcacionView.Patente = embarcacion.Patente;
            embarcacionView.Tipo = embarcacion.Tipo;
            embarcacionView.Estado = embarcacion.Estado;
            embarcacionView.NumeroMovil = embarcacion.NumeroMovil;
            ImagenEmbarcacion? imagen = await Context.Set<ImagenEmbarcacion>().Where(i => i.ImagenId == embarcacion.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
                imagenView.Base64 = imagen.Base64Imagen;
            }
            existe = true;
            StateHasChanged();
        }
        else if (embarcacion is null)
        {
            existe = false;
        }
    }
    int BomberoEncargado;
    public async void EditarEmbarcacion()
    {
        Embarcacion? embarcacion = await Context.Embarcacion.Where(e => e.VehiculoId == VehiculoId).SingleOrDefaultAsync();
        Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();

        if (embarcacion is not null)
        {
            embarcacion.Marca = embarcacionView.Marca;
            embarcacion.Modelo = embarcacionView.Modelo;
            embarcacion.Año = embarcacionView.Año;
            embarcacion.Patente = embarcacionView.Patente;
            embarcacion.Tipo = embarcacionView.Tipo;
            embarcacion.ImagenEmbarcacion = new()
                {
                    NombreImagen = imagenView.Nombre,
                    TipoImagen = imagenView.TipoImagen,
                    Base64Imagen = imagenView.Base64
                };
            embarcacion.NumeroMovil = embarcacionView.NumeroMovil;
            embarcacion.Estado = embarcacionView.Estado;
            embarcacion.Encargado = bomberoEncargado;

            await Context.SaveChangesAsync();
            await RenderVista.InvokeAsync();
            await OnClose.InvokeAsync();
            StateHasChanged();
        }
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenView.Base64 = imagenBase64;
        imagenView.TipoImagen = e.File.ContentType;
        imagenView.Nombre = e.File.Name;

        await message.Success("Imagen cargada");
        StateHasChanged();
    }

    List<BomberoViweModel> BomberoTodos = new List<BomberoViweModel>();
    public void CargarBomberosView()
    {

        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    Dotacion = b.Dotacion,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,

                };
            BomberoTodos.Add(bombero);
        }
    }

    //steps
    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public int current { get; set; } = 0;

    public StepItem[] steps =
    {
        new StepItem {Title = "First", Content = "First-content"},
        new StepItem {Title = "Last", Content = "Last-content"}
    };

    void OnPreClick()
    {
        current--;
    }

    void OnNextClick()
    {
        current++;
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}


