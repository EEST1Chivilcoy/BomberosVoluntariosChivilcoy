@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/embarcaciones/editar/{VehiculoId:int?}"

<style>
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .inpt-container {
        position: relative;
        padding: .8em 0;
    }

    input[type=text], input[type=number] {
        border: none;
        background: none;
        border-bottom: 1px solid #bdb8b8;
        outline: none;
        padding: 1em;
        width: 100%;
        height: .6em;
    }

    .inpt-label {
        position: absolute;
        top: 0;
        left: 5px;
        transform: translateY(10px);
        color: #bdb8b8;
        transition: transform .5s, color .3s;
    }

    input[type=text]:focus, input[type=number]:focus, input[type=file]:focus, input[type=date]:focus {
        border-bottom: 1px solid rgb(62, 24, 24);
        transition: 1s;
    }

        input[type = text]:focus + .inpt-label, input[type = text]:not(:placeholder-shown) + .inpt-label {
            transform: translateY(-4px) scale(.9);
            transform-origin: left top;
            color: rgb(62, 24, 24);
        }

    .lblInputFile {
        border: 1px solid #403F3F;
        color: #403F3F;
        padding: .5em .8em;
        border-radius: 50px;
        background: #eee;
        cursor: pointer;
        font-family: unset;
        font-size: 14px;
        width: 60%;
        transform: translate(50% -50%);
        text-align: center;
    }

    .select-estadoMovil {
        padding: .8em 0;
        width: 100%;
        border: 1px solid #bdb8b8;
        outline: none;
        box-shadow: none;
    }

        .select-estadoMovil option {
            border: 1px solid #bdb8b8;
        }

    .raro {
        padding: 6em 0;
    }

    .ant-modal-body {
        padding: 0;
    }

    .ant-modal-body {
        width: 33em;
    }

    .ant-modal-content {
        width: 33em;
    }

    .ant-modal-footer {
        display: none;
    }
</style>
<div style="width: 40%;">
    @if (embarcacionView is not null)
    {
        <Modal Title="@title"
               Visible="@_visible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            <div style="width: 100%;">
                <Steps Current="current">
                    @foreach (var item in steps)
                    {
                        <Step Title="@item.Title" Subtitle="@item.Content" />
                    }
                </Steps>
                <div class="steps-content" style="height: 100%;width: 100%;padding-top: 0;border: none;">
                    <div style="width: 100%;height: 100%; background: #fff;">
                        <Carousel @ref="_carousel">
                            <CarouselSlick Style="padding: .2em;overflow: hidden;text-align: center; line-height: 160px;z-index: 10;display: flex; flex-direction: column;margin: auto;">
                                <div class="inpt-container">
                                    <input type="text" @bind="embarcacionView.Marca" placeholder=" " />
                                    <label class="inpt-label">Marca:</label>
                                </div>
                                <div class="inpt-container">
                                    <input type="text" @bind="embarcacionView.Modelo" placeholder=" " />
                                    <label class="inpt-label">Modelo:</label>
                                </div>
                                <div class="inpt-container">
                                    <input type="text" @bind="embarcacionView.Año" placeholder=" " />
                                    <label class="inpt-label">Año:</label>
                                </div>
                                <div class="inpt-container">
                                    <input type="text" @bind="embarcacionView.Patente" placeholder=" " />
                                    <label class="inpt-label">Patente:</label>
                                </div>
                                <div class="inpt-container">
                                    <input type="text" @bind="embarcacionView.Tipo" placeholder=" " />
                                    <label class="inpt-label">Tipo:</label>
                                </div>
                                <div class="inpt-container">
                                    <label class="lblInputFile" for="fotoMovil"><Icon Type="cloud-upload" Theme="outline" Style="height: 14px;width: 14px;" />Cargar foto de embarcación</label>
                                    <InputFile OnChange="SubirFoto" id="fotoMovil" style="display: none;" />
                                    <h3 id="path" style="display: inline-block;font-size:12px;">@imagenView.Nombre @*<Icon Type="eye" Theme="outline" />*@</h3>
                                </div>
                            </CarouselSlick>
                            <CarouselSlick Style="padding: .2em;overflow: hidden;text-align: center; line-height: 160px;z-index: 10;">
                                <div class="inpt-container">
                                    <input type="text" @bind="embarcacionView.NumeroMovil" placeholder=" " />
                                    <label class="inpt-label">Nº embarcación:</label>
                                </div>
                                <div class="inpt-container">
                                    <select @bind="embarcacionView.Estado" class="select-estadoMovil">
                                        <option value="@TipoEstadoMovil.Estado" selected disabled hidden>Seleccione estado de la embarcación</option>
                                        <option value="@TipoEstadoMovil.Activo">Activo</option>
                                        <option value="@TipoEstadoMovil.Inactivo">Inactivo</option>
                                        <option value="@TipoEstadoMovil.Reparacion">Reparacion</option>
                                        <option value="@TipoEstadoMovil.Limpieza">Limpieza</option>
                                    </select>
                                </div>
                            </CarouselSlick>
                            <CarouselSlick Style="padding: .2em;overflow: hidden;text-align: center; line-height: 160px;z-index: 10;">
                                @if (bomberos is not null)
                                {
                                    @*@foreach (BomberoViewModel b in bomberoViews)
                                    {
                                        <div class="inpt-container">
                                            <select class="select-estadoMovil" @bind="b.PersonaId">
                                                <option hidden selected value="0">Seleccione bombero @b.Rol.ToString()</option>
                                                @foreach (Bombero bo in bomberos)
                                                {
                                                    <option value="@bo.PersonaId">@bo.Apellido  @bo.Nombre</option>
                                                }
                                            </select>
                                        </div>
                                    }
                                    <div style="display: flex;justify-content: flex-end;">
                                        <Button @onclick="@(() => { TipoRol tipo = TipoRol.Subalterno; AgregarALista(tipo); })" Style="background: rgb(62, 24, 24);color: #fff;border: none; width: 40%;text-align: center,">Confirmar roles</Button>
                                    </div>*@
                                }
                            </CarouselSlick>
                        </Carousel>
                    </div>
                </div>
                <div class="steps-action">
                    @if (current > 0)
                    {
                        <Button Type="primary" OnClick="OnPreClick">Anterior</Button>
                    }
                    @if (current < steps.Length - 1)
                    {
                        <Button Type="primary" OnClick="OnNextClick">Siguiente</Button>
                    }
                    @if (current == steps.Length - 1)
                    {
                        <Button Type="primary" @onclick="EditarEmbarcacion">
                            Editar embarcacion
                        </Button>
                    }
                </div>
            </div>

            <style>
                .steps-content {
                    margin-top: 16px;
                    border: 1px dashed #e9e9e9;
                    border-radius: 6px;
                    background-color: #fafafa;
                    min-height: 200px;
                    text-align: center;
                    padding-top: 80px;
                }

                .steps-action {
                    margin-top: 24px;
                }
            </style>
        </Modal>
    }
    else
    {
        <h1> Error 404</h1>
    }
</div>

@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    public class EmbarcacionViewModel
    {
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int? Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)]
        public string NumeroMovil { get; set; }
        public TipoEstadoMovil Estado { get; set; }
        public Bombero Encargado { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }
    public class BomberoViewModel
    {
        public TipoRol Rol { get; set; }
        public int PersonaId { get; set; }
    }

    public ImagenViewModel imagenView { get; set; } = new();
    public EmbarcacionViewModel embarcacionView { get; set; } = new();
    public List<BomberoViewModel> bomberoViews { get; set; } = new();
    public Bombero[]? bomberos;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        bomberos = await db.Bomberos.ToArrayAsync();

        Embarcacion? embarcacion = await db.Embarcacion.Where(e => e.VehiculoId == VehiculoId).SingleOrDefaultAsync();

        if (embarcacion is not null)
        {
            embarcacionView.Marca = embarcacion.Marca;
            embarcacionView.Modelo = embarcacion.Modelo;
            embarcacionView.Año = embarcacion.Año;
            embarcacionView.Patente = embarcacion.Patente;
            embarcacionView.Tipo = embarcacion.Tipo;
            embarcacionView.Estado = embarcacion.Estado;
            ImagenMovil? imagen = await db.ImagenesMoviles.Where(i => i.ImagenId == embarcacion.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
                imagenView.Base64 = imagen.Base64Imagen;
                StateHasChanged();
            }
            existe = true;
        }
        else if (embarcacion is null)
        {
            existe = false;
        }

        AgregarALista(TipoRol.Encargado);
        AgregarALista(TipoRol.Subalterno);
    }

    public void AgregarALista(TipoRol tipo)
    {
        BomberoViewModel b = new()
            {
                Rol = tipo
            };

        bomberoViews.Add(b);
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenView.Base64 = imagenBase64;
        imagenView.TipoImagen = e.File.ContentType;
        imagenView.Nombre = e.File.Name;
    }

    public async void EditarEmbarcacion()
    {
        using var db = DbFactory.CreateDbContext();

       
        Embarcacion? embarcacion = await db.Embarcacion.Where(e => e.NumeroMovil == embarcacionView.NumeroMovil).SingleOrDefaultAsync();

            if (embarcacion is not null)
            {
                embarcacion.Marca = embarcacionView.Marca;
                embarcacion.Modelo = embarcacionView.Modelo;
                embarcacion.Año = embarcacionView.Año;
                embarcacion.Patente = embarcacionView.Patente;
                embarcacion.Tipo = embarcacionView.Tipo;
                embarcacion.ImagenEmbarcacion = new()
                    {
                      NombreImagen = imagenView.Nombre,
                      TipoImagen = imagenView.TipoImagen,
                      Base64Imagen = imagenView.Base64
                    };
                embarcacion.NumeroMovil = embarcacionView.NumeroMovil;
                embarcacion.Estado = embarcacionView.Estado;
                embarcacion.Encargado.Grado = embarcacionView.Encargado.Grado;
            //foreach (BomberoViewModel m in bomberoViews)
            //{
            //    if (m.PersonaId != 0)
            //    {
            //        MovilBombero bombero = new()
            //            {
            //                Rol = m.Rol,
            //                PersonaId = m.PersonaId
            //            };
            //        embarcacion.Bomberos.Add(bombero);
            //    }
            //}
            await db.SaveChangesAsync();
            }
        

        navigationManager.NavigateTo("/embarcaciones");
    }
    //modal
    string title = "Editar embarcacion";
    bool _visible = true;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    //steps
    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public int current { get; set; } = 0;

    public StepItem[] steps =
    {
        new StepItem {Title = "First", Content = "First-content"},
        new StepItem {Title = "Second", Content = "Second-content"},
        //new StepItem {Title = "Third", Content = "Third-content"},
        new StepItem {Title = "Last", Content = "Last-content"}
    };

    void OnPreClick()
    {
        current--;
        _carousel.Previous();
    }

    void OnNextClick()
    {
        current++;
        _carousel.Next();
    }

    //carousel
    Carousel _carousel;
}


