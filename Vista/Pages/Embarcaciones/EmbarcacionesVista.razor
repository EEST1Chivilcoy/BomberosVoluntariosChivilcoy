@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@page "/embarcaciones"

<style>
    /*card:hover {
            box-shadow: 2px 2px 3px #D8D8D8;
            height: 284px!important;
            width: 184px!important;
            position: sticky;
            transition: .3s ease;
    }*/

    .botonCarta {
        width: 33.3%;
        outline: none;
        box-shadow: none;
        border-bottom-color: #fff !important;
    }

    .grid {
        height: 100%;
        width: 1036px;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 12px;
        margin: 30px .5em;
    }
</style>
<div style="display: flex;flex-direction: column;justify-content:center;align-items:center;height: 100%;width:100%;">
    <div style="display: flex;justify-content: space-between;margin: 1em 1em;width: 1036px;padding: 0; align-items: center;">
        <div style="position: relative;">
            <p style="font-family:'Agency FB';width: 15em;position: absolute; transform: translate(0%, -50%);font-size: 1.5em;display: contents;">
                <b>ALTA / BAJA / MODIFICACION DE EMBARCACION</b>
            </p>
        </div>
        <div>
            <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/Embarcaciones-baja"); })">
                <Button Type="@ButtonType.Primary" Style="background: rgb(62, 24, 24);color: #fff;border: none;">Embarcaciones de baja</Button>
            </a>
            <a @onclick="AgregarEmbarcacionModal">
                <Button Type="@ButtonType.Primary" Style="background: rgb(62, 24, 24);color: #fff;border: none;">Agregar Embarcacion</Button>
            </a>
        </div>
    </div>
    <div class="grid">
        
        @if (embarcaciones is not null)
        {
            @foreach(Embarcacion e in embarcaciones)
            {
                if (e.Estado != TipoEstadoMovil.Activo) continue;
                <card class="cartaPropia" style="display: flex; flex-direction: column;height: 345px;width: 250px;border-radius: 3px;box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);">
                    <div style="width: 100%;height: 75%;margin: 0; padding: 0;">
                        <img src="@CargarImage(e)" style="width: 100%;height:100%;object-fit: cover;overflow: hidden;border-radius: 3px 3px 0 0;">
                    </div>
                    <div style="width: 100%;height:25%;">
                        <div style="height: 50%">
                            <p style="height: 100%;background: #fff;font-size: 14px;display:flex;justify-content: center;align-items: center;font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';">Embarcacion nº @e.NumeroMovil</p>
                        </div>
                        <div style="display: flex; flex-direction: row;height: 50%;background: transparent;">
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0 0 0 3px;border-right: 0;border-left: 0;border-top: 1px solid #d9d9d9;" OnClick="()=>DetallesEmbarcacionModal(e.VehiculoId)">
                                <Icon Type="ellipsis" Theme="outline" />
                            </Button>
                            <Button class="botonCarta" Style="height: 100%;border-radius: 0;border-right: 1px solid #d9d9d9;border-left: 1px solid #d9d9d9;border-top: 1px solid #d9d9d9;" OnClick="()=>EditarEmbarcacionModal(e.VehiculoId)">
                                <Icon Type="edit" Theme="outline" />
                            </Button>
                            <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro de dar de baja a este movil?"
                                        OnConfirm="()=>CambiarEstado(e.VehiculoId,TipoEstadoMovil.Inactivo)"
                                        OnCancel="Cancel">
                                <Button class="botonCarta" Style="width: 100%!important;height: 100%;border-radius: 0 0 3px 0;border-right: 0;border-left: 0;border-top: 1px solid #d9d9d9;">
                                    <Icon Type="down" Theme="outline" />
                                </Button>
                            </Popconfirm>
                        </div>
                    </div>
                </card>
            }

            @if (EditarVisible)
            {
                <Modal Footer="null" Title="Editar" OnCancel="@HandleCancel" Visible="true">
                    <EmbarcacionEditar VehiculoId="@EditarPorId" OnClose="@CerrarModal" />
                </Modal>
            }

            @if (DetallesVisible)
            {
                <Modal Footer="null" Title="Detalles" OnCancel="@HandleDCancel" Visible="true">
                    <EmbarcacionDetalles VehiculoId="@DetallesPorId" OnClose="@CerrarDModal" />
                </Modal>
            }
            @if (AgregarVisible)
            {
                <Modal Footer="null" Title="Agregar" OnCancel="@HandleACancel" Visible="true">
                    <EmbarcacionAgregar OnClose="@CerrarAModal" />
                </Modal>
            }
        }
        else
        {
            <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
                <Spin Delay="500" Indicator=antIcon />
            </div>
            //Hay que ver si se puede cambiar el contenido despues del delay
            @code {
                RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
            }
        }
    </div>
</div>

@code {
    public Embarcacion[]? embarcaciones;
    bool EditarVisible { get; set; }
    bool DetallesVisible { get; set; }
    bool AgregarVisible { get; set; }
    int EditarPorId { get; set; }
    int DetallesPorId { get; set; }
    BomberosDbContext Context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();

        embarcaciones = await Context.Embarcacion.ToArrayAsync();
    }

    public string CargarImage(Embarcacion embarcaciones)
    {
        using var db = DbFactory.CreateDbContext();

        string src = "/";

        ImagenEmbarcacion? imagen = db.Set<ImagenEmbarcacion>().Where(i => i.ImagenId == embarcaciones.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }

        return src;
    }

    public void EditarEmbarcacionModal(int id)
    {
        EditarPorId = id;
        EditarVisible = true;
        StateHasChanged();
    }

    public void DetallesEmbarcacionModal(int id)
    {
        DetallesPorId = id;
        DetallesVisible = true;
        StateHasChanged();
    }

    public void AgregarEmbarcacionModal()
    {
        AgregarVisible = true;
        StateHasChanged();
    }

    public async void CambiarEstado(int id, TipoEstadoMovil estado)
    {
        using var context = DbFactory.CreateDbContext();
        Embarcacion? movil_a_modificar = await context.Embarcacion.Where(m => m.VehiculoId == id).SingleOrDefaultAsync();
        if (movil_a_modificar is not null)
        {
            movil_a_modificar.Estado = estado;
        }
        embarcaciones = await context.Embarcacion.Where(m => m.Estado == TipoEstadoMovil.Inactivo).ToArrayAsync();
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }

    private void HandleCancel(MouseEventArgs e)
    {
        CerrarModal();
    }
    private void CerrarModal()
    {
        EditarVisible = false;
    }

    private void HandleDCancel(MouseEventArgs e)
    {
        CerrarDModal();
    }
    private void CerrarDModal()
    {
        DetallesVisible = false;
    }

    private void HandleACancel(MouseEventArgs e)
    {
        CerrarAModal();
    }
    private void CerrarAModal()
    {
        AgregarVisible = false;
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}


