@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/moviles"

<style>
    #cartas{
            border-radius: 15px;
    }
        #blancoA {
        width: 100%;
        padding: 10px;
    }
    #text-center{
        text-align:center;
    }
    #button-center{
        position:center;
    }
    #agregar-movil{
        position: absolute;
        bottom:100px;
    }
</style>

@if (moviles is not null)
{
    <BSContainer Container="Container.Medium">
        <div class="Titulo">
            <h3> Moviles </h3>
        </div>
        <BSContainer id="blancoA">

        </BSContainer>
    </BSContainer>
    <BSContainer id="Cartas">
        <BSRow Align="Align.Start">
            @foreach(Movil m in moviles)
            {
                <BSCol>
                    <BSContainer id="Cartas" Container="Container.Fluid">
                        <BSCard CardType="CardType.Card" style="width: 18rem;">
                            <BSCard CardType="CardType.Image" src="@CargarImage(m)" alt="Card image cap" />
                            <BSCard CardType="CardType.Body">
                                <BSCard id="text-center" CardType="CardType.Title">Movil @m.NumeroMovil</BSCard>
                                <div class="d-grid gap-2 col-7 mx-auto">
                                <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/movil/{m.VehiculoId}"); })">
                                    <BSButton id="button-center" Color="BSColor.Danger">Ver Información</BSButton>
                                </a>
                                </div>
                                <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/editar/{m.VehiculoId}"); })">
                                   <Button><Icon Type="edit" Theme="outline" />Editar Movil</Button>
                                </a>
                                
                                
                                <Button OnClick="()=> EliminarMovil(m.VehiculoId)"><Icon Type="delete" Theme="outline" />Borra Movil</Button>
                                
                                
                            </BSCard>

                        </BSCard>
                    </BSContainer>
                </BSCol>
                
            }
            
        </BSRow>
    </BSContainer>
}
else
{
    <h5>No hay moviles, carge uno porfavor</h5>
}
<Divider>
    <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/agregar"); })">
        <Button Type="@ButtonType.Primary">Agregar Movil</Button>
    </a>
</Divider>


@code {
    public Movil[]? moviles;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        moviles = await db.Moviles.ToArrayAsync();
    }

    public string CargarImage(Movil movil)
    {
        using var db = DbFactory.CreateDbContext();

        string src = "/";

        ImagenMovil? imagen = db.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }

        return src;
    }
    public async void EliminarMovil(int id)
    {

        using var context = DbFactory.CreateDbContext();
        Movil? MovilAeliminnar = await context.Moviles.Where(m => m.VehiculoId == id).SingleOrDefaultAsync();
        if (MovilAeliminnar is not null)
        {
            context.Remove(MovilAeliminnar);
        }
        await context.SaveChangesAsync();
        //NumeroMovil.NumeroMovil = string.Empty;
        moviles = await context.Moviles.ToArrayAsync();
        StateHasChanged();
    }
    
}


