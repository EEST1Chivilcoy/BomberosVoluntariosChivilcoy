@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/moviles"

<style>
    .cartaPropia:hover {
        box-shadow: 2px 2px 3px #D8D8D8;
    }

    .botonCarta {
        width: 100%;
        outline: none;
        box-shadow: none;
        border-bottom-color: #fff !important;
    }
    .grid{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 12px;
        height: 100%;
        width: 100vh;
        margin: 1em 1em;
    }
</style>
<div style="display: flex;justify-content: space-between;margin: 1em 1em;width: 100vh;padding: 0; align-items: center;">
    <div style="position: relative;">
        <p style="font-family:'Agency FB';width: 15em;position: absolute; transform: translate(0%, -50%);font-size: 1.5em;">
                <b>ALTA / BAJA / MODIFICACION DE MOVILES</b>
            </p>
    </div>
    <div>
        <a @onclick="@(() => { navigationManager.NavigateTo($"/moviles/agregar"); })">
            <Button Type="@ButtonType.Primary">Agregar Movil</Button>
        </a>
    </div>
</div>
<hr style="background:#fff; margin: 1em 1em;width: 100vh;"/>
<div class="grid">
    @if (moviles is not null)
    {
        @foreach(Movil m in moviles)
        {
        
                <card class="cartaPropia" style="display: flex; flex-direction: column;height: 280px; width: 180px;border-radius: 2px;border: 1px solid #BABABA;">
                    <div style="width: 100%;height: 75%;margin: 0; padding: 0;">
                        <img src="@CargarImage(m)" style="width: 100%;height:100%;object-fit: cover;overflow: hidden;">
                    </div>
                    <div style="width: 100%;height:25%;">
                        <div style="height: 50%">
                            <p style="height: 100%;background: #fff;font-size: 14px;display:flex;justify-content: center;align-items: center;font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';">Movil nº @m.NumeroMovil</p>
                        </div>
                        <div style="display: flex; flex-direction: row;height: 50%;">
                            <Button class="botonCarta" Style="border-radius: 0;border-top:1px solid #BABABA;height: 100%;border-left-color: #fff;" OnClick="@(() => { navigationManager.NavigateTo($"/moviles/movil/{m.VehiculoId}"); })">
                                <Icon Type="ellipsis" Theme="outline" />
                            </Button>
                            <Button class="botonCarta" Style="border-radius: 0;border-top:1px solid #BABABA;border-left:1px solid #BABABA;border-right:1px solid #BABABA;height: 100%;" OnClick="@(() => { navigationManager.NavigateTo($"/moviles/editar/{m.VehiculoId}"); })">
                                <Icon Type="edit" Theme="outline" />
                            </Button>
                            <Button class="botonCarta" Style="border-radius: 0;border-top: 1px solid #BABABA;height: 100%;border-right-color: #fff;" OnClick="()=> EliminarMovil(m.VehiculoId)">
                                <Icon Type="delete" Theme="outline" />
                            </Button>
                            
                        </div>
                    </div>
                </card>
        }
    }
    else
    {
        <h5>No hay moviles, carge uno porfavor</h5>
    }
</div>

@*<Space Direction="DirectionVHType.Vertical">
    <SpaceItem>
        <Button Type="primary" OnClick="@(()=>{ _visible = true;})">
            <Icon Type="ellipsis" Theme="outline" />
        </Button>
    </SpaceItem>
</Space>
<Modal Title="@title"
       Visible="@_visible"
       OnOk="@HandleOk"
       Footer="@ModalFooter.DefaultOkFooter">
    <div>
        <img id="ImagenMovil" src="#" />
    </div>
    <p>Some contents...</p>
    <p>Some contents...</p>
</Modal>
@code {
    string title = "BasicModal";
    bool _visible = false;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine("OK");
        _visible = false;
    }
}*@

@code {
    public Movil[]? moviles;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        moviles = await db.Moviles.ToArrayAsync();
    }

    public string CargarImage(Movil movil)
    {
        using var db = DbFactory.CreateDbContext();

        string src = "/";

        ImagenMovil? imagen = db.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }

        return src;
    }
    public async void EliminarMovil(int id)
    {

        using var context = DbFactory.CreateDbContext();
        Movil? MovilAeliminnar = await context.Moviles.Where(m => m.VehiculoId == id).SingleOrDefaultAsync();
        if (MovilAeliminnar is not null)
        {
            context.Remove(MovilAeliminnar);
        }
        await context.SaveChangesAsync();
        //NumeroMovil.NumeroMovil = string.Empty;
        moviles = await context.Moviles.ToArrayAsync();
        StateHasChanged();
    }
}


