﻿@using Vista.Services
@using Vista.Components.Vehiculos
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/unidades"

<style>
    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 1em;
        padding: 0;
        overflow: auto;
    }

    .grid {
        max-width: 1100px !important;
        min-width: 320px;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 12px;
        margin: 30px 0;
        overflow: auto;
    }

    @@media screen and (max-width: 1048px) {
        .grid {
            flex-direction: column;
            align-items: center;
        }
    }

    @@media screen and (max-width: 719px) {
        .grid {
            flex-direction: column;
            align-items: center;
        }
    }
</style>

<div class="template">
    <div class="grid">
        <div style="display: flex;justify-content: space-between;width: 100%;min-width: 320px;align-items: center;">
            <div style="position: relative;">
                <p style="font-family:'Agency FB';width: 15em;position: absolute; transform: translate(0%, -50%);font-size: 30px !important;display: contents;">
                    <b>UNIDADES</b>
                </p>
            </div>
            <div style="display: flex; gap: 5px;">
                <a @onclick="@(() => { navigationManager.NavigateTo($"/unidades/unidades-baja"); })">
                    <Button Style="background: rgb(62, 24, 24);color: #fff;border: none;">Unidades de baja</Button>
                </a>
                <a @onclick="() => AgregarVisible = true">
                    <Button Style="background: #1890FF;color: #fff;border: none; margin-right: 49px;font-size: 14px !important;">+ Nueva</Button>
                </a>
            </div>
        </div>
        @if (vehiculos is not null)
        {
            @foreach (VehiculoSalida m in vehiculos)
            {
                if (m.Estado != TipoEstadoMovil.Activo) continue;
                <VehiculosCarta Vehiculo="m" OnChange="Init" />
            }
        }
        else
        {
            <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
                <Spin Delay="500" Indicator=antIcon />
            </div>
        }
    </div>
</div>

@if (AgregarVisible == true){
    <Modal Footer="null" Title="Agregar" OnCancel="()=> AgregarVisible = false" Visible="@AgregarVisible">
        <VehiculoAgregar OnClose="CloseVehiculo" />
    </Modal>
}

@code {
    RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
    List<VehiculoSalida> vehiculos;
    bool AgregarVisible { get; set; }
    BomberosDbContext Context { get; set; }

    private async void CloseVehiculo()
    {
        AgregarVisible = false;
        await Init();
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        vehiculos = new();
        Context = DbFactory.CreateDbContext();
        vehiculos = await Context.Set<VehiculoSalida>().OrderBy(m => m.NumeroMovil).ToListAsync();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}