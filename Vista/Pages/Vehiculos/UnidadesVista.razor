@using Vista.Components.Vehiculos
@using Vista.Data.Models.Vehiculos.Flota
@using AntDesign

<link rel="stylesheet" href="css/Unidades.css" />

@*Servicios utilizados*@
@using Vista.Services
@inject NavigationManager navigationManager
@inject IVehiculoSalidaService VehiculoSalidaService

@page "/unidades"

<div class="container">
    <Content Style="padding: 16px;">
        <Card Bordered="false"
              Style="width: 100%; border-radius: 16px; box-shadow: 0px 8px 24px rgba(0, 0, 0, 0.1); background: #ffffff;">
            <div class="header-container" style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h2 style="margin-bottom: 0;"><Icon Type="Car" />UNIDADES</h2>
                    <p style="margin-top: 4px; color: #666;">@vehiculos?.Count() unidades activas</p>
                </div>
                <Space>
                    <Button Type="ButtonType.Primary"
                            OnClick="@(() => navigationManager.NavigateTo("/unidades/unidades-baja"))"
                            Style="margin-right: 12px;  background: #d32f2f; color: white; border-radius: 8px; font-weight: 600;">
                        <Icon Type="folder" /> Unidades de baja
                    </Button>

                    <Button Type="ButtonType.Primary"
                            OnClick="@(() => AgregarVisible = true)"
                            Style="border-radius: 8px; font-size: 14px; background: #4CAF50">
                        <Icon Type="plus" />Nueva Unidad
                    </Button>
                </Space>
            </div>

            <div style="margin-top: 24px;">
                @if (vehiculos is not null)
                {
                    <div class="vehicles-grid">
                        @foreach (var m in vehiculos)
                        {
                            <VehiculosCarta VehiculoId="m.Id" OnChange="Init" />
                        }
                    </div>
                }
                else
                {
                    <div class="loading-container">
                        <Spin Size="SpinSize.Large" Indicator="@LoadingIcon" />
                    </div>
                }
            </div>
        </Card>
    </Content>

    <Modal Title="Agregar"
           Visible="@AgregarVisible"
           OnCancel="@(() => AgregarVisible = false)"
           Footer="null"
           Style="border-radius: 12px; padding: 16px;">
        <VehiculoAgregar OnClose="CloseVehiculo" />
    </Modal>
</div>

@code {
    RenderFragment LoadingIcon => @<Icon Type="loading" Theme="IconThemeType.Outline" Style="font-size: 24px; color: rgb(62, 24, 24);" Spin />;
    bool AgregarVisible { get; set; }

    private List<UnidadesViewModel> vehiculos = new();

    public class UnidadesViewModel
    {
        public int Id { get; set; }
        public string NumeroMovil { get; set; } = string.Empty;
        public string? ImageUrl { get; set; } = string.Empty;
    }

    private async void CloseVehiculo()
    {
        AgregarVisible = false;
        await Init();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        var flota = await VehiculoSalidaService.ObtenerVehiculosSalidasPorEstadoAsync(TipoEstadoMovil.Activo);

        if (flota != null && flota.Any())
        {
            vehiculos = MapearVehiculos(flota);
        }
        else
        {
            vehiculos = new List<UnidadesViewModel>();
        }
    }

    private List<UnidadesViewModel> MapearVehiculos(List<VehiculoSalida> vehiculos)
    {
        return vehiculos.Select(v => new UnidadesViewModel
        {
            Id = v.VehiculoId,
            NumeroMovil = v.NumeroMovil ?? "-",

            // Mapeo de Imagen (si existe)
            ImageUrl = v.Imagen != null ? $"/api/imagenes/{v.Imagen.ImagenId}" : null
        }).ToList();
    }
}