@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/factores-climaticos"
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using Vista.Data.ViewModels.FactorClimatico;
@using Vista.Data.ViewModels.Personal;

<Form Model="@modelFactorClimatico"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    @*Datos generales de las salidas*@
    <FormItem Label="Numero de parte">
        <AntDesign.InputNumber @bind-Value="modelFactorClimatico.NumeroParte" />
    </FormItem>
    <FormItem Label="Descripcion">
        <Input @bind-Value="@modelFactorClimatico.Descripcion" />
    </FormItem>
    <FormItem Label="Dato Hora salida">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelFactorClimatico.HoraSalida" />
    </FormItem>
    <FormItem Label="Dato Hora llegada">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelFactorClimatico.HoraLLegada" />
    </FormItem>
    <FormItem Label="Kilometro salida">
        <AntDesign.InputNumber @bind-Value="modelFactorClimatico.KmSalida" />
    </FormItem>
    <FormItem Label="Kilometro llegada">
        <AntDesign.InputNumber @bind-Value="modelFactorClimatico.KmLlegada" />
    </FormItem>
    @*Datos Localizacion*@
    <FormItem Label="Calle/Ruta">
        <Input @bind-Value="@modelFactorClimatico.CalleORuta" />
    </FormItem>
    <FormItem Label="Numero/kilometro">
        <Input @bind-Value="@modelFactorClimatico.NumeroOKilometro" />
    </FormItem>
    <FormItem Label="Entre calles">
        <Input @bind-Value="@modelFactorClimatico.EntreCalles" />
    </FormItem>
    <FormItem Label="PisoNumero">
        <Input @bind-Value="@modelFactorClimatico.PisoNumero" />
    </FormItem>
    <FormItem Label="Depto">
        <Input @bind-Value="@modelFactorClimatico.Depto" />
    </FormItem>
    <FormItem Label="Tipo zona">
        <EnumSelect TEnum="TipoZona" @bind-Value="@modelFactorClimatico.TipoZona" />
    </FormItem>
    @*Datos de damnificados*@
    <FormItem Label="¿Ubo damnificados?">
        <Switch @bind-Checked="switchValue" />
    </FormItem>
    @if (switchValue == true)
    {

        <FormItem Label="Nombre">
            <Input @bind-Value="@damnificado.Nombre" />
        </FormItem>
        <FormItem Label="Apellido">
            <Input @bind-Value="@damnificado.Apellido" />
        </FormItem>
        <FormItem Label="Documento">
            <Input @bind-Value="@damnificado.Dni" />
        </FormItem>
        <FormItem Label="Tipo sexo">
            <EnumSelect TEnum="TipoSexo" @bind-Value="@damnificado.Sexo" />
        </FormItem>
        <FormItem Label="Lugar De nacimiento">
            <Input @bind-Value="@damnificado.LugarDeNacimiento" />
        </FormItem>
        <FormItem Label="edad">
            <AntDesign.InputNumber @bind-Value="damnificado.Edad" />
        </FormItem>
        <FormItem Label="Tipo material">
            <EnumSelect TEnum="TipoDamnificado" @bind-Value="@damnificado.Estado" />
        </FormItem>
        <Button OnClick="@AgregarDamnificado">Agregar damnificado</Button>
    }
    @*Solicitante datos*@
    <b><label>Datos de solicitante</label></b>
    <FormItem Label="Nombre del solicitante">
        <Input @bind-Value="@modelFactorClimatico.NombreSolicitante" />
    </FormItem>
    <FormItem Label="Apelldio del solicitante">
        <Input @bind-Value="@modelFactorClimatico.ApellidoSolicitante" />
    </FormItem>
    <FormItem Label="documneto del solicitante">
        <Input @bind-Value="@modelFactorClimatico.DniSolicitante" />
    </FormItem>
    <FormItem Label="Telefono  del solicitante">
        <Input @bind-Value="@modelFactorClimatico.TelefonoSolicitante" />
    </FormItem>
    @*Datos bomberos receptor*@
    <FormItem Label="Numero legajo">
        <AntDesign.InputNumber @bind-Value="modelFactorClimatico.LegajoReceptor" />
    </FormItem>


    @*Datos Del seguro*@
    <FormItem Label="Compania Aseguradora">
        <Input @bind-Value="@modelFactorClimatico.CompaniaAseguradora" />
    </FormItem>
    <FormItem Label="NumeroPoliza">
        <Input @bind-Value="@modelFactorClimatico.NumeroPoliza" />
    </FormItem>
    <FormItem Label="FechaVencimineto">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelFactorClimatico.FechaVencimineto" />
    </FormItem>
    @*Moviles de salidas*@
    @*a la hora de pedir el chofer y movil,*@
    pedir dato unico para no cargar todo y buscarlo en la base de datos
    <b><label>Datos de chofer</label></b>
    <br />
    <Checkbox @bind-Checked="chekM"> Cargo combustible</Checkbox>
    <FormItem Label="Numero de legajo del chofer">
        <Input @bind-Value="movilSalidaViewModels.NumeroLegajo" />
    </FormItem>
    <FormItem Label="Numero de movil">
        <Input @bind-Value="movilSalidaViewModels.NumeroMovil" />
    </FormItem>
    <br />
    <Button OnClick="@AgregarMovilSalida">Cargar Movil salida</Button>
    @*Cuerpos paraticipantes*@
    <b><label>Cuerpo Participante</label></b>
    <FormItem Label="Tipo Escalafon">
        <EnumSelect TEnum="EscalafonJerarquico" @bind-Value="@bomberoSalidaView.Grado" />
    </FormItem>
    <FormItem Label="Numero de legajo">
        <AntDesign.InputNumber @bind-Value="bomberoSalidaView.NumeroLegajo" />
    </FormItem>
    <Checkbox @bind-Checked="chekB"> Salio</Checkbox>
    <br />
    <Button OnClick="@AgregarCuerpoParticipante">Cargar cuerpo participante</Button>
    <br />
    <b><label>Datos encargados</label></b>
    <FormItem Label="Numero de legajo">
        <AntDesign.InputNumber @bind-Value="modelFactorClimatico.LegajoEncargado" />
    </FormItem>
    <b><label>Quien lleno planilla</label></b>
    <FormItem Label="Numero de legajo">
        <AntDesign.InputNumber @bind-Value="modelFactorClimatico.LegajoLLenoPlanilla" />
    </FormItem>
    @*Tipo servicio*@
    <FormItem Label="Tipo Servicio salida">
        <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@modelFactorClimatico.TipoServicio" />
    </FormItem>

    @*propio de la salida de Factor Climatico*@
    

    <FormItem Label="Tipo Superficie">
        <EnumSelect TEnum="TipoSuperficie" @bind-Value="@modelFactorClimatico.Superficie" />
    </FormItem>
    <FormItem Label="Tipo Evacuacion">
        <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@modelFactorClimatico.Evacuacion" />
    </FormItem>
    <FormItem Label="Detalles">
        <Input @bind-Value="@modelFactorClimatico.DetalleSuperficieDañada">
    </FormItem>


    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="@CargarFactorClimatico">
            Cargar salida
        </Button>
    </FormItem>
</Form>

@code
{

    private DamnificadoViewModels damnificado = new();
    private FactorClimaticoViewModels modelFactorClimatico = new ();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();

    bool switchValue { get; set; }
    bool switchValuev { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }


    //direccion
    public async void CargarFactorClimatico()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        Bombero? bomberoReceptor = await db.Bomberos.Where(b => b.NumeroLegajo == modelFactorClimatico.LegajoReceptor).SingleOrDefaultAsync();
        Bombero? bomberoEncargado = await db.Bomberos.Where(b => b.NumeroLegajo == modelFactorClimatico.LegajoEncargado).SingleOrDefaultAsync();
        Bombero? BomberoLlenoPlanilla = await db.Bomberos.Where(b => b.NumeroLegajo == modelFactorClimatico.LegajoLLenoPlanilla).SingleOrDefaultAsync();

        FactorClimatico factorClimatico = new()
        {
                
                NumeroParte = modelFactorClimatico.NumeroParte,
                HoraSalida = modelFactorClimatico.HoraSalida,
                HoraLlegada = modelFactorClimatico.HoraLLegada,
                KmSalida = modelFactorClimatico.KmSalida,
                KmLlegada = modelFactorClimatico.KmLlegada,
                Descripcion = modelFactorClimatico.Descripcion,
                CalleORuta = modelFactorClimatico.CalleORuta,
                NumeroOKilometro = modelFactorClimatico.NumeroOKilometro,
                EntreCalles = modelFactorClimatico.EntreCalles,
                PisoNumero = modelFactorClimatico.PisoNumero,
                Depto = modelFactorClimatico.Depto,
                //Enum.GetName(typeof(TipoGrupoSanguineo), bomberoView.GrupoSanguineo)
                TipoZona = modelFactorClimatico.TipoZona,
                NombreSolicitante = modelFactorClimatico.NombreSolicitante,
                ApellidoSolicitante = modelFactorClimatico.ApellidoSolicitante,
                DniSolicitante = modelFactorClimatico.DniSolicitante,
                TelefonoSolicitante = modelFactorClimatico.TelefonoSolicitante,
                TipoServicio = modelFactorClimatico.TipoServicio,
                //carga Evacuacion y superficie dañada
                Evacuacion = modelFactorClimatico.Evacuacion,
                Superficie = modelFactorClimatico.Superficie,
                DetalleSuperficieDañada = modelFactorClimatico.DetalleSuperficieDañada,

                QuienLleno = BomberoLlenoPlanilla,
                ReceptorBombero = bomberoReceptor,
                Encargado = bomberoEncargado,
               Seguro = new ()
               {
                   CompañiaAseguradora = modelFactorClimatico.CompaniaAseguradora,
                   NumeroDePoliza = modelFactorClimatico.NumeroPoliza,
                    FechaDeVencimineto = modelFactorClimatico.FechaVencimineto,
               },
               Damnificados = new(),
               Moviles = new(),
               CuerpoParticipante=new()

        };
        foreach (BomberoSalidaViewModels bom in bomberosSalida)
        {
            Bombero? bomberoSalida = await db.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
            BomberoSalida BomSalida = new()
            {
                Salio = bom.Salio,
                Grado = bom.Grado,
                Bombero = bomberoSalida
            };
            factorClimatico.CuerpoParticipante.Add(BomSalida);
        }
        foreach (MovilSalidaViewModels m in MovilesSalidasL)
        {
            Bombero? bomberoChofer = await db.Bomberos.Where(b => b.NumeroLegajo == m.Chofer.NumeroLegajo).SingleOrDefaultAsync();
            Movil? Movilsalida = await db.Moviles.Where(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil).SingleOrDefaultAsync();
            MovilSalida movilS = new()
            {
                CargoCombustible = m.CargoCombustible,
                Chofer = bomberoChofer,
                Movil = Movilsalida
            };
            factorClimatico.Moviles.Add(movilS);
        }
        foreach (DamnificadoViewModels d in DamnificadosSalida)
        {

            Damnificado damn = new()
                {
                    Nombre = d.Nombre,
                    Apellido = d.Apellido,
                    Dni = d.Dni,
                    Sexo = d.Sexo,
                    LugarDeNacimiento = d.LugarDeNacimiento,
                    Edad = d.Edad,
                    Estado = d.Estado,

                    VehiculoDamnificado = new()
                    {
                        Marca = vehiculo.Marca,
                        Modelo = vehiculo.Modelo,
                        Año = vehiculo.Año,
                        Patente = vehiculo.Patente,
                        Tipo = vehiculo.Tipo,
                        Color = vehiculo.Color,
                        Airbag = chek,
                        Seguro = new()
                        {
                            CompañiaAseguradora = vehiculo.CompañiaAseguradora,
                            NumeroDePoliza = vehiculo.NumeroDePoliza,
                            FechaDeVencimineto = vehiculo.FechaDeVencimineto,
                        },
                    }
                };
            factorClimatico.Damnificados.Add(damn);


        }
        await db.FactoresClimaticos.AddAsync(factorClimatico);
        await db.SaveChangesAsync();



    }


    public async void AgregarMovilSalida()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        Bombero? bomberoChofer = await db.Bomberos.Where(b => b.NumeroLegajo == movilSalidaViewModels.NumeroLegajo).SingleOrDefaultAsync();
        Movil? Movilsalida = await db.Moviles.Where(m => m.NumeroMovil == movilSalidaViewModels.NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
        {
            CargoCombustible = chekM,
            Chofer = bomberoChofer,
            MovilesSalida = Movilsalida,
        };
        MovilesSalidasL.Add(m);
        await db.SaveChangesAsync();
    }

    public async void AgregarCuerpoParticipante()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        BomberoSalidaViewModels b = new()
        {
            Salio = bomberoSalidaView.Salio,
            Grado = bomberoSalidaView.Grado,
            NumeroLegajo = bomberoSalidaView.NumeroLegajo
        };
        bomberosSalida.Add(b);
        await db.SaveChangesAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        var salida = db.Set<Salida>().OrderByDescending(s => s.NumeroParte).FirstOrDefault();
        if (salida is not null)
        {
            modelFactorClimatico.NumeroParte = salida.NumeroParte++;
        }
        
    }
    public async void AgregarDamnificado()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        DamnificadoViewModels dp = new()
        {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

        };
        DamnificadosSalida.Add(dp);
        await db.SaveChangesAsync();
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(modelFactorClimatico)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelFactorClimatico)}");
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }
    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }
    // array de las opciones posibles, buscar la opcion y agregarla en la planilla
   
    
}

    


