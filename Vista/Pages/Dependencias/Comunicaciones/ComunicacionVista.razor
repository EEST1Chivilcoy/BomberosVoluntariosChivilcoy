@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Grupos.Dependencias.Comunicaciones
@using Vista.Data.Models.Vehiculos.Flota
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes

@*Servicios Utilizados*@

@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

@*Direccion de la Pagina*@
@page "/Dependencias/Comunicacion"

<style>

    .comunicaciones-abm {
        --abm-primary-color: #A63333;
        --abm-primary-dark: #732D2D;
        --abm-success-color: #4CAF50;
        --abm-success-dark: #438E46;
        --abm-warning-color: #F57F17;
        --abm-warning-light: #FFF8E1;
        --abm-error-color: #C62828;
        --abm-error-light: #FFEBEE;
        --abm-approved-color: #2E7D32;
        --abm-approved-light: #E6F7E9;
        --abm-gold-color: #FFD700;
    }

            .licencias-abm .licenses-container {
            padding: 12px !important;
            min-height: 100vh !important;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%) !important;
        }

    .comunicaciones-abm .main-card {
            background: rgba(255, 255, 255, 0.95) !important;
            backdrop-filter: blur(10px) !important;
            border-radius: 16px !important;
            box-shadow: 0 8px 32px rgba(166, 51, 51, 0.1), 0 4px 16px rgba(0, 0, 0, 0.05) !important;
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            overflow: hidden !important;
    }

    .comunicaciones-abm .header-section {
        background: linear-gradient(135deg, #A63333 0%, #732D2D 100%) !important;
        color: white !important;
        padding: 28px !important;
        position: relative !important;
        overflow: hidden !important;
    }

    .comunicaciones-abm .header-section .lava-bubbles {
        position: absolute;
        top: 0; left: 0; width: 100%; height: 100%;
        pointer-events: none;
        z-index: 1;
        overflow: hidden;
    }
    .comunicaciones-abm .header-section .lava-bubble {
        position: absolute;
        border-radius: 50%;
        opacity: 0.45;
        background: radial-gradient(circle at 60% 40%, #FFD54F 0%, #F9A825 80%, transparent 100%);
        animation: lava-bubble-move 8s linear infinite;
        filter: blur(1.5px);
        mix-blend-mode: lighten;
    }
    .comunicaciones-abm .header-section .lava-bubble.b1 {
        left: 10%; width: 60px; height: 60px; bottom: -70px;
        animation-delay: 0s;
        animation-duration: 7.5s;
    }
    .comunicaciones-abm .header-section .lava-bubble.b2 {
         left: 35%; width: 90px; height: 90px; bottom: -100px;
        animation-delay: 2s;
        animation-duration: 9s;
        background: radial-gradient(circle at 60% 40%, #FFEB3B 0%, #FFD54F 80%, transparent 100%);
    }
    .comunicaciones-abm .header-section .lava-bubble.b3 {
        left: 65%; width: 50px; height: 50px; bottom: -60px;
        animation-delay: 1.5s;
        animation-duration: 6.5s;
        background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #FFD54F 80%, transparent 100%);
    }
    .comunicaciones-abm .header-section .lava-bubble.b4 {
        left: 80%; width: 70px; height: 70px; bottom: -80px;
        animation-delay: 3.2s;
        animation-duration: 8.5s;
        background: radial-gradient(circle at 60% 40%, #F9A825 0%, #FFD54F 80%, transparent 100%);
    }
    .comunicaciones-abm .header-section .lava-bubble.b5 {
        left: 55%; width: 40px; height: 40px; bottom: -50px;
        animation-delay: 5s;
        animation-duration: 7.2s;
        background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #F9A825 80%, transparent 100%);
    }

    @@keyframes lava-bubble-move {
        0% {
            transform: translateY(0) scale(1) rotate(0deg);
            opacity: 0.45;
        }
        60% {
            opacity: 0.7;
            filter: blur(2.5px);
        }
        80% {
            transform: translateY(-220px) scale(1.15) rotate(10deg);
            opacity: 0.6;
        }
        100% {
            transform: translateY(-320px) scale(0.95) rotate(-8deg);
            opacity: 0;
        }
    }

    .comunicaciones-abm .main-title {
        font-family: 'Poppins', 'Fjalla One', sans-serif !important;
        font-size: 2.2rem !important;
        font-weight: 700 !important;
        letter-spacing: 1px !important;
        margin: 0 !important;
        display: flex !important;
        align-items: center !important;
        gap: 12px !important;
        animation: text-glow 2.5s ease-in-out infinite alternate !important;
        position: relative !important;
        z-index: 2 !important;
    }
    .comunicaciones-abm .title-icon {
        color: #FFD54F !important;
        font-size: 2rem !important;
        filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.25)) !impo
    }
    @@keyframes text-glow {
        0%, 100% { text-shadow: 0 0 5px #F9A825, 0 0 10px #FFD54F; }
        50% { text-shadow: 0 0 12px #F9A825, 0 0 22px #FFD54F; }
    }

    .comunicaciones-abm .title-container {
        position: relative !important;
        z-index: 2 !important;
        margin-bottom: 20px !important;
    }

    .comunicaciones-abm .filters-section {
        position: relative !important;
        z-index: 2 !important;
        display: grid !important;
        grid-template-columns: 1fr !important;
        gap: 16px !important;
                
    }

    .comunicaciones-abm .actions-row {
        display: grid !important;
        grid-template-columns: 1fr auto auto !important;
        gap: 16px !important;
        align-items: center !important;
        width: 100% !important;
    }
    .comunicaciones-abm .search-container {
        min-width: 0 !important;
    }
    .comunicaciones-abm .add-button {
        background: linear-gradient(135deg, var(--abm-success-color) 0%, var(--abm-success-dark) 100%) !important;
        border: none !important;
        color: white !important;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3) !important;
        padding: 0 20px !important;
    }
    .comunicaciones-abm .add-button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.22) !important;
    }

        .comunicaciones-abm .fade-in {
        animation: abm-fadeIn 0.5s ease-in-out !important;
    }

    @@keyframes abm-fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .comunicaciones-abm .comunicaciones-container {
        padding: 12px !important;
        min-height: 100vh !important;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%) !important;
    }

    /* Ajustes para pegar la tabla al header y eliminar espaciados */
    .comunicaciones-abm .table-container {
        padding: 0 !important;
        overflow: hidden !important;
        margin-top: 0 !important;
    }

    .comunicaciones-abm .ant-table {
        border-radius: 0 !important;
        margin-top: 0 !important;
        border-top: none !important;
    }

    .comunicaciones-abm .ant-table-thead > tr > th {
        background: #A63333 !important;
        color: #fff !important;
        font-weight: 600 !important;
        border: none !important;
        padding: 16px !important;
        border-bottom: 2px solid #732D2D !important;
    }

    .comunicaciones-abm .ant-table-thead > tr > th:hover {
        background: #732D2D !important;
        color: #fff !important;
    }

    .comunicaciones-abm .ant-table-cell) {
        padding: 16px !important;
        border-bottom: 1px solid rgba(0, 0, 0, 0.06) !important;
    }

    .comunicaciones-abm .ant-table-tbody > tr:hover > td) {
        background-color: rgba(166, 51, 51, 0.05) !important;
        cursor: pointer !important;
        transform: translateX(4px) !important;
        transition: all 0.2s ease !important;
    }


    .comunicaciones-abm .status-badge {
        padding: 6px 12px !important;
        border-radius: 20px !important;
        font-weight: 600 !important;
        text-align: center !important;
        font-size: 0.85rem !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }

    .comunicaciones-abm .status-activo {
        background: var(--abm-approved-light) !important;
        color: var(--abm-approved-color) !important;
    }

    .comunicaciones-abm .status-inactivo {
        background: var(--abm-error-light) !important;
        color: var(--abm-error-color) !important;
    }

    .comunicaciones-abm .boton_p {
        background-color: var(--abm-primary-color) !important;
        color: rgb(255, 255, 255) !important;
    }

    .comunicaciones-abm .button-wrapper .ant-btn:not(.ant-btn-icon-only){
        border-color: transparent !important;
        color:#fff !important;
        border-radius:8px;
        font-weight:600;
        box-shadow:0 2px 8px rgba(146,84,222,.22);
        margin-top: 1rem;
        height: 40px !important;
        font-size: 16px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        gap: 6px !important;
        padding: 0 20px !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }

    .comunicaciones-abm .button-wrapper .ant-btn.ant-btn-icon-only{
        background:#fff !important;
        color:#4caf50 !important;
        border-radius:8px;
    }

    .comunicaciones-abm .button-wrapper .ant-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4) !important;
    }
</style>

<div class="comunicaciones-abm">
    <div class="comunicaciones-container fade-in">
        <Card Class="main-card">
            <div class="header-section">
                <div class="lava-bubbles">
                    <div class="lava-bubble b1"></div>
                    <div class="lava-bubble b2"></div>
                    <div class="lava-bubble b3"></div>
                    <div class="lava-bubble b4"></div>
                    <div class="lava-bubble b5"></div>
                </div>
                <div class="title-container">
                    <h1 class="main-title">
                        <Icon Type="wifi" Class="title-icon" />
                        COMUNICACIONES
                    </h1>
                </div>
                <div class="filters-section">
                    <div class="actions-row">
                        <div class="search-container">
                            <Search Placeholder="Buscar por marca" WrapperStyle="width: 500px;" AllowClear EnterButton="true" @bind-Value="searchString" OnChange="() => this.Search(new ChangeEventArgs { Value = searchString })" Size="InputSize.Large" />
                        </div>
                        <div class="button-wrapper">
                            <Button OnClick="()=>ShowModalAgregar()" 
                                    Type="ButtonType.Primary"
                                    class="ant-btn"
                                    style="background-color: #4CAF50; border-color: #4CAF50;">
                                <Icon Type="plus" /> Nueva Comunicacion
                            </Button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="table-container">
                <Table DataSource="filteredComunicaciones"
                       PageSize="10"
                       Responsive
                       TItem="ComunicacionViewModel"
                       Loading="@loading"
                       ScrollX="800px">

                    <ColumnDefinitions Context="comunicacion">
                        <PropertyColumn Title="📡 N° Equipo"
                                        Property="c => c.NroEquipo"
                                        Sortable
                                        Width="150px"
                                        Fixed="ColumnFixPlacement.Left" />

                        <PropertyColumn Title="📱 Modelo"
                                        Property="c => c.Modelo"
                                        Sortable
                                        Width="150px" />

                        <PropertyColumn Title="🏷️ Marca"
                                        Property="c => c.Marca"
                                        Sortable
                                        Width="150px" />

                        <PropertyColumn Title="🔢 N° Serie"
                                        Property="c => c.NroSerie"
                                        Sortable
                                        Width="150px" />

                        <PropertyColumn Title="📊 Estado"
                                        Property="c => c.Estado"
                                        Sortable
                                        Width="120px"
                                        Filters="DiscriminadorFilter"
                                        OnFilter="((value,name)=>Enum.GetName(typeof(TipoEstadoHandie), name).StartsWith(Enum.GetName(typeof(TipoEstadoHandie), value)))">
                            <Template>
                                @{
                                    string statusClass = comunicacion.Estado == TipoEstadoHandie.Activo ? "status-activo" : "status-inactivo";
                                    string icon = comunicacion.Estado == TipoEstadoHandie.Activo ? "check-circle" : "close-circle";
                                }
                                <Space>
                                    <Icon Type="@icon" />
                                    <span class="status-badge @statusClass">
                                        @comunicacion.Estado.ToString()
                                    </span>
                                </Space>
                            </Template>
                        </PropertyColumn>

                        <PropertyColumn Title="👤 Nombre"
                                        Property="c => c.Nombre"
                                        Sortable
                                        Width="150px" />

                        <PropertyColumn Title="👤 Apellido"
                                        Property="c => c.Apellido"
                                        Sortable
                                        Width="150px" />

                        <PropertyColumn Title="📋 N° Legajo"
                                        Property="c => c.NroLegajo"
                                        Sortable
                                        Width="120px" />

                        <PropertyColumn Title="🚗 Móvil"
                                        Property="c => c.NumeroMovil"
                                        Sortable
                                        Width="120px" />

                        <ActionColumn Title="⚙️ Acciones"
                                      Width="150px"
                            <Space>
                                <MenuItem>
                                    <Popconfirm Title="¿Estás seguro que deseas borrar el handie?"
                                                OnConfirm="()=>Delete(comunicacion.NroEquipo)"
                                                OnCancel="Cancel"
                                                OkText="Si"
                                                CancelText="No">
                                        <Button Danger>
                                            <Icon Type="delete" />
                                        </Button>
                                    </Popconfirm>
                                </MenuItem>
                                <MenuItem>
                                    <Popconfirm Title="¿Estás seguro que deseas desasignar el handie?"
                                                OnConfirm="()=>Desasignar(comunicacion.NroEquipo)"
                                                OnCancel="Cancel"
                                                OkText="Si"
                                                CancelText="No">
                                        <Button>
                                            <Icon Type="disconnect" />
                                        </Button>
                                    </Popconfirm>
                                </Menuitem>
                                <Menuitem>
                                    <Button Type="@ButtonType.Primary" OnClick="()=>ShowModalEditar(comunicacion.NroEquipo)" Ghost>
                                        <Icon Type="edit" />
                                    </Button>
                                </Menuitem>
                            </Space>
                        </ActionColumn>
                    </ColumnDefinitions>
                </Table>
            </div>
        </Card>
    </div>
</div>

<Modal Footer="null" Title="@("Nueva Comunicación")"
       Visible="@_visibleAgregar"
       OnCancel="@HandleCancelAgregar"
       WrapClassName="modal-crear-licencia">
    <div class="modal-crear-licencia-content">
        <AgregarComunicacion OnFinishCallback="OnFinishAdd" />
    </div>
</Modal>

<Modal Title="@("Editar Comunicación")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       WrapClassName="modal-crear-licencia">
    <div class="modal-crear-licencia-content">
        <Form Loading="loading" Model="@ComunicacionVM"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form">

        <Row Class="modal-crear-licencia-row" Gutter="24">
            <AntDesign.Col Span="12">
                <FormItem Label="Nro Equipo" Class="modal-crear-licencia-form-item">
                    <Input DefaultValue="@ComunicacionVM.NroEquipo" @bind-Value="@ComunicacionVM.NroEquipo" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Modelo" Class="modal-crear-licencia-form-item">
                    <Input DefaultValue="@ComunicacionVM.Modelo" @bind-Value="@ComunicacionVM.Modelo" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Class="modal-crear-licencia-row" Gutter="24">
            <AntDesign.Col Span="12">
                <FormItem Label="Marca" Class="modal-crear-licencia-form-item">
                    <Input DefaultValue="@ComunicacionVM.Marca" @bind-Value="@ComunicacionVM.Marca" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Nro Serie" Class="modal-crear-licencia-form-item">
                    <Input DefaultValue="@ComunicacionVM.NroSerie" @bind-Value="@ComunicacionVM.NroSerie" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Class="modal-crear-licencia-row" Gutter="24">
            <AntDesign.Col Span="24">
                <FormItem Label="Estado" Class="modal-crear-licencia-form-item">
                    <EnumSelect DefaultValue="@ComunicacionVM.Estado" TEnum="TipoEstadoHandie" @bind-Value="@ComunicacionVM.Estado" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        @if (ComunicacionVM.Estado == TipoEstadoHandie.Activo)
        {
            <Row Class="modal-crear-licencia-row" Gutter="24">
                <AntDesign.Col Span="24">
                    <FormItem Label="Seleccione una opción" Class="modal-crear-licencia-form-item">
                        <Checkbox @bind-Checked="@selectBombero" OnChange="() => HandleCheckboxChange(true, checkboxBomberoLabel)">Elija el bombero</Checkbox>
                        <Checkbox @bind-Checked="@selectMovil" OnChange="() => HandleCheckboxChange(true, checkboxMovilLabel)">Elija el móvil</Checkbox>
                    </FormItem>
                </AntDesign.Col>
            </Row>
            @if (selectBombero)
            {
                <Row Class="modal-crear-licencia-row" Gutter="24">
                    <AntDesign.Col Span="24">
                        <FormItem Label="@nameof(BomberoVM.NombreYApellido)" Class="modal-crear-licencia-form-item">
                            <Select TItem="BomberoViewModel"
                                    TItemValue="int?"
                                    DataSource="@BomberosViewModel"
                                    @bind-Value="@ComunicacionVM.NroLegajo"
                                    LabelName="@nameof(BomberoVM.NombreYApellido)"
                                    ValueName="@nameof(BomberoVM.NumeroLegajo)"
                                    Placeholder="Seleccione a un bombero"
                                    EnableSearch
                                    AllowClear="true">
                            </Select>
                        </FormItem>
                    </AntDesign.Col>
                </Row>
            }
            else if (selectMovil)
            {
                <Row Class="modal-crear-licencia-row" Gutter="24">
                    <AntDesign.Col Span="24">
                        <FormItem Label="@nameof(MovilVM.NumeroMovil)" Class="modal-crear-licencia-form-item">
                            <Select TItem="MovilViewModel"
                                    TItemValue="string"
                                    DataSource="@MovilesViewModel"
                                    @bind-Value="@ComunicacionVM.NumeroMovil"
                                    LabelName="@nameof(MovilVM.NumeroMovil)"
                                    ValueName="@nameof(MovilVM.NumeroMovil)"
                                    Placeholder="Seleccione un móvil"
                                    EnableSearch
                                    AllowClear="true">
                            </Select>
                        </FormItem>
                    </AntDesign.Col>
                </Row>
            }
        }
    </Form>
    </div>
</Modal>

@code {

    

    private class ComunicacionViewModel
    {

        public int EquipoId { get; set; }
        [Required, StringLength(255)]
        public string NroEquipo { get; set; }
        public string? Modelo { get; set; }
        public string? Marca { get; set; }
        public string? NroSerie { get; set; }
        public TipoEstadoHandie Estado { get; set; }


        //Propiedades a mostrar de un movil
        public Movil? Movil { get; set; }
        public string? NumeroMovil = " ";
        //Propiedades a mostrar de un bombero
        public Bombero? Bombero { get; set; }
        public string? Nombre = " ";
        public string? Apellido = " ";
        public int? NroLegajo;
    }

    private class BomberoViewModel
    {
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public int NumeroLegajo { get; set; }
        public int? EquipoId { get; set; }
        public string? NombreYApellido { get { return Nombre + ", " + Apellido; } }
        public Comunicacion? Handie { get; set; }
    }
    public class MovilViewModel
    {
        public string NumeroMovil { get; set; }
        public Comunicacion? HandieMovil { get; set; }
    }

    IEnumerable<ComunicacionViewModel> selectedRows;
    TipoEstadoHandie discriminadoresHandies;
    List<string> discriminadores = new List<string>();
    private TableFilter<TipoEstadoHandie>[] DiscriminadorFilter;
    List<Comunicacion>? comunicaciones { get; set; } = new();
    List<Movil> moviles { get; set; } = new();
    List<Bombero> bomberos { get; set; } = new List<Bombero>();

    private ComunicacionViewModel ComunicacionVM { get; set; } = new();

    List<ComunicacionViewModel> ComunicacionesViewModel { get; set; } = new();

    private MovilViewModel MovilVM { get; set; } = new();
    List<MovilViewModel> MovilesViewModel { get; set; } = new();

    private BomberoViewModel BomberoVM { get; set; } = new();
    List<BomberoViewModel> BomberosViewModel { get; set; } = new();
    BomberosDbContext Context { get; set; }

    public ITable _table;
    int _pageIndex = 1;
    int _pageSize = 6;
    int _total = 0;
    private string searchString = "";
    private List<ComunicacionViewModel>? filteredComunicaciones;
    private List<ComunicacionViewModel>? dataSource;

    private bool selectBombero = false;
    private bool selectMovil = false;
    string checkboxMovilLabel = "Elija el móvil";
    string checkboxBomberoLabel = "Elija el bombero";
    private void HandleCheckboxChange(bool value, string checkboxName)
    {
        if (checkboxName == "Elija el bombero" && value)
        {
            selectMovil = false; // Desactivar el otro checkbox
            selectBombero = true; // Activar el checkbox actual
        }
        else if (checkboxName == "Elija el móvil" && value)
        {
            selectBombero = false; // Desactivar el otro checkbox
            selectMovil = true; // Activar el checkbox actual
        }
    }



    protected override async Task OnInitializedAsync()
    {
        await Init();
        filteredComunicaciones = ComunicacionesViewModel;
        //Filtro del discriminador, le asigno un valor de un enum a cada numero discriminador
        DiscriminadorFilter = new TableFilter<TipoEstadoHandie>[Enum.GetValues(typeof(TipoEstadoHandie)).Length];
        int i = 0;
        foreach (TipoEstadoHandie value in Enum.GetValues(typeof(TipoEstadoHandie)))
        {
            DiscriminadorFilter[i] = new() { Text = Enum.GetName(typeof(TipoEstadoHandie), value), Value = value };
            i++;
        }
    }

    private async Task Init()
    {
        ComunicacionVM = new();
        BomberoVM = new();
        Context = DbFactory.CreateDbContext();
        await CargarBomberoViewModel();
        await CargarMovilViewModel();
        await CargarComunicacionVM();
    }


    public async Task CargarComunicacionVM()
    {
        int contador = 0;
        ComunicacionesViewModel.Clear();
        var bomberos = await Context.Bomberos.ToArrayAsync();
        var moviles = await Context.Moviles.ToArrayAsync();
        var comunicacionesDB = await Context.Comunicacion.ToListAsync();

        foreach (Comunicacion c in comunicacionesDB)
        {
            ComunicacionViewModel comunicacion = new()
                {
                    NroEquipo = c.NroEquipo,
                    Marca = c.Marca,
                    Modelo = c.Modelo,
                    NroSerie = c.NroSerie,
                    Nombre = c.Bombero?.Nombre,
                    Apellido = c.Bombero?.Apellido,
                    NumeroMovil = c.Movil?.NumeroMovil,
                    NroLegajo = c.Bombero?.NumeroLegajo,
                    Estado = c.Estado
                };
            ComunicacionesViewModel.Add(comunicacion);
        }

    }
    public async Task CargarBomberoViewModel()
    {
        BomberosViewModel = new();
        var bomberos = await Context.Bomberos.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel bomberoVM = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo,
                    EquipoId = b.EquipoId,
                };
            BomberosViewModel.Add(bomberoVM);
        }
    }
    public async Task CargarMovilViewModel()
    {
        MovilesViewModel = new();
        var moviles = await Context.Moviles.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Movil m in moviles)
        {
            MovilViewModel movilVM = new()
                {
                    NumeroMovil = m.NumeroMovil,
                    HandieMovil = m.HandieMovil
                };
            MovilesViewModel.Add(movilVM);
        }
    }

    void OnRowClick(RowData<ComunicacionViewModel> row)
    {
        ShowModalEditar(row.Data.NroEquipo);
    }//Toma el valor del valor de la fila seleccionada
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
           this.Search(new ChangeEventArgs { Value = searchString }); // Call the search method when the Enter key is pressed
        }
    }
    private void Search(ChangeEventArgs e)
    {
        searchString = e.Value?.ToString()?.Trim()?.ToLower() ?? ""; 
        filteredComunicaciones = ComunicacionesViewModel?
            .Where(c =>
                string.IsNullOrWhiteSpace(searchString) ||
                (c.Marca?.ToLower() ?? "").Contains(searchString)
            )
            .ToList();
    }

    public void RemoveSelection(string NroEquipoBorrar)
    {
        var selected = selectedRows.Where(x => x.NroEquipo != NroEquipoBorrar);
        selectedRows = selected;
    }

    private async Task Delete(string NroEquipoBorrar)
    {
        try
        {
            Comunicacion? comunicacion = await Context.Comunicacion.FirstOrDefaultAsync(c => c.NroEquipo == NroEquipoBorrar);
            Context.Remove(comunicacion);
            await Context.SaveChangesAsync();

            // Actualiza ComunicacionesViewModel sin el handie borrado
            ComunicacionesViewModel = ComunicacionesViewModel.Where(x => x.NroEquipo != NroEquipoBorrar).ToList();

            // Actualiza la lista filtrada utilizada como origen de datos de la tabla
            filteredComunicaciones = ComunicacionesViewModel;

            // Forzar una actualización de la interfaz de usuario
            await Init();
            StateHasChanged();

            await message.SuccessAsync("Handie eliminado correctamente.");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.ErrorAsync(ex.InnerException.Message, 5);
            else
                await message.ErrorAsync(ex.Message, 5);
        }
    }

    private async Task Desasignar(string NroEquipoDesasignar)
    {
        try
        {
            Bombero? bombero = await Context.Bomberos
                .Include(b => b.Handie)
                .Where(x => x.Handie.NroEquipo == NroEquipoDesasignar)
                .SingleOrDefaultAsync();
            Movil? movil = await Context.Moviles
                .Include(b => b.HandieMovil)
                .Where(x => x.HandieMovil.NroEquipo == NroEquipoDesasignar)
                .SingleOrDefaultAsync();

            if (bombero != null)
            {
                bombero.Handie = null;
                await Context.SaveChangesAsync();
                await Init();
                StateHasChanged();
                await message.SuccessAsync("Bombero desasignado correctamente.");
            }
            else if (movil != null)
            {
                movil.HandieMovil = null;
                await Context.SaveChangesAsync();
            }
            // Vuelve a cargar los datos de la tabla
            await Init();

            // Forza una actualización de la interfaz de usuario
            StateHasChanged();

            await message.SuccessAsync("Móvil desasignado correctamente.");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.ErrorAsync(ex.InnerException.Message, 5);
            else
                await message.ErrorAsync(ex.Message, 5);
        }
    }

    private async void EditarHandie(string NroEquipoEdit)
    {
        try
        {
            Comunicacion? comunicacion = await Context.Comunicacion.SingleOrDefaultAsync(b => b.NroEquipo == NroEquipoEdit);

            // Antes de hacer cualquier cambio, verifica si el tipo ha cambiado
            if (selectBombero && comunicacion.Movil != null)
            {
                // Si se cambió de móvil a bombero, desvincula el móvil
                comunicacion.Movil = null;
            }
            else if (selectMovil && comunicacion.Bombero != null)
            {
                // Si se cambió de bombero a móvil, desvincula el bombero
                comunicacion.Bombero = null;
            }

            if (selectBombero)
            {
                Bombero? bombero = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == ComunicacionVM.NroLegajo);
                comunicacion.Bombero = bombero;
            }
            else if (selectMovil)
            {
                Movil? movil = await Context.Moviles.SingleOrDefaultAsync(b => b.NumeroMovil == ComunicacionVM.NumeroMovil);
                comunicacion.Movil = movil;
            }

            comunicacion.NroEquipo = ComunicacionVM.NroEquipo;
            comunicacion.Modelo = ComunicacionVM.Modelo;
            comunicacion.Marca = ComunicacionVM.Marca;
            comunicacion.NroSerie = ComunicacionVM.NroSerie;
            comunicacion.Estado = ComunicacionVM.Estado;

            await Context.SaveChangesAsync();
            StateHasChanged();
            await message.SuccessAsync("Handie editado correctamente.");
        }
        catch (Exception ex)
        {
            StateHasChanged();
            if (ex.InnerException != null)
                await message.ErrorAsync(ex.InnerException.Message, 5);
            else
                await message.ErrorAsync(ex.Message, 5);
        }
    }

    string NroEquipoEdit;
    private void ShowModalEditar(string NroEquipo)
    {
        NroEquipoEdit = NroEquipo;
        GetComunicacionViewModel(NroEquipo);
        _visible = true;
    }
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(ComunicacionVM)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    bool _visibleAgregar = false;


    private void ShowModalAgregar()
    {
        _visibleAgregar = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visible = false;
    }


    private async Task OnFinishAdd()
    {
        _visibleAgregar = false;
        await Init();
        StateHasChanged();
    }

    public void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregar = false;
    }

    private Form<ComunicacionViewModel> _form;
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visible = false;
    }

    private async void HandleOk(MouseEventArgs e)
    {
        EditarHandie(NroEquipoEdit);
        _visible = false;
    }

    private void NevigateToYourUrl()
    {
        navigationManager.NavigateTo($"/Comunicacion", true);
    }

    private async void GetComunicacionViewModel(string NroEquipo)
    {
        ComunicacionVM = ComunicacionesViewModel.Single(c => c.NroEquipo == NroEquipo);
        StateHasChanged();
    }//Se obtienen los valores de la base de datos al view model

    private void Cancel()
    {
        message.Error("Operación cancelada.");
    }


}
