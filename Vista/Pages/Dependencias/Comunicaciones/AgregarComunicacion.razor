@using Vista.Data.Models.Grupos.Dependencias.Comunicaciones
@using Vista.Data.Models.Vehiculos.Flota
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes

@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory

<style>
    .modal-crear-licencia .ant-modal-content {
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border: 4px solid #A63333;
        margin-top: 50px;
        margin-bottom: 0px;
        ;
        }

    .modal-crear-licencia .ant-modal-header {
        background-color: #f0f2f5;
        border-bottom: 1px solid #d9d9d9;
        padding: 16px 24px;
        border-radius: 9px 9px 0 0;
    }


    .modal-crear-licencia-form-item .ant-form-item-label > label,
    .modal-crear-licencia-form-full-width .ant-form-item-label > label {
        font-weight: 600;
        color: #434343;
        transition: color 0.3s ease;
    }

    .modal-crear-licencia-form-item .ant-form-item-label > label:hover,
    .modal-crear-licencia-form-full-width .ant-form-item-label > label:hover {
        color: #FFD700;
    }

    .modal-crear-licencia .ant-input:focus,
    .modal-crear-licencia .ant-input:hover,
    .modal-crear-licencia .ant-select-selector:focus,
    .modal-crear-licencia .ant-select-selector:hover,
    .modal-crear-licencia .ant-picker:focus,
    .modal-crear-licencia .ant-picker:hover,
    .modal-crear-licencia .ant-picker-input > input:focus,
    .modal-crear-licencia .ant-picker-input > input:hover,
    .modal-crear-licencia .ant-input-number-input:focus,
    .modal-crear-licencia .ant-input-number-input:hover,
    .modal-crear-licencia .ant-textarea:focus,
    .modal-crear-licencia .ant-textarea:hover {
        border-color: #FFD700 !important;
        box-shadow: 0 0 0 2px rgba(255, 215, 0, 0.2) !important;
    }

    .modal-crear-licencia .ant-picker,
    .modal-crear-licencia .ant-input,
    .modal-crear-licencia .ant-select-selector,
    .modal-crear-licencia .ant-input-number,
    .modal-crear-licencia .ant-textarea {
        border-radius: 8px !important;
        border: 1px solid #d9d9d9 !important;
        background: #fff !important;
        color: #434343 !important;
        transition: all 0.3s ease !important;
    }

    .modal-crear-licencia-footer {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 16px;
        margin-top: 18px;
        margin-bottom: 0px;
        width: 100%;
    }

    .modal-crear-licencia .ant-btn-primary {
        background: linear-gradient(135deg, #4CAF50 0%, #438E46 100%) !important;
        border: none !important;
        color: #fff !important;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(76, 175, 80, 0.18);
        margin-top: 0;
        margin-bottom: 0;
        padding: 0 20px !important;
        border-radius: 8px !important;
        transition: background 0.3s;
    }

    .modal-crear-licencia .ant-btn-primary:hover {
        background: linear-gradient(135deg, #388E3C 0%, #4CAF50 100%) !important;
        color: #fff !important;
    }

    .boton-agregar {
        background: linear-gradient(135deg, #4CAF50 0%, #438E46 100%) !important;
        border: none !important;
        color: #fff !important;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(76, 175, 80, 0.18);
        padding: 0 20px !important;
        border-radius: 8px !important;
        transition: background 0.3s;
    }

    .boton-agregar:hover {
        background: linear-gradient(135deg, #388E3C 0%, #4CAF50 100%) !important;
        color: #fff !important;
    }

    @@media (max-width: 767px) {
        .modal-crear-licencia-content {
            padding: 16px;
        }
    }   
</style>

<div class="modal-crear-licencia-content">
    <Form Model="@ComunicacionVM"
          Class="modal-crear-licencia-form"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed">
        <Row Class="modal-crear-licencia-row" Gutter="24">
            <AntDesign.Col Span="12">
                <FormItem Label="Número Equipo" Class="modal-crear-licencia-form-item">
                    <Input @bind-Value="@ComunicacionVM.NroEquipo" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Modelo" Class="modal-crear-licencia-form-item">
                    <Input @bind-Value="@ComunicacionVM.Modelo" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Class="modal-crear-licencia-row" Gutter="24">
            <AntDesign.Col Span="12">
                <FormItem Label="Marca" Class="modal-crear-licencia-form-item">
                    <Input @bind-Value="@ComunicacionVM.Marca" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Número Serie" Class="modal-crear-licencia-form-item">
                    <Input @bind-Value="@ComunicacionVM.NroSerie" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Class="modal-crear-licencia-row" Gutter="24">
            <AntDesign.Col Span="24">
                <FormItem Label="Estado" Class="modal-crear-licencia-form-item">
                    <EnumSelect TEnum="TipoEstadoHandie" @bind-Value="@ComunicacionVM.Estado" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        @if (ComunicacionVM.Estado == TipoEstadoHandie.Activo)
        {
            <Row Class="modal-crear-licencia-row" Gutter="24">
                <AntDesign.Col Span="24">
                    <FormItem Label="Seleccione una opción" Class="modal-crear-licencia-form-item">
                        <Checkbox @bind-Checked="@selectBombero" OnChange="() => HandleCheckboxChange(true, checkboxBomberoLabel)">Elija el bombero</Checkbox>
                        <Checkbox @bind-Checked="@selectMovil" OnChange="() => HandleCheckboxChange(true, checkboxMovilLabel)">Elija el móvil</Checkbox>
                    </FormItem>
                </AntDesign.Col>
            </Row>
            @if (selectBombero)
            {
                <Row Class="modal-crear-licencia-row" Gutter="24">
                    <AntDesign.Col Span="24">
                        <FormItem Label="Elija el bombero que será asignado" Class="modal-crear-licencia-form-item">
                            <Select TItem="BomberoViweModel"
                                    TItemValue="int?"
                                    DataSource="@BomberosVM"
                                    @bind-Value="@ComunicacionVM.NroLegajo"
                                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                    Placeholder="Seleccione a un bombero"
                                    EnableSearch
                                    AllowClear="true">
                            </Select>
                        </FormItem>
                    </AntDesign.Col>
                </Row>
            }
            @if (selectMovil)
            {
                <Row Class="modal-crear-licencia-row" Gutter="24">
                    <AntDesign.Col Span="24">
                        <FormItem Label="Elija el móvil que será asignado" Class="modal-crear-licencia-form-item">
                            <Select TItem="MovilViewModel"
                                    TItemValue="string"
                                    DataSource="@MovilesViewModel"
                                    @bind-Value="@ComunicacionVM.NumeroMovil"
                                    LabelName="@nameof(MovilViewModel.NumeroMovil)"
                                    ValueName="@nameof(MovilViewModel.NumeroMovil)"
                                    Placeholder="Seleccione un móvil"
                                    EnableSearch
                                    AllowClear="true">
                            </Select>
                        </FormItem>
                    </AntDesign.Col>
                </Row>
            }
        }
        <div class="modal-crear-licencia-footer">
            <Button Style="border: 1px solid black;" OnClick="@(() => OnFinishCallback.InvokeAsync())">
                Volver
            </Button>
            <Button Class="boton-agregar" HtmlType="submit">
                Agregar Handie
            </Button>
        </div>
    </Form>
</div>

@code {
    [Parameter]
    public EventCallback OnFinishCallback { get; set; }

    private class ComunicacionViewModel
    {
        [Required, StringLength(255)]
        public string NroEquipo { get; set; }
        public string? Modelo { get; set; }
        public string? Marca { get; set; }
        public string? NroSerie { get; set; }
        public TipoEstadoHandie Estado { get; set; }
        public int? NroLegajo { get; set; }
        public Movil? Movil { get; set; }
        public string? NumeroMovil = " ";
    }

    public class MovilViewModel
    {
        public string Patente { get; set; }
        public string NumeroMovil { get; set; }
        public Comunicacion? HandieMovil { get; set; }
    }

    BomberosDbContext Context { get; set; }

    ComunicacionViewModel ComunicacionVM { get; set; } = new();
    List<BomberoViweModel> BomberosVM { get; set; } = new();
    List<MovilViewModel> MovilesViewModel { get; set; } = new();
    private bool selectBombero = false;
    private bool selectMovil = false;
    string checkboxMovilLabel = "Elija el móvil";
    string checkboxBomberoLabel = "Elija el bombero";

    private void HandleCheckboxChange(bool value, string checkboxName)
    {
        if (checkboxName == "Elija el bombero" && value)
        {
            selectMovil = false; // Desactivar el otro checkbox
            selectBombero = true; // Activar el checkbox actual
        }
        else if (checkboxName == "Elija el móvil" && value)
        {
            selectBombero = false; // Desactivar el otro checkbox
            selectMovil = true; // Activar el checkbox actual
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        ComunicacionVM = new();
        Context = DbFactory.CreateDbContext();
        await CargarBomberosView();
        await CargarMovilViewModel();
    }

    public async Task CargarBomberosView()
    {
        BomberosVM = new();
        var bomberos = await Context.Bomberos.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bomberoVM = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo
                };
            BomberosVM.Add(bomberoVM);
        }
    }
    public async Task CargarMovilViewModel()
    {
        MovilesViewModel = new();
        var moviles = await Context.Moviles.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Movil m in moviles)
        {
            MovilViewModel movilVM = new()
                {
                    NumeroMovil = m.NumeroMovil,
                    Patente = m.Patente,
                    HandieMovil = m.HandieMovil
                };
            MovilesViewModel.Add(movilVM);
        }
    }
    public async Task OnFinish(EditContext editContext)
    {
        try
        {
            if (await Context.Comunicacion.SingleOrDefaultAsync(c => c.NroEquipo == ComunicacionVM.NroEquipo) != null)
            {
                await message.ErrorAsync("Número de equipo repetido");
                return;
            }

            if (selectBombero)
            {
                Bombero? bomberoSelec = await Context.Bomberos.SingleOrDefaultAsync(bom => bom.NumeroLegajo == ComunicacionVM.NroLegajo);
                Comunicacion comunicacion = new()
                    {
                        NroEquipo = ComunicacionVM.NroEquipo,
                        Modelo = ComunicacionVM.Modelo,
                        Marca = ComunicacionVM.Marca,
                        NroSerie = ComunicacionVM.NroSerie,
                        Estado = ComunicacionVM.Estado,
                        Bombero = bomberoSelec
                    };
                Context.Comunicacion.Add(comunicacion);
            }
            else if (selectMovil)
            {
                Movil? movilSelec = await Context.Moviles.SingleOrDefaultAsync(mov => mov.NumeroMovil == ComunicacionVM.NumeroMovil);
                Comunicacion comunicacion = new()
                    {
                        NroEquipo = ComunicacionVM.NroEquipo,
                        Modelo = ComunicacionVM.Modelo,
                        Marca = ComunicacionVM.Marca,
                        NroSerie = ComunicacionVM.NroSerie,
                        Estado = ComunicacionVM.Estado,
                        Movil = movilSelec
                    };
                Context.Comunicacion.Add(comunicacion);
            }
            else
            {
                Comunicacion comunicacion = new()
                    {
                        NroEquipo = ComunicacionVM.NroEquipo,
                        Modelo = ComunicacionVM.Modelo,
                        Marca = ComunicacionVM.Marca,
                        NroSerie = ComunicacionVM.NroSerie,
                        Estado = ComunicacionVM.Estado
                    };
                Context.Comunicacion.Add(comunicacion);
            }

            // Limpiar el valor no seleccionado
            if (selectBombero)
            {
                ComunicacionVM.NumeroMovil = null;
            }
            else if (selectMovil)
            {
                ComunicacionVM.NroLegajo = null;
            }

            await Context.SaveChangesAsync();
            await message.SuccessAsync("Handie agregado correctamente");
            await OnFinishCallback.InvokeAsync();
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.ErrorAsync(ex.InnerException.Message, 5);
            else
                await message.ErrorAsync(ex.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(ComunicacionVM)}");
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}

