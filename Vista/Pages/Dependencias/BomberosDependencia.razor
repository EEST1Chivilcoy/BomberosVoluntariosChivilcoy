@using Vista.Data.Models.Grupos.Dependencias
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Mappers

@*Servicios Utilizados*@
@using Vista.Services
@inject IDependenciaService DependenciaService
@inject IBomberoService BomberoService
@inject IMessageService MessageService

<style>
	/* Estilo del header de la tabla - Similar a Licencias */
	.bomberos-abm {
		--abm-primary-color: #A63333;
		--abm-primary-dark: #732D2D;
		--abm-success-color: #4CAF50;
		--abm-success-dark: #438E46;
		--abm-gold-color: #FFD700;
	}

	.bomberos-abm .table-container {
		background: rgba(255, 255, 255, 0.95) !important;
		backdrop-filter: blur(10px) !important;
		border-radius: 16px !important;
		box-shadow: 0 8px 32px rgba(166, 51, 51, 0.1), 0 4px 16px rgba(0, 0, 0, 0.05) !important;
		border: 1px solid rgba(255, 255, 255, 0.2) !important;
		overflow: hidden !important;
	}

	.bomberos-abm .header-section {
		background: linear-gradient(135deg, #A63333 0%, #732D2D 100%) !important;
		color: white !important;
		padding: 28px !important;
		position: relative !important;
		overflow: hidden !important;
		display: flex !important;
		justify-content: space-between !important;
		align-items: center !important;
		flex-wrap: wrap;
	}

	.bomberos-abm .header-section .lava-bubbles {
		position: absolute;
		top: 0; left: 0; width: 100%; height: 100%;
		pointer-events: none;
		z-index: 1;
		overflow: hidden;
	}

	.bomberos-abm .header-section .lava-bubble {
		position: absolute;
		border-radius: 50%;
		opacity: 0.45;
		background: radial-gradient(circle at 60% 40%, #FFD54F 0%, #F9A825 80%, transparent 100%);
		animation: lava-bubble-move 8s linear infinite;
		filter: blur(1.5px);
		mix-blend-mode: lighten;
	}

	.bomberos-abm .header-section .lava-bubble.b1 {
		left: 10%; width: 60px; height: 60px; bottom: -70px;
		animation-delay: 0s; animation-duration: 7.5s;
	}
	.bomberos-abm .header-section .lava-bubble.b2 {
		left: 35%; width: 90px; height: 90px; bottom: -100px;
		animation-delay: 2s; animation-duration: 9s;
		background: radial-gradient(circle at 60% 40%, #FFEB3B 0%, #FFD54F 80%, transparent 100%);
	}
	.bomberos-abm .header-section .lava-bubble.b3 {
		left: 65%; width: 50px; height: 50px; bottom: -60px;
		animation-delay: 1.5s; animation-duration: 6.5s;
		background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #FFD54F 80%, transparent 100%);
	}
	.bomberos-abm .header-section .lava-bubble.b4 {
		left: 80%; width: 70px; height: 70px; bottom: -80px;
		animation-delay: 3.2s; animation-duration: 8.5s;
		background: radial-gradient(circle at 60% 40%, #F9A825 0%, #FFD54F 80%, transparent 100%);
	}
	.bomberos-abm .header-section .lava-bubble.b5 {
		left: 55%; width: 40px; height: 40px; bottom: -50px;
		animation-delay: 5s; animation-duration: 7.2s;
		background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #F9A825 80%, transparent 100%);
	}

	@@keyframes lava-bubble-move {
		0% { transform: translateY(0) scale(1) rotate(0deg); opacity: 0.45; }
		60% { opacity: 0.7; filter: blur(2.5px); }
		80% { transform: translateY(-220px) scale(1.15) rotate(10deg); opacity: 0.6; }
		100% { transform: translateY(-320px) scale(0.95) rotate(-8deg); opacity: 0; }
	}

	.bomberos-abm .main-title {
		font-family: 'Poppins', 'Fjalla One', sans-serif !important;
		font-size: 2.2rem !important;
		font-weight: 700 !important;
		letter-spacing: 1px !important;
		margin: 0 !important;
		display: flex !important;
		align-items: center !important;
		gap: 12px !important;
		animation: text-glow 2.5s ease-in-out infinite alternate !important;
		position: relative !important;
		z-index: 2 !important;
	}

	.bomberos-abm .title-icon {
		color: #FFD54F !important;
		font-size: 2rem !important;
		filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.25)) !important;
	}

	@@keyframes text-glow {
		0%, 100% { text-shadow: 0 0 5px #F9A825, 0 0 10px #FFD54F; }
		50% { text-shadow: 0 0 12px #F9A825, 0 0 22px #FFD54F; }
	}

	.bomberos-abm .title-container {
		position: relative !important;
		z-index: 2 !important;
	}

	.bomberos-abm .actions-row {
		display: flex !important;
		gap: 10px !important;
		align-items: center !important;
		z-index: 2 !important;
	}

	.bomberos-abm .modern-button {
		height: 40px !important;
		border-radius: 8px !important;
		font-weight: 600 !important;
		display: flex !important;
		align-items: center !important;
		gap: 8px !important;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
		position: relative !important;
		overflow: hidden !important;
	}

	.bomberos-abm .add-button {
		background: linear-gradient(135deg, var(--abm-success-color) 0%, var(--abm-success-dark) 100%) !important;
		border: none !important;
		color: white !important;
		box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3) !important;
		padding: 0 20px !important;
	}

	.bomberos-abm .add-button:hover {
		transform: translateY(-2px) !important;
		box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4) !important;
	}

	.bomberos-abm .table-content {
		padding: 0 !important;
		overflow: hidden !important;
	}

	.bomberos-abm .ant-table-thead > tr > th {
		background: #A63333 !important;
		color: #fff !important;
		font-weight: 600 !important;
		border: none !important;
		padding: 16px !important;
	}

	.bomberos-abm .ant-table-cell {
		padding: 16px !important;
		border-bottom: 1px solid rgba(0, 0, 0, 0.06) !important;
	}

	.bomberos-abm .ant-table {
		border-radius: 0 !important;
	}

	/* Modal fullscreen */
	.fullscreen-modal .ant-modal {
		top: 0 !important;
		padding: 0 !important;
		height: 100vh !important;
		max-width: 100vw !important;
		width: 100vw !important;
	}

	.fullscreen-modal .ant-modal-content {
		height: 100vh !important;
		border-radius: 0 !important;
		display: flex !important;
		flex-direction: column !important;
		width: 100% !important;
		max-width: none !important;
	}

	.fullscreen-modal .ant-modal-body {
		flex: 1 !important;
		padding: 0 !important;
		overflow: hidden !important;
	}

	.fullscreen-modal .ant-modal-header {
		background: #A63333 !important;
		border-bottom: none !important;
		padding: 16px 24px !important;
	}

	.fullscreen-modal .ant-modal-title {
		color: white !important;
		font-size: 24px !important;
		font-weight: bold !important;
	}

	.fullscreen-modal .ant-modal-close {
		color: white !important;
		background: rgba(255, 255, 255, 0.2) !important;
		border-radius: 50% !important;
		width: 40px !important;
		height: 40px !important;
		display: flex !important;
		align-items: center !important;
		justify-content: center !important;
		transition: all 0.3s ease !important;
	}

	.fullscreen-modal .ant-modal-close:hover {
		background: rgba(255, 255, 255, 0.3) !important;
		transform: scale(1.1) !important;
	}
</style>

<Modal Visible="true"
	   Title="Bomberos de la Dependencia"
	   Width=@("100vw")
	   Style="top: 0; padding: 0; height: 100vh; max-width: 100vw;"
	   BodyStyle="padding: 0; height: calc(100vh - 55px); overflow: hidden;"
	   Footer="null"
	   Closable="true"
	   OnCancel="@HandleClose"
	   WrapClassName="fullscreen-modal">

	<div class="bomberos-abm" style="height: 100%; display: flex; flex-direction: column;">
		<div class="table-container" style="flex: 1; display: flex; flex-direction: column;">
			<div class="header-section">
				<div class="lava-bubbles">
					<div class="lava-bubble b1"></div>
					<div class="lava-bubble b2"></div>
					<div class="lava-bubble b3"></div>
					<div class="lava-bubble b4"></div>
					<div class="lava-bubble b5"></div>
				</div>
				<div class="title-container">
					<h1 class="main-title">
						<Icon Type="team" Class="title-icon" />
						@DependenciaNombre
					</h1>
				</div>
				<div class="actions-row">
					<Button Class="modern-button add-button"
							OnClick="() => showAddFirefightersModal()"
							Icon="plus"
							Size="ButtonSize.Large">
						Añadir Bomberos
					</Button>
				</div>
			</div>

			<div class="table-content" style="flex: 1; overflow: auto;">
				<Table DataSource="@BomberosViewModel"
					   PageSize="@_pageSize"
					   Responsive
					   TItem="BomberoDependenciaViewModel"
					   ScrollX="800px">

					<ColumnDefinitions Context="bombero">
						<PropertyColumn Title="N° Legajo"
										Property="d => d.NroLeg"
										Sortable
										Width="150px"
										Fixed="ColumnFixPlacement.Left" />

						<PropertyColumn Title="Apellido y Nombre"
										Property="d => d.ApellidoYNombre"
										Sortable
										Width="300px" />

						<ActionColumn Title="Acciones"
									  Align=ColumnAlign.Center
									  Width="120px"
									  Fixed="ColumnFixPlacement.Right">
							<Space>
								<SpaceItem>
									<Popconfirm Title="¿Deseas remover a este bombero de la dependencia?"
												OnConfirm="() => RemoveFirefighterFromDepartment(bombero.Id, DependenciaId)"
												OkText="Si"
												CancelText="No">
										<Button Danger>
											<Icon Type="close" />
										</Button>
									</Popconfirm>
								</SpaceItem>
							</Space>
						</ActionColumn>
					</ColumnDefinitions>
				</Table>
			</div>
		</div>
	</div>
</Modal>

<Modal @bind-Visible="_modalAñadirBomberosVisible" Title="Añadir Bomberos" OkText="@("Guardar")" CancelText="@("Cancelar")" OnOk="@AddFirefighterToDepartmentAsync">
	<Select Mode="SelectMode.Multiple"
			Placeholder="Elige los bomberos a agregar a la dependencia"
			DataSource="@BomberosTodosViewModel"
			Values="@BomberosSeleccionados"
			TItem="BomberoViweModel"
			TItemValue="int"
			LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
			ValueName="@nameof(BomberoViweModel.Id)"
			EnableSearch="true"
			ValuesChanged="@(async (values) => await HandleValuesChange(values))" />
	<p>Seleccionados: @String.Join(", ", BomberosSeleccionados)</p>
</Modal>

@code {
	[Parameter] public int DependenciaId { get; set; } // ID de la Dependencia que se está editando
	[Parameter] public string DependenciaNombre { get; set; } = string.Empty; // Nombre de la Dependencia
	[Parameter] public EventCallback OnClose { get; set; } // Callback para cerrar la vista
	private List<Bombero?> DependenciaBomberos = new(); // Lista de Bomberos de la Dependencia
	public List<BomberoDependenciaViewModel?> BomberosViewModel { get; set; } = new(); // Lista de Bomberos en formato ViewModel para la Dependencia
	private List<int> BomberosSeleccionados = new List<int>(); // Lista de IDs de Bomberos seleccionados para agregar a la Dependencia
	public List<BomberoViweModel?> BomberosTodosViewModel { get; set; } = new(); // Lista de Bomberos en formato ViewModel para todos los Bomberos disponibles
	public List<Bombero?> BomberosTodos { get; set; } = new(); // Lista de todos los Bomberos disponibles

	// Variables de Tamaño de la Tabla
	int _pageIndex = 1;
	int _pageSize = 10; // Aumentamos el tamaño de página para mejor visualización

	// Modals
	private bool _modalAñadirBomberosVisible = false;

	public class BomberoDependenciaViewModel
	{
		public int Id { get; set; }
		public int NroLeg { get; set; }
		public string ApellidoYNombre { get; set; } = null!;
	}

	protected override async Task OnInitializedAsync()
	{
		await OnInit();
	}

	public async Task OnInit()
	{
		if (DependenciaId <= 0)
		{
			await MessageService.ErrorAsync("ID de Dependencia inválido.");
			return;
		}

		if (DependenciaService == null)
		{
			await MessageService.ErrorAsync("Servicio de Dependencia no está disponible.");
			return;
		}

		if (BomberoService == null)
		{
			await MessageService.ErrorAsync("Servicio de Bombero no está disponible.");
			return;
		}


		// Si todo está bien, obtenemos todos los bomberos de la base de datos
		BomberosTodos = await BomberoService.ObtenerTodosLosBomberosAsync();

		// Si no hay bomberos, mostramos un mensaje de error

		if (BomberosTodos == null || !BomberosTodos.Any())
		{
			await MessageService.ErrorAsync("No hay bomberos disponibles en la base de datos.");
			return;
		}

		// Los mapeamos a ViewModel
		BomberosTodosViewModel = BomberosTodos.ToBomberoViewModelList();

		// Si no hay bomberos disponibles en la lista, mostramos un mensaje de error indicando que fue un error de mapeo
		if (BomberosTodosViewModel == null || !BomberosTodosViewModel.Any())
		{
			await MessageService.ErrorAsync("Error al mapear los bomberos a la lista de ViewModel.");
			return;
		}

		// Obtenemos los bomberos de la dependencia específica
		DependenciaBomberos = await DependenciaService.ObtenerBomberosDeDependenciaAsync(DependenciaId);

		// Mapeamos los bomberos de la dependencia a ViewModel
		BomberosViewModel = MapFirefightersToDepartmentViewModels(DependenciaBomberos);

		// Si no se pudieron mapear los bomberos a ViewModel, mostramos un mensaje de error
		if (BomberosViewModel == null || !BomberosViewModel.Any() || DependenciaBomberos != null || DependenciaBomberos.Any())
	{
            await MessageService.ErrorAsync("Error al mapear los bomberos de la dependencia a ViewModel");
            return;
		}

        // Limpiamos la lista de bomberos seleccionados
		BomberosSeleccionados = new();

        // Si todo salió bien, actualizamos el estado del componente
		StateHasChanged();
	}

	public List<BomberoDependenciaViewModel?> MapFirefightersToDepartmentViewModels(List<Bombero?> bomberos)
	{
		if (bomberos.Any())
		{
			return DependenciaBomberos.Select(b => new BomberoDependenciaViewModel
				{
					Id = b.PersonaId,
					NroLeg = b.NumeroLegajo,
					ApellidoYNombre = $"{b.Apellido}, {b.Nombre}"
				}).ToList();
		}
		return null;
	}

	public async Task RemoveFirefighterFromDepartment(int BomberoID, int DependenciaID)
	{
		if (BomberoID == 0 || DependenciaID == 0)
		{
			await MessageService.ErrorAsync("No se puede eliminar el bombero de la dependencia");
			return;
		}

		bool isBomberoInDependencia = DependenciaService.ComprobarBomberoEnDependenciaAsync(BomberoID, DependenciaID).Result;

		if (!isBomberoInDependencia)
		{
			await MessageService.ErrorAsync("El bombero no pertenece a la dependencia");
			return;
		}

		await DependenciaService.QuitarBomberoDeDependenciaAsync(DependenciaID, BomberoID);
		await OnInit();
	}

	public async Task AddFirefighterToDepartmentAsync()
	{
		if (BomberosSeleccionados.Any())
		{
			foreach (int BomberoSelId in BomberosSeleccionados)
			{
				if (BomberoSelId > 0)
				{
					await DependenciaService.AgregarBomberoADependenciaAsync(DependenciaId, BomberoSelId);
				}
			}

			await MessageService.SuccessAsync($"Se añadieron {BomberosSeleccionados.Count} Bomberos a la Dependencia");
			_modalAñadirBomberosVisible = false;
			await OnInit();
		}
		else
		{
			_modalAñadirBomberosVisible = false;
		}
	}

	public async Task showAddFirefightersModal()
	{
		if (BomberosTodos == null || !BomberosTodos.Any())
		{
			await MessageService.ErrorAsync("No hay bomberos disponibles para agregar.");
			return;
		}

		_modalAñadirBomberosVisible = true;
	}

	private async Task HandleValuesChange(IEnumerable<int> values)
	{
		BomberosSeleccionados = values.ToList();
	}

	private async Task HandleClose()
	{
		if (OnClose.HasDelegate)
		{
			await OnClose.InvokeAsync();
		}
	}
}