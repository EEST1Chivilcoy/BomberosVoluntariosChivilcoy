@using Vista.Data.Models.Grupos.Dependencias
@using Vista.Services
@inject IDependenciaService DependenciaService

<style>
    .ant-table {
        width: 100%;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .ant-table-title {
        background-color: #A63333
    }

    .ant-table-thead .ant-table-cell {
        background-color: #A63333 !important;
        color: white !important;
        font-weight: bold;
    }

    .ant-table-cell {
        padding: 16px !important;
    }

    .title-template-container {
        background-color: #A63333;
        padding: 16px;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-input {
        width: 250px;
    }

        .search-input input {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            border: none;
        }

            .search-input input::placeholder {
                color: rgba(255, 255, 255, 0.7);
            }

    .add-button {
        background-color: #4CAF50 !important;
        border-color: #438E46 !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    @@media (max-width: 960px) {
        .title-template-container {
            flex-direction: column;
            align-items: stretch;
        }
    }

    .ant-form-horizontal .ant-form-item-label {
        flex-grow: 1;
        background: #A63333;
    }

        .ant-form-horizontal .ant-form-item-label > label {
            color: #FFFFFF;
            padding: 2px 4px;
        }

    .ant-form-item {
        box-sizing: border-box;
        margin: 0;
        margin-bottom: 0px;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        font-variant: tabular-nums;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        margin-bottom: 8px !important;
        vertical-align: top;
        font-weight: bold;
    }

    .ant-modal-content {
        position: relative;
        background-color: #fff;
        background-clip: padding-box;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05);
        pointer-events: auto;
        border: 1px solid red !important;
    }
</style>


<Table TItem="BomberoDependenciaViewModel"
       DataSource="@BomberosViewModel"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       Title="Dependencias"
       Responsive>
    <TitleTemplate>
        <Flex Justify="flex-end">
            <Space>
                <Button Type="primary" OnClick="@(() => _modalAñadirVisible = true)">
                    <Icon Type="plus" /> Añadir
                </Button>
            </Space>
        </Flex>
    </TitleTemplate>

    <ColumnDefinitions>

        <PropertyColumn Title="N° Legajo" Property="d=>d.NroLeg" Sortable />

        <PropertyColumn Title="Apellido y Nombre" Property="d=>d.ApellidoYNombre" Sortable />

        <ActionColumn Title="Acciones" Align=ColumnAlign.Center>
            <Space>
                <SpaceItem>
                    <Popconfirm Title="¿Eliminar esta dependencia?"
                                OnConfirm="() => QuitarBoberoDependencia(context.Id, DependenciaId)"
                                OkText="Si"
                                CancelText="No">
                        <Button Danger>
                            <Icon Type="delete" />
                        </Button>
                    </Popconfirm>
                </SpaceItem>
            </Space>
        </ActionColumn>

    </ColumnDefinitions>
</Table>

@code {
    [Parameter] public int DependenciaId { get; set; }
    private List<Bombero> DependenciaBomberos = new();
    public List<BomberoDependenciaViewModel> BomberosViewModel { get; set; } = new();

    // Variables de Tamaño de la Tabla
    int _pageIndex = 1;
    int _pageSize = 5;

    // Modals
    private bool _modalAñadirVisible = false;


    public class BomberoDependenciaViewModel
    {
        public int Id { get; set; }
        public int NroLeg { get; set; }
        public string ApellidoYNombre { get; set; } = null!;
    }

    protected override async Task OnInitializedAsync()
    {
        await OnInit();
    }

    public async Task OnInit ()
    {
        DependenciaBomberos = await DependenciaService.ObtenerBomberosDeDependenciaAsync(DependenciaId);
        BomberosViewModel = MapearDependencia(DependenciaBomberos);
        StateHasChanged();
    }

    public List<BomberoDependenciaViewModel?> MapearDependencia(List<Bombero?> bomberos)
    {
        if (bomberos.Any())
        {
            return DependenciaBomberos.Select(b => new BomberoDependenciaViewModel
                {
                    Id = b.PersonaId,
                    NroLeg = b.NumeroLegajo,
                    ApellidoYNombre = $"{b.Apellido}, {b.Nombre}"
                }).ToList();
        }
        return null;
    }

    public async Task QuitarBoberoDependencia(int BomberoID, int DependenciaID)
    {
        await DependenciaService.QuitarBomberoDeDependenciaAsync(DependenciaID, BomberoID);
        await OnInit();
    }
}