@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Vehiculos.Flota
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes

@*Servicios Utilizados*@

@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

@*Direccion de la Pagina*|*@
@page "/fire-force/Dependencias/EquiposAutonomos"

<style>
    .equipos-autonomos-abm {
        --abm-primary-color: #A63333;
        --abm-primary-dark: #732D2D;
        --abm-success-color: #4CAF50;
        --abm-success-dark: #438E46;
        --abm-warning-color: #F57F17;
        --abm-warning-light: #FFF8E1;
        --abm-error-color: #C62828;
        --abm-error-light: #FFEBEE;
        --abm-approved-color: #2E7D32;
        --abm-approved-light: #E6F7E9;
        --abm-gold-color: #FFD700;
    }

    .equipos-autonomos-abm .equipos-container {
        padding: 12px !important;
        min-height: 100vh !important;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%) !important;
        width: 100vw !important;
    }

    .equipos-autonomos-abm .main-card {
        background: rgba(255, 255, 255, 0.95) !important;
        backdrop-filter: blur(10px) !important;
        border-radius: 16px !important;
        box-shadow: 0 8px 32px rgba(255, 107, 53, 0.1), 0 4px 16px rgba(0, 0, 0, 0.05) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        overflow: hidden !important;
    }

    .equipos-autonomos-abm .header-section {
        background: linear-gradient(135deg, #A63333 0%, #732D2D 100%) !important;
        color: white !important;
        padding: 28px !important;
        position: relative !important;
        overflow: hidden !important;
    }

    .equipos-autonomos-abm .header-section .lava-bubbles {
        position: absolute;
        top: 0; left: 0; width: 100%; height: 100%;
        pointer-events: none;
        z-index: 1;
        overflow: hidden;
    }

    .equipos-autonomos-abm .header-section .lava-bubble {
        position: absolute;
        border-radius: 50%;
        opacity: 0.45;
        background: radial-gradient(circle at 60% 40%, #FFD54F 0%, #F9A825 80%, transparent 100%);
        animation: lava-bubble-move 8s linear infinite;
        filter: blur(1.5px);
        mix-blend-mode: lighten;
    }

    .equipos-autonomos-abm .header-section .lava-bubble.b1 {
        left: 10%; width: 60px; height: 60px; bottom: -70px;
        animation-delay: 0s;
        animation-duration: 7.5s;
    }
    .equipos-autonomos-abm .header-section .lava-bubble.b2 {
         left: 35%; width: 90px; height: 90px; bottom: -100px;
        animation-delay: 2s;
        animation-duration: 9s;
        background: radial-gradient(circle at 60% 40%, #FFEB3B 0%, #FFD54F 80%, transparent 100%);
    }
    .equipos-autonomos-abm .header-section .lava-bubble.b3 {
        left: 65%; width: 50px; height: 50px; bottom: -60px;
        animation-delay: 1.5s;
        animation-duration: 6.5s;
        background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #FFD54F 80%, transparent 100%);
    }
    .equipos-autonomos-abm .header-section .lava-bubble.b4 {
        left: 80%; width: 70px; height: 70px; bottom: -80px;
        animation-delay: 3.2s;
        animation-duration: 8.5s;
        background: radial-gradient(circle at 60% 40%, #F9A825 0%, #FFD54F 80%, transparent 100%);
    }
    .equipos-autonomos-abm .header-section .lava-bubble.b5 {
        left: 55%; width: 40px; height: 40px; bottom: -50px;
        animation-delay: 5s;
        animation-duration: 7.2s;
        background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #F9A825 80%, transparent 100%);
    }

    @@keyframes lava-bubble-move {
        0% {
            transform: translateY(0) scale(1) rotate(0deg);
            opacity: 0.45;
        }
        60% {
            opacity: 0.7;
            filter: blur(2.5px);
        }
        80% {
            transform: translateY(-220px) scale(1.15) rotate(10deg);
            opacity: 0.6;
        }
        100% {
            transform: translateY(-320px) scale(0.95) rotate(-8deg);
            opacity: 0;
        }
    }

    .equipos-autonomos-abm .main-title {
        font-family: 'Poppins', 'Fjalla One', sans-serif !important;
        font-size: 2.2rem !important;
        font-weight: 700 !important;
        letter-spacing: 1px !important;
        margin: 0 !important;
        display: flex !important;
        align-items: center !important;
        gap: 12px !important;
        animation: text-glow 2.5s ease-in-out infinite alternate !important;
        position: relative !important;
        z-index: 2 !important;
    }
    .equipos-autonomos-abm .title-icon {
        color: #FFD54F !important;
        font-size: 2rem !important;
        filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.25)) !important;
    }
    @@keyframes text-glow {
        0%, 100% { text-shadow: 0 0 5px #F9A825, 0 0 10px #FFD54F; }
        50% { text-shadow: 0 0 12px #F9A825, 0 0 22px #FFD54F; }
    }

    .equipos-autonomos-abm .title-container {
        position: relative !important;
        z-index: 2 !important;
        margin-bottom: 20px !important;
    }

    .equipos-autonomos-abm .filters-section {
        position: relative !important;
        z-index: 2 !important;
        display: grid !important;
        grid-template-columns: 1fr !important;
        gap: 16px !important;
    }

    .equipos-autonomos-abm .actions-row {
        display: grid !important;
        grid-template-columns: 1fr auto auto !important;
        gap: 16px !important;
        align-items: center !important;
        width: 100% !important;
    }
    .equipos-autonomos-abm .search-container {
        min-width: 0 !important;
    }
    .equipos-autonomos-abm .add-button {
        background: linear-gradient(135deg, var(--abm-success-color) 0%, var(--abm-success-dark) 100%) !important;
        border: none !important;
        color: white !important;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3) !important;
        padding: 0 20px !important;
    }
    .equipos-autonomos-abm .add-button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.22) !important;
    }

    .equipos-autonomos-abm .fade-in {
        animation: abm-fadeIn 0.5s ease-in-out !important;
    }

    @@keyframes abm-fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .equipos-autonomos-abm .table-container {
        padding: 0 !important;
        overflow: hidden !important;
        margin-top: 0 !important;
    }

    .equipos-autonomos-abm .ant-table {
        border-radius: 0 !important;
        margin-top: 0 !important;
        border-top: none !important;
    }

    .equipos-autonomos-abm .ant-table-thead > tr > th {
        background: #A63333 !important;
        color: #fff !important;
        font-weight: 600 !important;
        border: none !important;
        padding: 16px !important;    }



    .equipos-autonomos-abm .ant-table-cell {
        padding: 16px !important;
        border-bottom: 1px solid rgba(0, 0, 0, 0.06) !important;
    }

    .equipos-autonomos-abm .ant-table-tbody > tr:hover > td {
        background-color: rgba(255, 107, 53, 0.05) !important;
        cursor: pointer !important;
        transform: translateX(4px) !important;
        transition: all 0.2s ease !important;
    }

    .equipos-autonomos-abm .status-badge {
        padding: 6px 12px !important;
        border-radius: 20px !important;
        font-weight: 600 !important;
        text-align: center !important;
        font-size: 0.85rem !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }

    .equipos-autonomos-abm .status-stock {
        background: #E3F2FD !important;
        color: #1976D2 !important;
    }

    .equipos-autonomos-abm .status-activo {
        background: var(--abm-approved-light) !important;
        color: var(--abm-approved-color) !important;
    }

    .equipos-autonomos-abm .status-baja {
        background: var(--abm-error-light) !important;
        color: var(--abm-error-color) !important;
    }

    .equipos-autonomos-abm .status-reparacion {
        background: var(--abm-warning-light) !important;
        color: var(--abm-warning-color) !important;
    }

    .equipos-autonomos-abm .status-prueba-hidraulica {
        background: #F3E5F5 !important;
        color: #7B1FA2 !important;
    }

    .equipos-autonomos-abm .button-wrapper .ant-btn:not(.ant-btn-icon-only){
        border-color: transparent !important;
        color:#fff !important;
        border-radius:8px;
        font-weight:600;
        box-shadow:0 2px 8px rgba(255,107,53,.22);
        margin-top: 1rem;
        height: 40px !important;
        font-size: 16px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        gap: 6px !important;
        padding: 0 20px !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }

    .equipos-autonomos-abm .button-wrapper .ant-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4) !important;
    }
</style>

<div class="equipos-autonomos-abm">
    <div class="equipos-container fade-in">
        <Card Class="main-card">
            <div class="header-section">
                <div class="lava-bubbles">
                    <div class="lava-bubble b1"></div>
                    <div class="lava-bubble b2"></div>
                    <div class="lava-bubble b3"></div>
                    <div class="lava-bubble b4"></div>
                    <div class="lava-bubble b5"></div>
                </div>
                <div class="title-container">
                    <h1 class="main-title">
                        <Icon Type="safety" Class="title-icon" />
                        EQUIPOS AUTÓNOMOS
                    </h1>
                </div>
                <div class="filters-section">
                    <div class="actions-row">
                        <div class="search-container">
                            <Search Placeholder="Buscar por marca o modelo" WrapperStyle="width: 500px;" AllowClear EnterButton="true" @bind-Value="searchString" OnChange="() => this.Search(new ChangeEventArgs { Value = searchString })" Size="InputSize.Large" />
                        </div>
                        <div class="button-wrapper">
                            <Button OnClick="()=>ShowModalAgregar()" 
                                    Type="ButtonType.Primary"
                                    class="ant-btn"
                                    style="background-color: #4CAF50; border-color: #4CAF50;">
                                <Icon Type="plus" /> Nuevo Equipo Autónomo
                            </Button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="table-container">
                <Table DataSource="filteredEquiposAutonomos"
                       PageSize="10"
                       Responsive
                       TItem="EquipoAutonomoViewModel"
                       Loading="@loading"
                       ScrollX="800px">

                    <ColumnDefinitions Context="equipo">
                        <PropertyColumn Title="🔢 N° Serie"
                                        Property="e => e.NroSerie"
                                        Sortable
                                        Width="150px"
                                        Fixed="ColumnFixPlacement.Left" />

                        <PropertyColumn Title="🏷️ Marca"
                                        Property="e => e.Marca"
                                        Sortable
                                        Width="150px" />

                        <PropertyColumn Title="📱 Modelo"
                                        Property="e => e.Modelo"
                                        Sortable
                                        Width="150px" />

                        <PropertyColumn Title="🛠️ Tipo Material"
                                        Property="e => e.TipoMaterial"
                                        Sortable
                                        Width="180px" />

                        <PropertyColumn Title="📊 Estado"
                                        Property="e => e.Estado"
                                        Sortable
                                        Width="150px"
                                        Filters="EstadoFilter"
                                        OnFilter="((value,name)=>Enum.GetName(typeof(TipoEstadoEquipoAutonomo), name).StartsWith(Enum.GetName(typeof(TipoEstadoEquipoAutonomo), value)))">
                            <Template>
                                @{
                                    string statusClass = GetStatusClass(equipo.Estado);
                                    string icon = GetStatusIcon(equipo.Estado);
                                }
                                <Space>
                                    <Icon Type="@icon" />
                                    <span class="status-badge @statusClass">
                                        @GetEstadoDisplayName(equipo.Estado)
                                    </span>
                                </Space>
                            </Template>
                        </PropertyColumn>

                        <PropertyColumn Title="👤 Asignado a"
                                        Property="e => e.AsignadoA"
                                        Sortable
                                        Width="180px" />

                        <ActionColumn Title="⚙️ Acciones"
                                      Width="180px"
                                      Align=ColumnAlign.Center
                                      Fixed="ColumnFixPlacement.Right">
                            <Space>
                                <SpaceItem>
                                    <Popconfirm Title="¿Estás seguro que deseas borrar el equipo?"
                                                OnConfirm="()=>Delete(equipo.EquipoId)"
                                                OnCancel="Cancel"
                                                OkText="Si"
                                                CancelText="No">
                                        <Button Danger>
                                            <Icon Type="delete" />
                                        </Button>
                                    </Popconfirm>
                                </SpaceItem>
                                <SpaceItem>
                                    <Button Type="@ButtonType.Primary" OnClick="()=>ShowModalEditar(equipo.EquipoId)" Ghost>
                                        <Icon Type="edit" />
                                    </Button>
                                </SpaceItem>
                            </Space>
                        </ActionColumn>
                    </ColumnDefinitions>
                </Table>
            </div>
        </Card>
    </div>
</div>

<Modal Footer="null" Title="@("Nuevo Equipo Autónomo")"
       Visible="@_visibleAgregar"
       OnCancel="@HandleCancelAgregar"
       WrapClassName="modal-crear-equipo">
    <div class="modal-crear-equipo-content">
        <AgregarEquipoAutonomo OnFinishCallback="OnFinishAdd" />
    </div>
</Modal>

<Modal Title="@("Editar Equipo Autónomo")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       WrapClassName="modal-crear-equipo">
    <div class="modal-crear-equipo-content">
        <Form Loading="loading" Model="@EquipoAutonomoVM"

              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              @ref="@_form">

            <Row Class="modal-crear-equipo-row" Gutter="24">
                <AntDesign.Col Span="12">
                    <FormItem Label="Nro Serie" Class="modal-crear-equipo-form-item">
                        <Input DefaultValue="@EquipoAutonomoVM.NroSerie" @bind-Value="@EquipoAutonomoVM.NroSerie" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <FormItem Label="Marca" Class="modal-crear-equipo-form-item">
                        <Input DefaultValue="@EquipoAutonomoVM.Marca" @bind-Value="@EquipoAutonomoVM.Marca" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
            <Row Class="modal-crear-equipo-row" Gutter="24">
                <AntDesign.Col Span="12">
                    <FormItem Label="Modelo" Class="modal-crear-equipo-form-item">
                        <Input DefaultValue="@EquipoAutonomoVM.Modelo" @bind-Value="@EquipoAutonomoVM.Modelo" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <FormItem Label="Tipo Material" Class="modal-crear-equipo-form-item">
                        <Input DefaultValue="@EquipoAutonomoVM.TipoMaterial" @bind-Value="@EquipoAutonomoVM.TipoMaterial" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
            <Row Class="modal-crear-equipo-row" Gutter="24">
                <AntDesign.Col Span="24">
                    <FormItem Label="Estado" Class="modal-crear-equipo-form-item">
                        <EnumSelect DefaultValue="@EquipoAutonomoVM.Estado" TEnum="TipoEstadoEquipoAutonomo" @bind-Value="@EquipoAutonomoVM.Estado" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </Form>
    </div>
</Modal>

@code {
    private class EquipoAutonomoViewModel
    {
        public int EquipoId { get; set; }
        [Required, StringLength(255)]
        public string NroSerie { get; set; }
        public string? Marca { get; set; }
        public string? Modelo { get; set; }
        public string? TipoMaterial { get; set; }
        public TipoEstadoEquipoAutonomo Estado { get; set; }
        public int? VehiculoSalidaId { get; set; }
        public int? DependenciaId { get; set; }
        public string? AsignadoA => VehiculoSalidaNombre ?? DependenciaNombre;
        public string? VehiculoSalidaNombre { get; set; }
        public string? DependenciaNombre { get; set; }
    }

    List<EquipoAutonomoViewModel> EquiposAutonomosViewModel { get; set; } = new();
    private EquipoAutonomoViewModel EquipoAutonomoVM { get; set; } = new();
    
    private TableFilter<TipoEstadoEquipoAutonomo>[] EstadoFilter;
    
    private string searchString = "";
    private List<EquipoAutonomoViewModel>? filteredEquiposAutonomos;
    private bool loading = false;
    private bool _visible = false;
    private bool _visibleAgregar = false;
    private Form<EquipoAutonomoViewModel> _form;
    
    protected override async Task OnInitializedAsync()
    {
        await CargarEquiposAutonomos();
        filteredEquiposAutonomos = EquiposAutonomosViewModel;
        
        EstadoFilter = new TableFilter<TipoEstadoEquipoAutonomo>[Enum.GetValues(typeof(TipoEstadoEquipoAutonomo)).Length];
        int i = 0;
        foreach (TipoEstadoEquipoAutonomo value in Enum.GetValues(typeof(TipoEstadoEquipoAutonomo)))
        {
            EstadoFilter[i] = new() { Text = GetEstadoDisplayName(value), Value = value };
            i++;
        }
    }

    private async Task CargarEquiposAutonomos()
    {
        loading = true;
        try
        {
            using var context = DbFactory.CreateDbContext();
            var equipos = await context.EquiposAutonomos
                .Include(e => e.VehiculoSalida)
                .Include(e => e.Dependencia)
                .ToListAsync();

            EquiposAutonomosViewModel = equipos.Select(e => new EquipoAutonomoViewModel
                {
                    EquipoId = e.Id,
                    NroSerie = e.NroSerie,
                    Marca = e.Marca,
                    Modelo = e.Modelo,
                    TipoMaterial = e.TipoMaterial,
                    Estado = e.Estado,
                    VehiculoSalidaId = e.VehiculoSalidaId,
                    DependenciaId = e.DependenciaId,
                    VehiculoSalidaNombre = e.VehiculoSalida?.NumeroMovil,
                    DependenciaNombre = e.Dependencia?.NombreDependencia
                }).ToList();
        }
        catch (Exception ex)
        {
            await message.ErrorAsync($"Error al cargar equipos: {ex.Message}", 5);
        }
        finally
        {
            loading = false;
        }
    }

    private void Search(ChangeEventArgs e)
    {
        searchString = e.Value?.ToString()?.Trim()?.ToLower() ?? "";
        filteredEquiposAutonomos = EquiposAutonomosViewModel?
            .Where(e =>
                string.IsNullOrWhiteSpace(searchString) ||
                (e.Marca?.ToLower() ?? "").Contains(searchString) ||
                (e.Modelo?.ToLower() ?? "").Contains(searchString)
            )
            .ToList();
    }

    private string GetStatusClass(TipoEstadoEquipoAutonomo estado)
    {
        return estado switch
        {
            TipoEstadoEquipoAutonomo.Stock => "status-stock",
            TipoEstadoEquipoAutonomo.Activo => "status-activo",
            TipoEstadoEquipoAutonomo.Baja => "status-baja",
            TipoEstadoEquipoAutonomo.Reparacion => "status-reparacion",
            TipoEstadoEquipoAutonomo.PruebaHidraulica => "status-prueba-hidraulica",
            _ => "status-stock"
        };
    }

    private string GetStatusIcon(TipoEstadoEquipoAutonomo estado)
    {
        return estado switch
        {
            TipoEstadoEquipoAutonomo.Stock => "inbox",
            TipoEstadoEquipoAutonomo.Activo => "check-circle",
            TipoEstadoEquipoAutonomo.Baja => "close-circle",
            TipoEstadoEquipoAutonomo.Reparacion => "tool",
            TipoEstadoEquipoAutonomo.PruebaHidraulica => "experiment",
            _ => "inbox"
        };
    }

    private string GetEstadoDisplayName(TipoEstadoEquipoAutonomo estado)
    {
        return estado switch
        {
            TipoEstadoEquipoAutonomo.Stock => "Stock",
            TipoEstadoEquipoAutonomo.Activo => "Activo",
            TipoEstadoEquipoAutonomo.Baja => "Baja",
            TipoEstadoEquipoAutonomo.Reparacion => "Reparación",
            TipoEstadoEquipoAutonomo.PruebaHidraulica => "Prueba Hidráulica",
            _ => "Stock"
        };
    }

    private void ShowModalAgregar()
    {
        _visibleAgregar = true;
    }

    private void ShowModalEditar(int equipoId)
    {
        var equipo = EquiposAutonomosViewModel.FirstOrDefault(e => e.EquipoId == equipoId);
        if (equipo != null)
        {
            EquipoAutonomoVM = new EquipoAutonomoViewModel
            {
                EquipoId = equipo.EquipoId,
                NroSerie = equipo.NroSerie,
                Marca = equipo.Marca,
                Modelo = equipo.Modelo,
                TipoMaterial = equipo.TipoMaterial,
                Estado = equipo.Estado,
                VehiculoSalidaId = equipo.VehiculoSalidaId,
                DependenciaId = equipo.DependenciaId
            };
            _visible = true;
        }
    }

    private async Task Delete(int equipoId)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            var equipo = await context.EquiposAutonomos.FindAsync(equipoId);
            if (equipo != null)
            {
                context.EquiposAutonomos.Remove(equipo);
                await context.SaveChangesAsync();
                await message.SuccessAsync("Equipo eliminado correctamente.");
            }

            await CargarEquiposAutonomos();
            filteredEquiposAutonomos = EquiposAutonomosViewModel;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await message.ErrorAsync($"Error al eliminar: {ex.Message}", 5);
        }
    }

    private void HandleCancel(MouseEventArgs e) => _visible = false;
    private void HandleCancelAgregar(MouseEventArgs e) => _visibleAgregar = false;
    private async void HandleOk(MouseEventArgs e)
    {
        loading = true;
        try
        {
            using var context = DbFactory.CreateDbContext();

            var equipo = await context.EquiposAutonomos.FindAsync(EquipoAutonomoVM.EquipoId);
            if (equipo != null)
            {
                equipo.NroSerie = EquipoAutonomoVM.NroSerie;
                equipo.Marca = EquipoAutonomoVM.Marca;
                equipo.Modelo = EquipoAutonomoVM.Modelo;
                equipo.TipoMaterial = EquipoAutonomoVM.TipoMaterial;
                equipo.Estado = EquipoAutonomoVM.Estado;
                equipo.VehiculoSalidaId = EquipoAutonomoVM.VehiculoSalidaId;
                equipo.DependenciaId = EquipoAutonomoVM.DependenciaId;

                await context.SaveChangesAsync();
                await message.SuccessAsync("Equipo actualizado correctamente.");
            }

            _visible = false;
            await CargarEquiposAutonomos();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await message.ErrorAsync($"Error al actualizar: {ex.Message}", 5);
        }
        finally
        {
            loading = false;
        }
    }
    private void OnFinish(EditContext editContext) => _visible = false;
    private void OnFinishFailed(EditContext editContext) { }
    private async Task OnFinishAdd()
    {
        _visibleAgregar = false;
        await CargarEquiposAutonomos();
        StateHasChanged();
    }
    private void Cancel() => message.Error("Operación cancelada.");
}
