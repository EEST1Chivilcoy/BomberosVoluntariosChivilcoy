@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/Herramientas/Deposito"
@inject IMessageService message
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;

<style>
    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 1em;
        padding: 0;
        overflow: auto;
    }
</style>

<div class="template">
    <Table DataSource="MaterialesVM" Bordered Responsive Style="min-width: 320px!important;" PageSize="6">
            <ColumnDefinitions Context="muestra">
            <PropertyColumn Property="c=>c.FechaAlta" Title="Fecha de Alta" Format="dd/MM/yyyy" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.Descripcion" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.Rubro" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.Stock" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.Codigo" Sortable></PropertyColumn>
        </ColumnDefinitions>
        
    </Table>
    <div style="display: flex; justify-content: flex-start; min-width: 320px;">
        
        <Button Type="primary" OnClick="()=>ShowModalAgregar()" style="margin-right: 10px" >Cargar Material</Button>
         <Button Type="primary" @onclick="_=>open()">Movimientos de los Materiales</Button>
    </div>
</div>
    
<div>
    <Dropdown Class="notif-cont" Trigger="@(new Trigger[] { Trigger.Click })" Placement="Placement.BottomRight" Arrow Style="display: flex;width: fit-content;align-items: center;">
        <Overlay>
            <Menu Style="min-width:320px;max-width:600px;">
                <AgregarMaterial />
            </Menu>
        </Overlay>
    </Dropdown>
</div>

<div>
    @if(visibleDrawer == true){
        <Drawer Closable="true" Visible="visibleDrawer" Width="720" Placement="right" Title='("Movimientos")' OnClose="close">
             <MovimientoMaterialesVista />
        </Drawer>
    }
</div>

<Modal Footer="null" Title="@("Agregar Material")"
        Visible="@_visibleAgregar"
        OnOk="@HandleOkAgregar"
        OnCancel="@HandleCancelAgregar">
    <AgregarMaterial />
    <Button Style="margin-right: 100px !important; border: 1px solid black !important" OnClick="@HandleCancelAgregar">
        Volver
    </Button>
</Modal>


@code {
    BomberosDbContext Context;
    bool _visible;
    bool visibleDrawer = false;
    public class MaterialVM
    {
        [Required]
        public DateTime FechaAlta { get; set; }
        public string? Descripcion { get; set; }
        public string? Codigo { get; set; }
        public int Stock { get; set; }
        public TipoRubro Rubro { get; set; }
    }

    // variables locales
    public bool _visibleAgregar = false;
    List<MaterialVM> MaterialesVM = new ();


    public async Task CargarMaterial()
    {
        MaterialesVM.Clear();
        var Materiales = await Context.Materiales.ToArrayAsync();
        foreach (var m in Materiales)
        {
            MaterialVM materialVM = new()
                {
                    Codigo = m.Codigo,
                    Stock = m.Stock,
                    Rubro = m.Rubro,
                    Descripcion = m.Descripcion,
                    FechaAlta = m.FechaAlta
                };
            MaterialesVM.Add(materialVM);
            await Context.SaveChangesAsync();
            StateHasChanged(); 
        }
    }

    //Condicion Para la muestra de Materiales
    private async Task MaterialesActivo()
    {
        MaterialesVM = new();
        var materiales = await Context.Materiales.ToListAsync();
        foreach (var material in materiales)
        {
            MaterialVM materialVM = new ()
                {
                    FechaAlta = material.FechaAlta,
                    Descripcion = material.Descripcion,
                    Rubro = material.Rubro,
                    Codigo = material.Codigo,
                    Stock = material.Stock
                };
            MaterialesVM.Add(materialVM);
        }
        StateHasChanged();
    }


    private async void HandleOkAgregar(MouseEventArgs e)
    {
        _visibleAgregar = false;
    }
    void open()
    {
        this.visibleDrawer = true;
    }
    void close()
    {
        this.visibleDrawer = false;
        InvokeAsync(Init);
        StateHasChanged();
    }
    public async void HandleCancelAgregar(MouseEventArgs e)
    {
       
        _visibleAgregar = false;
        await Init();
    }
    public async void HandleCancel(MouseEventArgs e)
    {
        
        _visible = false;
        // await Init();
    }
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    // Aca agregamos los metodos creados orientado a vista
    private async Task Init()
    {
        MaterialesVM = new();
        Context = DbFactory.CreateDbContext();
        await MaterialesActivo();
    }

    private async void ShowModalAgregar()
    {
        _visibleAgregar = true;
        await Init();
    }


    public void Dispose()
    {
        Context?.Dispose();
    }

}