@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/Herramientas/Deposito"
@inject IMessageService message
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
<style>

</style>
<div style="margin-top: 2em; width: 80%; ">
    <Table DataSource="MaterialActivoVM" Bordered Responsive Style="min-width: 320px!important;" PageSize="6">
            <ColumnDefinitions Context="muestra">
                <PropertyColumn Property="c=>c.FechaAlta" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Descripcion" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Rubro" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Codigo" Sortable></PropertyColumn>
        </ColumnDefinitions>
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
        <Button Class="boton_p" OnClick="()=>ShowModalAgregar()">Cargar Material</Button>
    </div>

</div>
<div>
    <Dropdown Class="notif-cont" Trigger="@(new Trigger[] { Trigger.Click })" Placement="Placement.BottomRight" Arrow Style="display: flex;width: fit-content;align-items: center;">
        <Overlay>
            <Menu Style="min-width:320px;max-width:600px;">
                <AgregarMaterial />
            </Menu>
        </Overlay>
    </Dropdown>
</div>

<Modal Footer="null" Title="@("Agregar la Material")"
        Visible="@_visibleAgregar"
        OnOk="@HandleOkAgregar"
        OnCancel="@HandleCancelAgregar">
    <AgregarMaterial />
    <Button Style="margin-right: 100px !important; border: 1px solid black !important" OnClick="@HandleCancelAgregar">
        Volver
    </Button>
</Modal>
@code {
    BomberosDbContext Context;


    public class MaterialVM
    {
        public int MaterialID { get; set; }
        public DateTime FechaAlta { get; set; }
        public string? Descripcion { get; set; }
        public string? Codigo { get; set; }
        public int? Stock { get; set; }
        public TipoRubro Rubro { get; set; }
        MaterialVM MaterialVista { get; set; } = new();
    }

    public bool _visibleAgregar = false;

    List<MaterialVM> MaterialActivoVM = new List<MaterialVM>();



    public async Task CargarMaterial()
    {
        MaterialActivoVM.Clear();
        var Materiales = await Context.Materiales.ToArrayAsync();
        foreach (var m in Materiales)
        {
            MaterialVM materialVM = new()
                {
                    Codigo = m.Codigo,
                    Stock = m.Stock,
                    Rubro = m.Rubro,
                    Descripcion = m.Descripcion,
                    FechaAlta = m.FechaAlta
                };
            MaterialActivoVM.Add(materialVM);
            await Context.SaveChangesAsync();
            StateHasChanged();
        }
    }


    private async Task DepositoActivo()
    {
        MaterialActivoVM.Clear();
        var materiales = await Context.Materiales.ToListAsync();
        foreach (var material in materiales)
        {
            MaterialVM materialVM = new MaterialVM
                {
                    FechaAlta = material.FechaAlta,
                    Descripcion = material.Descripcion,
                    Rubro = material.Rubro,
                    Codigo = material.Codigo,
                    Stock = material.Stock
                };
            MaterialActivoVM.Add(materialVM);
        }
        StateHasChanged();
    }









    private async void HandleOkAgregar(MouseEventArgs e)
    {
        _visibleAgregar = false;
    }
    public async void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregar = false;
        await Init();
    }


    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        MaterialActivoVM = new();
        Context = DbFactory.CreateDbContext();
    }

    private async void ShowModalAgregar()
    {
        _visibleAgregar = true;
        await Init();
    }


    public void Dispose()
    {
        Context?.Dispose();
    }

}