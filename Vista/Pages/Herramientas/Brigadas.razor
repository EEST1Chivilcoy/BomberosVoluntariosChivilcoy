@page "/Herramientas/Brigadas"
@using Vista.Services;
@inject IBrigadaService BrigadaService;


@using AntDesign
@using AntDesign.TableModels
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory

<style>

  
    .ant-table-wrapper {
        width: 40em !important;
    }

    .footer-brigadas{
        background-color: #820014;
        padding: 10px;
        margin-top: auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 0 0 10px 10px;
    }

    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        margin: 1em;
        padding: 0;
        overflow: auto;
    }

        .template .column {
            flex: 1;
            border-radius: 10px;
            margin: 10px;
            border: 1px solid #ccc;
        }

    .lista{
        border-radius: 10px;
        padding: 10px;
        margin: 10px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 55px;
        margin-bottom: 20px;
    }

        .lista.brigada {
            background-color: #A63336;
            cursor: pointer;
            color: white;
            font-weight: bold;
        }

        .lista.bombero{
            border: 1px solid #ccc;
            cursor: grab;
        }
        
            .lista.bombero:active {
                cursor: grabbing;
            }

    .brigada:hover{
        border-color: red;
    }

    .red-heading {
        background-color: #820014;
        color: white;
        text-align: center;
        border-radius: 10px 10px 0 0; /* Ajusta los bordes circulares según tus necesidades */
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
    }

</style>


@*--------------------------------------------------------------------------Modal Eliminar---------------------------------------------------------------------------------*@



<div class="template" style="display: flex; justify-content: space-between;">
    <div class="column" style="flex: 2; display: flex; flex-direction: column;">
        <!-- Lista de brigadas -->
        <h3 class="red-heading">Brigadas</h3>
        <div style="flex: 1; overflow-y: auto; min-height: 0;">
            <div class="brigadas-container">
                @if (brigadas != null)
                {
                    @foreach (var brigada in PagedBrigadas.Take(5))
                    {
                        <div class="lista brigada"
                             @onclick="() => SelectBrigada(brigada.BrigadaId)"
                             @ondrop="@(e => OnDrop(e, brigada.BrigadaId))"
                             @ondragover:preventDefault
                             @ondragover="OnDragOver"
                             @ondragleave="OnDragLeave">
                            @brigada.Nombre
                        </div>
                    }
                }
            </div>
        </div>
        <div class="footer-brigadas">
            <!-- Controles de paginación -->
            @if (totalItems > 5)
            {
                <div>
                    <Pagination Total="@totalItems" PageSize="5" CurrentPageIndex="@currentPage" OnChange="@OnPageChange" />
                </div>
            }
            else
            {
                <div></div> <!-- Espacio vacío para mantener el layout -->
            }
                

            <!-- Botón para mostrar modal de agregar brigada -->
            <div>
                <Button Type="@ButtonType.Primary" OnClick="@ShowModalEliminar" Style="background-color: #732D2D; color:white; border-color:#732D2D !important">Eliminar Brigada</Button>
                <Button Type="@ButtonType.Primary" OnClick="@ShowModalAgregar" Style="background-color: #1890ff; border-color: #1890ff;">Agregar Brigada</Button>
            </div>
        </div>
    </div>
    <div class="column" style="flex: 1; display: flex; flex-direction: column;">
        <!-- Lista de bomberos sin brigada -->

        <h3 class="red-heading">
            @if (selectedBrigadaId == null)
            {
                <span>Bomberos sin Brigada</span>
            }
            else
            {
                <span>Bomberos de la Brigada @selectedBrigadaName</span>
            }
        </h3>

        <div style="flex: 1; overflow-y: auto; min-height: 0;">
            @if (selectedBrigadaId == null)
            {
                @if (PagedBomberosSinBrigada != null && PagedBomberosSinBrigada.Any())
                {
                    @foreach (var bombero in PagedBomberosSinBrigada)
                    {
                        <div class="lista bombero" draggable="true" @ondragstart="@(e => OnDragStart(e, bombero.NumeroLegajo))">
                            @bombero.Apellido @bombero.Nombre
                        </div>
                    }
                }
                else
                {
                    <p>No hay bomberos sin brigada disponibles.</p>
                }
            }
            else
            {
                @if (PagedBomberosEnBrigada != null && PagedBomberosEnBrigada.Any())
                {
                    @foreach (var bombero in PagedBomberosEnBrigada)
                    {
                        <div class="lista bombero" draggable="false" cursor="pointer">
                            @bombero.Apellido @bombero.Nombre
                            <Button Type="submit" @onclick="() => RemoveBomberoFromBrigada(bombero.NumeroLegajo)" Style="margin-left: 10px; color:red">
                                Eliminar
                            </Button>
                        </div>
                    }
                }
                else
                {
                    <p style="font-size: 20px">No hay bomberos en esta brigada.</p>
                }
            }
        </div>
        <div class="footer-brigadas">
            @if (selectedBrigadaId == null){
                <Pagination Total="@totalBomberosSinBrigada" PageSize="@pageSizeBomberos" CurrentPageIndex="@currentPageBomberos" OnChange="@OnPageChange" />
            }
            else
            {
                <Pagination Total="@totalBomberosEnBrigada" PageSize="@pageSizeBomberos" CurrentPageIndex="@currentPageBomberos" OnChange="@OnPageChange" />
                <Button Type="@ButtonType.Link" OnClick="@ClearSelectedBrigada" Style="color:white; font-weight:bold;">Volver a Bomberos sin Brigada</Button>
            }
            
            
        </div>

    </div>
    <!-- Modal Agregar Brigada -->
    <Modal Title="@("Agregar Brigada")"
           Visible="@_visibleAgregar"
           OnOk="@HandleOkAgregar"
           OnCancel="@HandleCancelAgregar">
        <Form Loading="loading" Model="@brigadaVM"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailedAgregar"
              @ref="@_formAgregar">
            <FormItem Label="Nombre Brigada">
                <Input @bind-Value="@brigadaVM.nombreBrigada" />
            </FormItem>
        </Form>
    </Modal>

    <!-- Modal Eliminar Brigada -->

    <Modal Title="@("Agregar Brigada")"
           Visible="@_visibleEliminar"
           OnOk="@HandleOkEliminar"
           OnCancel="@HandleCancelEliminar">
        <Form Loading="loading" Model="@brigadaVM"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinishEliminar"
              OnFinishFailed="OnFinishFailedEliminar"
              @ref="@_formEliminar">
            <FormItem Label="Nombre Brigada">
                <Select TItem="Brigada"
                        TItemValue="string"
                        DataSource="@brigadas"
                        @bind-Value="@BrigadaEliminar"
                        DefaultValue="@("Elegir Brigada")"
                        ValueName="@nameof(Brigada.Nombre)"
                        LabelName="@nameof(Brigada.Nombre)"
                        Style="width:120px"
                        OnSelectedItemChanged="OnSelectedItemChangedHandler">
                </Select>
            </FormItem>
        </Form>
    </Modal>
</div>


@*------------------------------------------------------------------------Fin Brigadas-----------------------------------------------------------------------------------------*@

@code {

    private BrigadaViewModel brigadaVM = new BrigadaViewModel();
    List<Bombero>? bomberos = new List<Bombero>();//lo hago con lista porque no me deja usar el buscador en OnChange por pasar valores nulos
    List<Bombero>? bomberosRespaldo = new List<Bombero>();
    List<string>? bomberosFiltro = new List<string>();
    List<Bombero>? bomberosSinBrigada = new List<Bombero>();
    private bool busquedaVacia = true;


    private Brigada BrigadaNueva { get; set; } = new();


    private Brigada[]? brigadas;
    private string BrigadaEliminar { get; set; }
    private TableFilter<string>[] nameFilters;
    string searchString;
    IEnumerable<Bombero> dataSource;
    ITable _table;

    private int? draggedBomberoId;

    private List<Bombero> bomberosFiltrados = new List<Bombero>();

    private void getDatosMostrarBombero()
    {
        foreach (Bombero b in bomberos)
        {
            bomberosFiltro.Add(b.Nombre);
        }
    } @*<-- Filtrado de Bomberos???*@

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        brigadas = await db.Brigadas.ToArrayAsync();
        bomberos = await db.Bomberos.ToListAsync();

        // Cargar bomberos sin brigada
        bomberosSinBrigada = bomberos.Where(b => b.BrigadaId == null).ToList();

        StateHasChanged();
    }


  


    // Brigadas Bomberos Test

    private int? selectedBrigadaId;
    private string selectedBrigadaName;
    private List<Bombero> BomberosEnBrigadaSeleccionada = new List<Bombero>();
    private int totalBomberosEnBrigada;
    private List<Bombero> PagedBomberosEnBrigada { get; set; } = new List<Bombero>();

    private void SelectBrigada(int brigadaId)
    {
        selectedBrigadaId = brigadaId;
        var brigada = brigadas.FirstOrDefault(b => b.BrigadaId == brigadaId);
        if (brigada != null)
        {
            selectedBrigadaName = brigada.Nombre;
            // Aquí deberías cargar los bomberos de la brigada seleccionada
            // Esto es un ejemplo, deberás adaptarlo a tu lógica de carga de datos
            LoadBomberosEnBrigada(brigadaId);
        }
    }

    private void ClearSelectedBrigada()
    {
        selectedBrigadaId = null;
        selectedBrigadaName = null;
        BomberosEnBrigadaSeleccionada.Clear();
    }

    private List<Bombero> GetBomberosByBrigadaId(int brigadaId)
    {
        return bomberos.Where(b => b.BrigadaId == brigadaId).ToList();
    }

    private async Task LoadBomberosEnBrigada(int brigadaId)
    {
        try
        {
            // Asumimos que tienes un servicio inyectado llamado _bomberoService
            var result = GetBomberosByBrigadaId(brigadaId);

            if (result != null)
            {
                BomberosEnBrigadaSeleccionada = result.ToList();
                totalBomberosEnBrigada = BomberosEnBrigadaSeleccionada.Count;

                // Reiniciar la paginación
                currentPageBomberos = 1;

                // Actualizar la lista paginada
                UpdatePagedBomberosEnBrigada();
            }
            else
            {
                BomberosEnBrigadaSeleccionada = new List<Bombero>();
                totalBomberosEnBrigada = 0;
            }
        }
        catch (Exception ex)
        {
            // Manejar el error, por ejemplo:
            Console.WriteLine($"Error al cargar bomberos de la brigada: {ex.Message}");
            // Podrías también mostrar un mensaje de error al usuario
            // await _messageService.Error("No se pudieron cargar los bomberos de la brigada.");
        }
    }

    private void UpdatePagedBomberosEnBrigada()
    {
        PagedBomberosEnBrigada = BomberosEnBrigadaSeleccionada
            .Skip((currentPageBomberos - 1) * pageSizeBomberos)
            .Take(pageSizeBomberos)
            .ToList();
    }

    // -- Fin --



    // Paginacion
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalItems => brigadas?.Count() ?? 0;
    private List<Brigada> PagedBrigadas => brigadas?.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList() ?? new List<Brigada>();

    private void OnPageChange(PaginationEventArgs args)
    {
        currentPage = args.Page;
    }

    // Paginacion Bomberos

    private List<Bombero> PagedBomberosSinBrigada => bomberosSinBrigada
    .Skip((currentPageBomberos - 1) * pageSizeBomberos)
    .Take(pageSizeBomberos)
    .ToList();

    private int currentPageBomberos = 1;
    private int pageSizeBomberos = 5; // Ajusta este valor según tus necesidades
    private int totalBomberosSinBrigada => bomberosSinBrigada?.Count ?? 0;

    private void OnDragLeave()
    {

    }

    private void OnDragStart(DragEventArgs e, int bomberoId)
    {
        draggedBomberoId = bomberoId;
        e.DataTransfer.EffectAllowed = "move";
        e.DataTransfer.DropEffect = "move";
    }

    private void OnDragOver(DragEventArgs e)
    {

    }

    private async Task OnDrop(DragEventArgs e, int brigadaId)
    {
        if (draggedBomberoId.HasValue)
        {
            try
            {
                await AssignBomberoToBrigada(draggedBomberoId.Value, brigadaId);
                Console.WriteLine($"Bombero asignado a la brigada con ID {brigadaId} correctamente.");

                // Actualizar las listas locales
                await UpdateLocalLists(draggedBomberoId.Value, brigadaId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al asignar bombero a brigada: {ex.Message}");
            }
        }

        draggedBomberoId = null;
        StateHasChanged();
    }

    private async Task UpdateLocalLists(int bomberoId, int brigadaId)
    {
        // Remover el bombero de la lista de bomberos sin brigada
        var bombero = bomberosSinBrigada.FirstOrDefault(b => b.NumeroLegajo == bomberoId);
        if (bombero != null)
        {
            bomberosSinBrigada.Remove(bombero);
            bombero.BrigadaId = brigadaId;

            // Actualizar la lista de brigadas si es necesario
            var brigada = brigadas.FirstOrDefault(b => b.BrigadaId == brigadaId);
            if (brigada != null && brigada.Bomberos != null)
            {
                brigada.Bomberos.Add(bombero);
            }
        }

        // Recargar los datos si es necesario
        await OnInitializedAsync();
    }

    private async Task<Bombero> AssignBomberoToBrigada(int bomberoId, int brigadaId)
    {
        using (var db = DbFactory.CreateDbContext())
        {
            var bombero = await db.Bomberos.FirstOrDefaultAsync(b => b.NumeroLegajo == bomberoId);
            if (bombero == null)
            {
                Console.WriteLine($"Bombero con ID {bomberoId} no encontrado.");
                return null;
            }

            var brigada = await db.Brigadas.FindAsync(brigadaId);
            if (brigada == null)
            {
                Console.WriteLine($"Brigada con ID {brigadaId} no encontrada.");
                return null;
            }

            bombero.BrigadaId = brigadaId;
            db.Update(bombero);
            await db.SaveChangesAsync();

            Console.WriteLine($"Bombero {bombero.Nombre} asignado a la brigada {brigada.Nombre} correctamente.");
            return bombero;
        }
    }


    public async void CrearBrigada()
    {
        if (!string.IsNullOrWhiteSpace(brigadaVM.nombreBrigada))
        {
            using var db = await DbFactory.CreateDbContextAsync();

            // Verificar si ya existe una brigada con el mismo nombre
            bool existeBrigada = await db.Brigadas
                .AnyAsync(b => b.Nombre == brigadaVM.nombreBrigada);

            if (existeBrigada)
            {
                Console.WriteLine($"Error: Ya existe una brigada con el nombre '{brigadaVM.nombreBrigada}'.");
                return;
            }

            Brigada brigada = new()
                {
                    Nombre = brigadaVM.nombreBrigada
                };

            await db.Brigadas.AddAsync(brigada);
            await db.SaveChangesAsync();

            brigadaVM.nombreBrigada = string.Empty;
            await OnInitializedAsync(); // Actualiza los datos
            StateHasChanged();
        }
    }


    //eliminar una brigada segun el nombre
    public async Task EliminarBrigada()
    {
        if (string.IsNullOrEmpty(BrigadaEliminar))
        {
            Console.WriteLine("Error: Nombre de brigada para eliminar no proporcionado.");
            return;
        }
        try
        {
            using var db = DbFactory.CreateDbContext();
            Brigada? brigada = await db.Brigadas.Where(b => b.Nombre == BrigadaEliminar).SingleOrDefaultAsync();
            if (brigada is not null)
            {
                await BrigadaService.EliminarBrigada(brigada);
                Console.WriteLine($"Brigada '{BrigadaEliminar}' eliminada exitosamente.");
            }
            else
            {
                Console.WriteLine($"Error: Brigada con nombre '{BrigadaEliminar}' no encontrada.");
            }
            BrigadaEliminar = string.Empty;
            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar la brigada: {ex.Message}");
        }
    }


    private class BrigadaViewModel
    {
        public string nombreBrigada { get; set; }
        public string nombreBombro { get; set; }
        public EscalafonJerarquico Grado { get; set; }

    }

    // Eliminar un bombero de la brigada 

    private async Task RemoveBomberoFromBrigada(int bomberoId)
    {
        try
        {
            using var db = await DbFactory.CreateDbContextAsync();

            // Buscar el bombero en la base de datos
            var bombero = await db.Bomberos.FirstOrDefaultAsync(b => b.NumeroLegajo == bomberoId);
            if (bombero == null)
            {
                Console.WriteLine($"Bombero con ID {bomberoId} no encontrado.");
                return;
            }

            // Eliminar el bombero de la brigada
            bombero.BrigadaId = null;
            db.Bomberos.Update(bombero);
            await db.SaveChangesAsync();

            // Actualizar las listas locales
            await UpdateLocalListsAfterRemoval(bomberoId);

            Console.WriteLine($"Bombero {bombero.Nombre} eliminado de la brigada correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el bombero de la brigada: {ex.Message}");
        }
    }

    private async Task UpdateLocalListsAfterRemoval(int bomberoId)
    {
        // Actualizar la lista de bomberos sin brigada
        var bombero = bomberos.FirstOrDefault(b => b.NumeroLegajo == bomberoId);
        if (bombero != null)
        {
            // Añadir el bombero a la lista de bomberos sin brigada
            bomberosSinBrigada.Add(bombero);

            // Eliminar el bombero de la lista de bomberos en la brigada
            if (selectedBrigadaId.HasValue)
            {
                BomberosEnBrigadaSeleccionada.Remove(bombero);
            }
        }

        // Recargar las listas si es necesario
        await OnInitializedAsync();
    }
}
@code {

    #region original form coding
    private void OnFinishFailedAgregar(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(brigadaVM)}");
    }

    private void OnFinishFailedEliminar(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(brigadaVM)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    #endregion

    #region Modal Agregar

    bool _visibleAgregar = false;

    private void ShowModalAgregar()
    {
        _visibleAgregar = true;
    }

    private void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visibleAgregar = false;
    }



    /*
    * Careful!
    *
    * next bind submit event to modal OK button
     */

    private Form<BrigadaViewModel> _formAgregar;

    /// <summary>
    /// when form is submited, close the modal
    /// </summary>
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visibleAgregar = false;
    }

    /// <summary>
    /// on modal OK button is click, submit form manually
    /// </summary>
    /// <param name="e"></param>
    private void HandleOkAgregar(MouseEventArgs e)
    {
        //_form.Submit();
        CrearBrigada();
        _visibleAgregar = false;

    }
    #endregion

    #region Modal Eliminar

    bool _visibleEliminar = false;

    private void ShowModalEliminar()
    {
        _visibleEliminar = true;
    }

    private void HandleCancelEliminar(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visibleEliminar = false;
    }

    private Form<BrigadaViewModel> _formEliminar;

    private void OnFinishEliminar(EditContext editContext)
    {
        Console.WriteLine("e");
        _visibleEliminar = false;
    }

    private void HandleOkEliminar(MouseEventArgs e)
    {
        //_form.Submit();
        EliminarBrigada();
        _visibleEliminar = false;

    }
    private void OnSelectedItemChangedHandler(Brigada value)
    {
        Console.WriteLine($"selected: ${value?.Nombre}");
    }
    #endregion

    @*void OnChange(QueryModel<Bombero> query)
    {
        Console.WriteLine(JsonSerializer.Serialize(query));

        dataSource = query.ExecuteQuery(bomberos.AsQueryable())
            .Where(x => string.IsNullOrWhiteSpace(searchString) || x.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || x.Brigada.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }*@

    private void search(string value)
    {
        int number;

        bomberosFiltrados = bomberos.Where(d =>
        d.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) ||
        d.Brigada.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase)).ToList();
        if (int.TryParse(value, out number))
        {
            bomberosFiltrados = bomberos.Where(d =>
            d.NumeroLegajo.Equals(number)).ToList();
        }
        bomberos = bomberosFiltrados;

    }
    private void UpdateSearchStatus()
    {
        busquedaVacia = string.IsNullOrWhiteSpace(searchString);
        if (busquedaVacia) bomberos = bomberosRespaldo;


        //QueryModel<Bombero> query = new QueryModel<Bombero>
        //    {
        //        Filters = new List<QueryFilter>(),
        //        SortField = "Nombre",
        //        SortOrder = SortDirection.Ascending,
        //        PageIndex = 1,
        //        PageSize = 10
        //    };
        //Console.WriteLine(JsonSerializer.Serialize(query));
        //busquedaVacia = string.IsNullOrWhiteSpace(searchString);
        //dataSource = query.ExecuteQuery(bomberos.AsQueryable())
        //   .Where(x => string.IsNullOrWhiteSpace(searchString));
        //if (busquedaVacia)
        //{
        //    QueryModel<Bombero> query;
        //    query.FilterModel.
        //    bomberos = bomberosRespaldo;
        //}

    }
    //public RealTimeQueryModel<TableRow> queryModel = new RealTimeQueryModel<TableRow>(1, 10, 0, new List<ITableSortModel>(), new List<ITableFilterModel>());
    //public class RealTimeQueryModel<TItem> : QueryModel<TItem>
    //{
    //    private string searchValue;

    //    public string SearchValue
    //    {
    //        get => searchValue;
    //        set
    //        {
    //            if (searchValue != value)
    //            {
    //                searchValue = value;
    //                OnSearchValueChanged();
    //            }
    //        }
    //    }

    //    public IList<ITableFilterModel> FilterModel { get; set; }

    //    //public RealTimeQueryModel(int pageIndex, int pageSize, int startIndex)
    //    //: base(pageIndex, pageSize, startIndex)
    //    //{
    //    //    searchValue = string.Empty;
    //    //}

    //    public RealTimeQueryModel(int pageIndex, int pageSize, int startIndex, IList<ITableSortModel> sortModel, IList<ITableFilterModel> filterModel)
    //        : base(pageIndex, pageSize, startIndex, sortModel, filterModel)
    //    {
    //        searchValue = string.Empty;
    //        //FilterModel = filterModel;
    //    }

    //    public void OnSearchValueChanged()
    //    {

    //        FilterModel = new List<ITableFilterModel>();
    //        if (!string.IsNullOrEmpty(SearchValue))
    //        {
    //            var filter = new FilterModel<string>(-1, "", new List<string>(), new List<TableFilter>
    //        {
    //            new TableFilter
    //            {
    //                Text = SearchValue,
    //                Value = SearchValue
    //            }
    //        });
    //            FilterModel.Add(filter);
    //        }
    //        brigada
    //    }
    //}



}

