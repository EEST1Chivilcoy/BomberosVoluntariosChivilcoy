@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/Herramientas/Comunicacion"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json
@using Microsoft.EntityFrameworkCore.Metadata.Internal;
@using Vista.Data.ViewModels.Personal;

<div style="margin-top: 2em;">
    <Table DataSource="ComunicacionesViewModel" Bordered
        @bind-SelectedRows="selectedRows"
        Total="_total"
        @bind-PageIndex="_pageIndex"
        @bind-PageSize="_pageSize">

        <TitleTemplate>
            <GridRow>
                <GridCol Style="width: 100% !important;flex: none !important;display: flex; justify-content: space-between; max-width:none;" Span="4">
                    <Title Level="3">Comunicaciones</Title>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Property="c => c.NroEquipo"
                            DefaultSortOrder="@SortDirection.Descending"
                            SorterCompare="@((a, b) => string.Compare(a, b))"/>
            <PropertyColumn Property="c=>c.Modelo" Sortable/>
            <PropertyColumn Property="c=>c.Marca" Sortable />
            <PropertyColumn Property="c=>c.NroSerie" />
            <PropertyColumn Property="b=>b.Nombre"  />
            <PropertyColumn Property="b=>b.Apellido" Sortable />
            <ActionColumn Title="Action">
                <Space>
                    <SpaceItem>
                        <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro que deseas borrar el handie?"
                                    OnConfirm="()=>Delete(context.NroEquipo)"
                                    OnCancel="Cancel">
                            <Button Danger>
                                Eliminar
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro que deseas desasignar el bombero?"
                                    OnConfirm="()=>Desasignar(context.NroEquipo)"
                                    OnCancel="Cancel">
                            <Button Danger>
                                Desasignar
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                    @*<SpaceItem><Button Danger OnClick="()=>Delete(context.NroEquipo)">Delete</Button></SpaceItem>
                    <SpaceItem><Button Danger OnClick="()=>Desasignar(context.NroEquipo)">Desasignar</Button></SpaceItem>*@
                    <SpaceItem><Button Type="primary" OnClick="()=>ShowModalEditar(context.NroEquipo)">Editar</Button></SpaceItem>
                </Space>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
        <Button OnClick="()=>ShowModalAgregar()">Agregar Handie</Button>
    </div>
    
</div>

<Modal Footer="null" Title="@("Comunicacion")"
       Visible="@_visibleAgregar"
       OnOk="@HandleOkAgregar"
       OnCancel="@HandleCancelAgregar">
       <AgregarComunicacion/>
       <Button Style="margin-right: 134px !important;" Type="@ButtonType.Primary" OnClick="@HandleCancelAgregar">
            Volver
       </Button>
</Modal>
 
<Modal Title="@("Comunicacion")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@ComunicacionVM"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form">

        <FormItem Label="Nro Equipo">
            <Input DefaultValue="@ComunicacionVM.NroEquipo" @bind-Value="@ComunicacionVM.NroEquipo" />
        </FormItem>
        <FormItem Label="Modelo">
            <Input DefaultValue="@ComunicacionVM.Modelo" @bind-Value="@ComunicacionVM.Modelo" />
        </FormItem>
        <FormItem Label="Nro Equipo">
            <Input DefaultValue="@ComunicacionVM.Marca" @bind-Value="@ComunicacionVM.Marca" />
        </FormItem>
        <FormItem Label="Nro Serie">
            <Input DefaultValue="@ComunicacionVM.NroSerie" @bind-Value="@ComunicacionVM.NroSerie" />
        </FormItem>
        <FormItem Label="Estado">
            <EnumSelect DefaultValue="@ComunicacionVM.Estado" TEnum="TipoEstadoHandie" @bind-Value="@ComunicacionVM.Estado" />
        </FormItem>
        <div>
            <FormItem Label="Elija el bombero que sera asignado">
                <Select TItem="BomberoViewModel"
                        TItemValue="int"
                        DataSource="@BomberosVM"
                        @bind-Value="@ComunicacionVM.NroLegajo"
                        LabelName="@nameof(bomberosViewModel.NombreYApellido)"
                        ValueName="@nameof(bomberosViewModel.NumeroLegajo)"
                        Placeholder="Selecione a un bombero"
                        DefaultActiveFirstOption="false"
                        EnableSearch
                        AllowClear="true">
                </Select>
            </FormItem>
        </div>
    </Form>
</Modal>

@code {



    private class ComunicacionViewModel
    {

        public int EquipoId { get; set; }
        [Required, StringLength(255)]
        public string NroEquipo { get; set; }
        public string? Modelo { get; set; }
        public string? Marca { get; set; }
        public string? NroSerie { get; set; }
        public TipoEstadoHandie Estado { get; set; }
        public int NroLegajo { get; set; }
        public Bombero? Bombero { get; set; }
        public string? Nombre = " ";
        public string? Apellido = " ";
    }

    private class BomberoViewModel
    {
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public int? NumeroLegajo { get; set; }
        public int? EquipoId { get; set; }
        public string? NombreYApellido { get { return Nombre + ", " + Apellido; } }
        public Comunicacion? Handie { get; set; }
    }


    string searchString;
    IEnumerable<ComunicacionViewModel> selectedRows;


    List<Comunicacion>? comunicaciones { get; set; } = new();

    List<Bombero> bomberos { get; set; } = new List<Bombero>();

    private ComunicacionViewModel ComunicacionVM { get; set; } = new();

    List<ComunicacionViewModel> ComunicacionesViewModel { get; set; } = new();

    private BomberoViewModel bomberosViewModel = new BomberoViewModel();
    List<BomberoViewModel> BomberosVM { get; set; } = new();
    BomberosDbContext Context { get; set; }

    int _pageIndex = 1;
    int _pageSize = 6;
    int _total = 0;


    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        ComunicacionVM = new();
        bomberosViewModel = new();
        Context = DbFactory.CreateDbContext();
        await CargarComunicacionVM();
        await CargarBomberoViewModel();
    }


    public async Task CargarComunicacionVM()
    {
        ComunicacionesViewModel.Clear();
        var bomberos = await Context.Bomberos.ToArrayAsync();
        var comunicacionesDB = await Context.Comunicacion.ToListAsync();

        foreach (Comunicacion c in comunicacionesDB)
        {
            ComunicacionViewModel comunicacion = new()
                {
                    NroEquipo = c.NroEquipo,
                    Marca = c.Marca,
                    Modelo = c.Modelo,
                    NroSerie = c.NroSerie,
                    Estado = c.Estado,
                    Nombre = c.Bombero?.Nombre,
                    Apellido = c.Bombero?.Apellido
                };
            ComunicacionesViewModel.Add(comunicacion);
        }

    }
    public async Task CargarBomberoViewModel()
    {
        BomberosVM = new();
        var bomberos = await Context.Bomberos.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel bomberoVM = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo,
                    EquipoId = b.EquipoId,
                };
            BomberosVM.Add(bomberoVM);
        }
    }

    void OnRowClick(RowData<ComunicacionViewModel> row)
    {
        Console.WriteLine($"row {row.Data.NroEquipo} was clicked");
    }//Toma el valor del valor de la fila seleccionada

    private async Task OnChange(QueryModel<ComunicacionViewModel> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
        //dataSource = queryModel.ExecuteQuery(bomberos.AsQueryable())
        //    .Where(x => string.IsNullOrWhiteSpace(searchString) || x.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase));
        //arreglar busqueda-----------------------------------------------------------------------------------------------------------------------------------------
        await Init();
    }

    public void RemoveSelection(string NroEquipoBorrar)
    {
        var selected = selectedRows.Where(x => x.NroEquipo != NroEquipoBorrar);
        selectedRows = selected;
    }

    private async Task Delete(string NroEquipoBorrar)
    {     
        try
        {
            Comunicacion? comunicacion = await Context.Comunicacion.FirstOrDefaultAsync(c => c.NroEquipo == NroEquipoBorrar);
            Context.Remove(comunicacion);
            ComunicacionesViewModel = ComunicacionesViewModel.Where(x => x.NroEquipo != NroEquipoBorrar).ToList();
            _total = ComunicacionesViewModel.Count;
            await Context.SaveChangesAsync();
            await Init();
            StateHasChanged();
            await message.Success("Handie elminado correctamente");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }

    }
    private async Task Desasignar(string NroEquipoDesasignar)
    {
        try
        {
            Bombero? bombero = await Context.Bomberos
            .Include(b => b.Handie) // Incluye la entidad relacionada Handie en la consulta
            .Where(x => x.Handie.NroEquipo == NroEquipoDesasignar)
            .SingleOrDefaultAsync();

            if (bombero != null)
            {
                bombero.Handie = null; // Desvincula la entidad relacionada Handie
                await Context.SaveChangesAsync();
            }
            await Init();
            StateHasChanged();
            await message.Success("Bombero desasignado correctamente");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }

    }

    private async void EditarBombero(string NroEquipoEdit)
    {
        try
        {
            Comunicacion? comunicacion = await Context.Comunicacion.SingleOrDefaultAsync(b => b.NroEquipo == NroEquipoEdit);
            Bombero? bombero = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == ComunicacionVM.NroLegajo);

            comunicacion.NroEquipo = ComunicacionVM.NroEquipo;
            comunicacion.Modelo = ComunicacionVM.Modelo;
            comunicacion.Marca = ComunicacionVM.Marca;
            comunicacion.NroSerie = ComunicacionVM.NroSerie;
            comunicacion.Estado = ComunicacionVM.Estado;
            comunicacion.Bombero = bombero;
            await Context.SaveChangesAsync();
            await Init();
            StateHasChanged();
            await message.Success("Handie editado correctamente");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }

    }

    string NroEquipoEdit;
    private void ShowModalEditar(string NroEquipo)
    {
        NroEquipoEdit = NroEquipo;
        GetComunicacionViewModel(NroEquipo);
        _visible = true;
    }
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(ComunicacionVM)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    bool _visibleAgregar = false;


    private void ShowModalAgregar()
    {
        _visibleAgregar = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visible = false;
    }


    private async void HandleOkAgregar(MouseEventArgs e)
    {
        _visibleAgregar = false;
    }
    public void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregar = false;
    }

    private Form<ComunicacionViewModel> _form;
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visible = false;
    }

    private async void HandleOk(MouseEventArgs e)
    {
        EditarBombero(NroEquipoEdit);
        _visible = false;
    }

    private void NevigateToYourUrl()
    {
        navigationManager.NavigateTo($"/Comunicacion", true);
    }

    private async void GetComunicacionViewModel(string NroEquipo)
    {
        ComunicacionVM = ComunicacionesViewModel.Single(c => c.NroEquipo == NroEquipo);
        StateHasChanged();
    }//Se obtienen los valores de la base de datos al view model

    private void Cancel()
    {
        message.Error("Operacion cancelada");
    }

}
