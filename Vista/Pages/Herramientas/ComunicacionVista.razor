@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/Herramientas/Comunicacion"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json
@using Microsoft.EntityFrameworkCore.Metadata.Internal;
@using Vista.Data.ViewModels.Personal;

<div style="margin-top: 2em;">
    <Table DataSource="filteredComunicaciones" Bordered
        @bind-SelectedRows="selectedRows"
               Total="_total"
        @bind-PageIndex="_pageIndex"
        @bind-PageSize="_pageSize"
           Responsive>

        <TitleTemplate>
            <GridRow>
                <GridCol Style="width: 100% !important;flex: none !important;display: flex; justify-content: space-between; max-width:none;" Span="4">
                    <Title Level="3">Comunicaciones</Title>
                </GridCol>

                <GridCol Span="8" Offset="12">
                    <Input @bind-Value="searchString" Placeholder="Buscar" @oninput="Search" />
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Property="c => c.NroEquipo"
                            DefaultSortOrder="@SortDirection.Descending"
                            SorterCompare="@((a, b) => string.Compare(a, b))" />
            <PropertyColumn Property="c=>c.Modelo" Sortable />
            <PropertyColumn Property="c=>c.Marca" Sortable />
            <PropertyColumn Property="c=>c.NroSerie" />
            <TableFilter MatchMode="MatchMode.Contains" FilterCallback="OnFilterChanged" />
            <PropertyColumn Title="Estado" Property="c=>c.Estado"
                            SortDirections="new[] { SortDirection.Descending }"
                            Filters="DiscriminadorFilter"
                            OnFilter="((value,name)=>Enum.GetName(typeof(TipoEstadoHandie), name).StartsWith(Enum.GetName(typeof(TipoEstadoHandie), value)))" />
            <PropertyColumn Property="b=>b.Nombre" />
            <PropertyColumn Property="b=>b.Apellido" Sortable />
            <PropertyColumn Property="b=>b.NroLegajo" Sortable />
            <PropertyColumn Property="m=>m.NumeroMovil" Sortable Title="Numero Movil" />
            <PropertyColumn Property="m=>m.Patente" Sortable />
            <ActionColumn Title="Action">
                <Space>
                    <SpaceItem>
                        <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro que deseas borrar el handie?"
                                    OnConfirm="()=>Delete(context.NroEquipo)"
                                    OnCancel="Cancel">
                            <Button Danger>
                                Eliminar
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro que deseas desasignar el bombero?"
                                    OnConfirm="()=>Desasignar(context.NroEquipo)"
                                    OnCancel="Cancel">
                            <Button Danger>
                                Desasignar
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                    @*<SpaceItem><Button Danger OnClick="()=>Delete(context.NroEquipo)">Delete</Button></SpaceItem>
                    <SpaceItem><Button Danger OnClick="()=>Desasignar(context.NroEquipo)">Desasignar</Button></SpaceItem>*@
                    <SpaceItem><Button Type="primary" OnClick="()=>ShowModalEditar(context.NroEquipo)">Editar</Button></SpaceItem>
                </Space>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
        <Button OnClick="()=>ShowModalAgregar()">Agregar Handie</Button>
    </div>

</div>

<Modal Footer="null" Title="@("Comunicacion")"
       Visible="@_visibleAgregar"
       OnOk="@HandleOkAgregar"
       OnCancel="@HandleCancelAgregar">
    <AgregarComunicacion />
    <Button Style="margin-right: 134px !important;" Type="@ButtonType.Primary" OnClick="@HandleCancelAgregar">
        Volver
    </Button>
</Modal>

<Modal Title="@("Comunicacion")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@ComunicacionVM"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form">

        <FormItem Label="Nro Equipo">
            <Input DefaultValue="@ComunicacionVM.NroEquipo" @bind-Value="@ComunicacionVM.NroEquipo" />
        </FormItem>
        <FormItem Label="Modelo">
            <Input DefaultValue="@ComunicacionVM.Modelo" @bind-Value="@ComunicacionVM.Modelo" />
        </FormItem>
        <FormItem Label="Nro Equipo">
            <Input DefaultValue="@ComunicacionVM.Marca" @bind-Value="@ComunicacionVM.Marca" />
        </FormItem>
        <FormItem Label="Nro Serie">
            <Input DefaultValue="@ComunicacionVM.NroSerie" @bind-Value="@ComunicacionVM.NroSerie" />
        </FormItem>
        <FormItem Label="Estado">
            <EnumSelect DefaultValue="@ComunicacionVM.Estado" TEnum="TipoEstadoHandie" @bind-Value="@ComunicacionVM.Estado" />
        </FormItem>  
        <div>
            <FormItem Label="Seleccione una opción">
                <Checkbox @bind-Checked="@selectBombero" OnChange="() => HandleCheckboxChange(true, checkboxBomberoLabel)">Elija el bombero</Checkbox>
                <Checkbox @bind-Checked="@selectMovil" OnChange="() => HandleCheckboxChange(true, checkboxMovilLabel)">Elija el móvil</Checkbox>
            </FormItem>
        </div>
        @if (selectBombero)
        {
            <!-- Mostrar campos para asignar a un bombero -->
            <div>
                <FormItem Label="@nameof(BomberoVM.NombreYApellido)">
                    <Select TItem="BomberoViewModel"
                            TItemValue="int?"
                            DataSource="@BomberosViewModel"
                    @bind-Value="@ComunicacionVM.NroLegajo"
                            LabelName="@nameof(BomberoVM.NombreYApellido)"
                            ValueName="@nameof(BomberoVM.NumeroLegajo)"
                            Placeholder="Seleccione a un bombero"
                            EnableSearch
                            AllowClear="true">
                    </Select>
                </FormItem>
            </div>
        }
        else if (selectMovil)
        {
            <!-- Mostrar campos para asignar a un móvil -->
            <div>
                <FormItem Label="@nameof(MovilVM.NumeroMovil)">
                    <Select TItem="MovilViewModel"
                            TItemValue="string"
                            DataSource="@MovilesViewModel"
                    @bind-Value="@ComunicacionVM.NumeroMovil"
                            LabelName="@nameof(MovilVM.NumeroMovil)"
                            ValueName="@nameof(MovilVM.NumeroMovil)"
                            Placeholder="Seleccione un móvil"
                            EnableSearch
                            AllowClear="true">
                    </Select>
                </FormItem>
            </div>
        }

    </Form>
</Modal>

@code {



    private class ComunicacionViewModel
    {

        public int EquipoId { get; set; }
        [Required, StringLength(255)]
        public string NroEquipo { get; set; }
        public string? Modelo { get; set; }
        public string? Marca { get; set; }
        public string? NroSerie { get; set; }
        public TipoEstadoHandie Estado { get; set; }


        //Propiedades a mostrar de un movil
        public Movil? Movil { get; set; }
        public string? NumeroMovil = " ";
        public string? Patente = " ";
        //Propiedades a mostrar de un bombero
        public Bombero? Bombero { get; set; }
        public string? Nombre = " ";
        public string? Apellido = " ";
        public int? NroLegajo;
    }

    private class BomberoViewModel
    {
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public int NumeroLegajo { get; set; }
        public int? EquipoId { get; set; }
        public string? NombreYApellido { get { return Nombre + ", " + Apellido; } }
        public Comunicacion? Handie { get; set; }
    }
    public class MovilViewModel
    {
        public string Patente { get; set; }
        public string NumeroMovil { get; set; }
        public Comunicacion? HandieMovil { get; set; }
    }

    IEnumerable<ComunicacionViewModel> selectedRows;
    TipoEstadoHandie discriminadoresHandies;
    List<string> discriminadores = new List<string>();
    private TableFilter<TipoEstadoHandie>[] DiscriminadorFilter;
    List<Comunicacion>? comunicaciones { get; set; } = new();
    List<Movil> moviles { get; set; } = new();
    List<Bombero> bomberos { get; set; } = new List<Bombero>();

    private ComunicacionViewModel ComunicacionVM { get; set; } = new();

    List<ComunicacionViewModel> ComunicacionesViewModel { get; set; } = new();

    private MovilViewModel MovilVM { get; set; } = new();
    List<MovilViewModel> MovilesViewModel { get; set; } = new();

    private BomberoViewModel BomberoVM { get; set; } = new();
    List<BomberoViewModel> BomberosViewModel { get; set; } = new();
    BomberosDbContext Context { get; set; }

    public ITable _table;
    int _pageIndex = 1;
    int _pageSize = 6;
    int _total = 0;
    private string searchString = "";
    private List<ComunicacionViewModel>? filteredComunicaciones;
    private List<ComunicacionViewModel>? dataSource;

    private bool selectBombero = false;
    private bool selectMovil = false;
    string checkboxMovilLabel = "Elija el móvil";
    string checkboxBomberoLabel = "Elija el bombero";

    private void HandleCheckboxChange(bool value, string checkboxName)
    {
        if (checkboxName == "Elija el bombero" && value)
        {
            selectMovil = false; // Desactivar el otro checkbox
            selectBombero = true; // Activar el checkbox actual
        }
        else if (checkboxName == "Elija el móvil" && value)
        {
            selectBombero = false; // Desactivar el otro checkbox
            selectMovil = true; // Activar el checkbox actual
        }
    }



    protected override async Task OnInitializedAsync()
    {
        await Init();
        filteredComunicaciones = ComunicacionesViewModel;
        //Filtro del discriminador, le asigno un valor de un enum a cada numero discriminador
        DiscriminadorFilter = new TableFilter<TipoEstadoHandie>[Enum.GetValues(typeof(TipoEstadoHandie)).Length];
        int i = 0;
        foreach (TipoEstadoHandie value in Enum.GetValues(typeof(TipoEstadoHandie)))
        {
            DiscriminadorFilter[i] = new() { Text = Enum.GetName(typeof(TipoEstadoHandie), value), Value = value };
            i++;
        }
    }

    private async Task Init()
    {
        ComunicacionVM = new();
        BomberoVM = new();
        Context = DbFactory.CreateDbContext();
        await CargarBomberoViewModel();
        await CargarMovilViewModel();
        await CargarComunicacionVM();
    }


    public async Task CargarComunicacionVM()
    {
        int contador = 0;
        ComunicacionesViewModel.Clear();
        var bomberos = await Context.Bomberos.ToArrayAsync();
        var moviles = await Context.Moviles.ToArrayAsync();
        var comunicacionesDB = await Context.Comunicacion.ToListAsync();

        foreach (Comunicacion c in comunicacionesDB)
        {
            ComunicacionViewModel comunicacion = new()
                {
                    NroEquipo = c.NroEquipo,
                    Marca = c.Marca,
                    Modelo = c.Modelo,
                    NroSerie = c.NroSerie,
                    Nombre = c.Bombero?.Nombre,
                    Apellido = c.Bombero?.Apellido,
                    Patente = c.Movil?.Patente,
                    NumeroMovil = c.Movil?.NumeroMovil,
                    NroLegajo = c.Bombero?.NumeroLegajo,
                    Estado = c.Estado
                };
            ComunicacionesViewModel.Add(comunicacion);
        }

    }
    public async Task CargarBomberoViewModel()
    {
        BomberosViewModel = new();
        var bomberos = await Context.Bomberos.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel bomberoVM = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo,
                    EquipoId = b.EquipoId,
                };
            BomberosViewModel.Add(bomberoVM);
        }
    }
    public async Task CargarMovilViewModel()
    {
        MovilesViewModel = new();
        var moviles = await Context.Moviles.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Movil m in moviles)
        {
            MovilViewModel movilVM = new()
                {
                    NumeroMovil = m.NumeroMovil,
                    Patente = m.Patente,
                    HandieMovil = m.HandieMovil
                };
            MovilesViewModel.Add(movilVM);
        }
    }

    void OnRowClick(RowData<ComunicacionViewModel> row)
    {
        Console.WriteLine($"row {row.Data.NroEquipo} was clicked");
    }//Toma el valor del valor de la fila seleccionada

    private void Search(ChangeEventArgs e)
    {
        searchString = e.Value.ToString().Trim().ToLower();
        filteredComunicaciones = ComunicacionesViewModel
            .Where(c => string.IsNullOrWhiteSpace(searchString) || c.Nombre.ToLower().Contains(searchString))
            .ToList();
    }

    public void RemoveSelection(string NroEquipoBorrar)
    {
        var selected = selectedRows.Where(x => x.NroEquipo != NroEquipoBorrar);
        selectedRows = selected;
    }

    private async Task Delete(string NroEquipoBorrar)
    {
        try
        {
            Comunicacion? comunicacion = await Context.Comunicacion.FirstOrDefaultAsync(c => c.NroEquipo == NroEquipoBorrar);
            Context.Remove(comunicacion);
            ComunicacionesViewModel = ComunicacionesViewModel.Where(x => x.NroEquipo != NroEquipoBorrar).ToList();
            _total = ComunicacionesViewModel.Count;
            await Context.SaveChangesAsync();
            await Init();
            StateHasChanged();
            await message.Success("Handie elminado correctamente");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }

    }
    private async Task Desasignar(string NroEquipoDesasignar)
    {
        try
        {
            Bombero? bombero = await Context.Bomberos
            .Include(b => b.Handie) // Incluye la entidad relacionada Handie en la consulta
            .Where(x => x.Handie.NroEquipo == NroEquipoDesasignar)
            .SingleOrDefaultAsync();
            Movil? movil = await Context.Moviles
            .Include(b => b.HandieMovil) // Incluye la entidad relacionada Handie en la consulta
            .Where(x => x.HandieMovil.NroEquipo == NroEquipoDesasignar)
            .SingleOrDefaultAsync();

            if (bombero != null)
            {
                bombero.Handie = null; // Desvincula la entidad relacionada Handie
                await Context.SaveChangesAsync();
                await Init();
                await message.Success("Bombero desasignado correctamente");
            }
            else if (movil != null)
            {
                bombero.Handie = null; // Desvincula la entidad relacionada Handie
                await Context.SaveChangesAsync();
            }
            await Init();
            await message.Success("Movil desasignado correctamente");
            StateHasChanged();

        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }

    }

    private async void EditarHandie(string NroEquipoEdit)
    {
        try
        {
            Comunicacion? comunicacion = await Context.Comunicacion.SingleOrDefaultAsync(b => b.NroEquipo == NroEquipoEdit);

            // Antes de hacer cualquier cambio, verifica si el tipo ha cambiado
            if (selectBombero && comunicacion.Movil != null)
            {
                // Si se cambió de móvil a bombero, desvincula el móvil
                comunicacion.Movil = null;
            }
            else if (selectMovil && comunicacion.Bombero != null)
            {
                // Si se cambió de bombero a móvil, desvincula el bombero
                comunicacion.Bombero = null;
            }

            if (selectBombero)
            {
                Bombero? bombero = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == ComunicacionVM.NroLegajo);
                comunicacion.Bombero = bombero;
            }
            else if (selectMovil)
            {
                Movil? movil = await Context.Moviles.SingleOrDefaultAsync(b => b.NumeroMovil == ComunicacionVM.NumeroMovil);
                comunicacion.Movil = movil;
            }

            comunicacion.NroEquipo = ComunicacionVM.NroEquipo;
            comunicacion.Modelo = ComunicacionVM.Modelo;
            comunicacion.Marca = ComunicacionVM.Marca;
            comunicacion.NroSerie = ComunicacionVM.NroSerie;
            comunicacion.Estado = ComunicacionVM.Estado;

            await Context.SaveChangesAsync();
            await Init();
            StateHasChanged();
            await message.Success("Handie editado correctamente");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }
    }

    string NroEquipoEdit;
    private void ShowModalEditar(string NroEquipo)
    {
        NroEquipoEdit = NroEquipo;
        GetComunicacionViewModel(NroEquipo);
        _visible = true;
    }
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(ComunicacionVM)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    bool _visibleAgregar = false;


    private void ShowModalAgregar()
    {
        _visibleAgregar = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visible = false;
    }


    private async void HandleOkAgregar(MouseEventArgs e)
    {
        _visibleAgregar = false;
    }
    public void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregar = false;
    }

    private Form<ComunicacionViewModel> _form;
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visible = false;
    }

    private async void HandleOk(MouseEventArgs e)
    {
        EditarHandie(NroEquipoEdit);
        _visible = false;
    }

    private void NevigateToYourUrl()
    {
        navigationManager.NavigateTo($"/Comunicacion", true);
    }

    private async void GetComunicacionViewModel(string NroEquipo)
    {
        ComunicacionVM = ComunicacionesViewModel.Single(c => c.NroEquipo == NroEquipo);
        StateHasChanged();
    }//Se obtienen los valores de la base de datos al view model

    private void Cancel()
    {
        message.Error("Operacion cancelada");
    }


}
