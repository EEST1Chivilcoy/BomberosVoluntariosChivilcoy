@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/Herramientas/Comunicacion"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json
@using Microsoft.EntityFrameworkCore.Metadata.Internal;
@using Vista.Data.ViewModels.Personal;

<h3>Comunicacion</h3>

<Table DataSource="comunicacionesViewModel" Bordered
    @bind-SelectedRows="selectedRows"
           Total="_total"
    @bind-PageIndex="_pageIndex"
    @bind-PageSize="_pageSize">

    <TitleTemplate>
        <GridRow>
            <GridCol Span="4">
                <Title Level="3">Comunicaciones</Title>
            </GridCol>
        </GridRow>
    </TitleTemplate>
    <ColumnDefinitions>
        <PropertyColumn Property="c=>c.NroEquipo"></PropertyColumn>
        <PropertyColumn Property="c=>c.Modelo"></PropertyColumn>
        <PropertyColumn Property="c=>c.Marca"></PropertyColumn>
        <PropertyColumn Property="c=>c.NroSerie"></PropertyColumn>
        <PropertyColumn Property="b=>b.Nombre"></PropertyColumn>
        <PropertyColumn Property="b=>b.Apellido"></PropertyColumn>
        <ActionColumn Title="Action">
            <Space>
                <SpaceItem><Button Danger OnClick="()=>Delete(context.NroEquipo)">Delete</Button></SpaceItem>
                <SpaceItem><Button Danger OnClick="()=>Desasignar(context.NroEquipo)">Desasignar</Button></SpaceItem>
                <SpaceItem><Button Type="primary" OnClick="()=>ShowModalEditar(context.NroEquipo)">Editar</Button></SpaceItem>
            </Space>
        </ActionColumn>
    </ColumnDefinitions>
</Table>

<Button OnClick="@(() => { navigationManager.NavigateTo($"/Herramientas/Comunicacion/agregar"); })" Style="position: absolute;right: 32.5em;top: 56.9em;">Agregar Handie</Button>
<Modal Title="@("Comunicacion")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@ComunicacionVM"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
    @ref="@_form">

        <FormItem Label="Nro Equipo">
            <Input DefaultValue="@ComunicacionVM.NroEquipo" @bind-Value="@ComunicacionVM.NroEquipo" />
        </FormItem>
        <FormItem Label="Modelo">
            <Input DefaultValue="@ComunicacionVM.Modelo" @bind-Value="@ComunicacionVM.Modelo" />
        </FormItem>
        <FormItem Label="Nro Equipo">
            <Input DefaultValue="@ComunicacionVM.Marca" @bind-Value="@ComunicacionVM.Marca" />
        </FormItem>
        <FormItem Label="Nro Serie">
            <Input DefaultValue="@ComunicacionVM.NroSerie" @bind-Value="@ComunicacionVM.NroSerie" />
        </FormItem>
        <FormItem Label="Estado">
            <EnumSelect DefaultValue="@ComunicacionVM.Estado" TEnum="TipoEstadoHandie" @bind-Value="@ComunicacionVM.Estado" />
        </FormItem>
        <div>
            <FormItem Label="Elija el bombero que sera asignado">
                <Select TItem="BomberoViewModel"
                        TItemValue="int"
                        DataSource="@BomberosVM"
                @bind-Value="@ComunicacionVM.NroLegajo"
                        LabelName="@nameof(bomberosViewModel.NombreYApellido)"
                        ValueName="@nameof(bomberosViewModel.NumeroLegajo)"
                        Placeholder="Selecione a un bombero"
                        DefaultActiveFirstOption="false"
                        EnableSearch
                        AllowClear="true">
                </Select>
            </FormItem>
        </div>
    </Form>
</Modal>

@code {



    private class ComunicacionViewModel
    {

        public int EquipoId { get; set; }
        [Required, StringLength(255)]
        public string NroEquipo { get; set; }
        public string? Modelo { get; set; }
        public string? Marca { get; set; }
        public string? NroSerie { get; set; }
        public TipoEstadoHandie Estado { get; set; }
        public int NroLegajo { get; set; }
        public Bombero? Bombero { get; set; }
        public string? Nombre = " ";
        public string? Apellido = " ";
    }

    private class BomberoViewModel
    {
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public int? NumeroLegajo { get; set; }
        public int? EquipoId { get; set; }
        public string? NombreYApellido { get { return Nombre + ", " + Apellido; } }
        public Comunicacion? Handie { get; set; }
    }


    string searchString;
    IEnumerable<ComunicacionViewModel> selectedRows;


    List<Comunicacion>? comunicaciones { get; set; } = new();

    List<Bombero> bomberos { get; set; } = new List<Bombero>();

    private ComunicacionViewModel ComunicacionVM { get; set; } = new();

    List<ComunicacionViewModel> comunicacionesViewModel { get; set; }

    private BomberoViewModel bomberosViewModel = new BomberoViewModel();
    List<BomberoViewModel> BomberosVM { get; set; } = new();
    BomberosDbContext Context { get; set; }

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;



    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        await CargarComunicacionVM();
        await CargarBomberoViewModel();
    }



    public async Task CargarComunicacionVM()
    {
        comunicacionesViewModel = new();
        var bomberos = await Context.Bomberos.ToArrayAsync();
        var comunicacionesDB = await Context.Comunicacion.ToListAsync();


        foreach (Comunicacion c in comunicacionesDB)
        {
            ComunicacionViewModel comunicacion = new()
                {
                    NroEquipo = c.NroEquipo,
                    Marca = c.Marca,
                    Modelo = c.Modelo,
                    NroSerie = c.NroSerie,
                    Estado = c.Estado,
                    Nombre = c.Bombero?.Nombre,
                    Apellido = c.Bombero?.Apellido
                };
            comunicacionesViewModel.Add(comunicacion);
        }

    }
    public async Task CargarBomberoViewModel()
    {
        BomberosVM = new();
        var bomberos = await Context.Bomberos.ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel bomberoVM = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo,
                    EquipoId = b.EquipoId,
                };
            BomberosVM.Add(bomberoVM);
        }
    }

    void OnRowClick(RowData<ComunicacionViewModel> row)
    {
        Console.WriteLine($"row {row.Data.NroEquipo} was clicked");
    }//Toma el valor del valor de la fila seleccionada

    private async Task OnChange(QueryModel<ComunicacionViewModel> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
        //dataSource = queryModel.ExecuteQuery(bomberos.AsQueryable())
        //    .Where(x => string.IsNullOrWhiteSpace(searchString) || x.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase));
        //arreglar busqueda-----------------------------------------------------------------------------------------------------------------------------------------
        OnInitializedAsync();
    }

    public void RemoveSelection(string NroEquipoBorrar)
    {
        var selected = selectedRows.Where(x => x.NroEquipo != NroEquipoBorrar);
        selectedRows = selected;
    }

    private async Task Delete(string NroEquipoBorrar)
    {
        using var context = DbFactory.CreateDbContext();
        Comunicacion? comunicacion = await context.Comunicacion.FirstOrDefaultAsync(c => c.NroEquipo == NroEquipoBorrar);
        context.Remove(comunicacion);
        comunicacionesViewModel = comunicacionesViewModel.Where(x => x.NroEquipo != NroEquipoBorrar).ToList();
        _total = comunicacionesViewModel.Count;
        await context.SaveChangesAsync();
        StateHasChanged();
    }
    private async Task Desasignar(string NroEquipoDesasignar)
    {
        using var context = DbFactory.CreateDbContext();

        Bombero? bombero = await context.Bomberos
            .Include(b => b.Handie) // Incluye la entidad relacionada Handie en la consulta
            .Where(x => x.Handie.NroEquipo == NroEquipoDesasignar)
            .SingleOrDefaultAsync();

        if (bombero != null)
        {
            bombero.Handie = null; // Desvincula la entidad relacionada Handie
            await context.SaveChangesAsync();
            
        }
        StateHasChanged();
    }

    private async void EditarBombero(string NroEquipoEdit)
    {
        using var context = DbFactory.CreateDbContext();
        Comunicacion? comunicacion = await context.Comunicacion.Where(b => b.NroEquipo == NroEquipoEdit).SingleOrDefaultAsync();
        Bombero? bomberos = await context.Bomberos.Where(b => b.NumeroLegajo == ComunicacionVM.NroLegajo).SingleOrDefaultAsync();

        comunicacion.NroEquipo = ComunicacionVM.NroEquipo;
        comunicacion.Modelo = ComunicacionVM.Modelo;
        comunicacion.Marca = ComunicacionVM.Marca;
        comunicacion.NroSerie = ComunicacionVM.NroSerie;
        comunicacion.Estado = ComunicacionVM.Estado;
        comunicacion.Bombero = bomberos;
        await context.SaveChangesAsync();
        await OnInitializedAsync();
        StateHasChanged();
    }

    string NroEquipoEdit;
    private async void ShowModalEditar(string NroEquipo)
    {

        GetComunicacionViewModel(NroEquipo);
        NroEquipoEdit = NroEquipo;
        _visible = true;
    }





    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(ComunicacionVM)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    bool _visibleDetalle = false;

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visible = false;
    }
    private void HandleCancelDetalle(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleDetalle = false;
    }

    private Form<ComunicacionViewModel> _form;

    /// <summary>
    /// when form is submited, close the modal
    /// </summary>
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visible = false;
    }

    private async void HandleOk(MouseEventArgs e)
    {
        //bomberoVM.GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), bomberoVM.GrupoSanguineo);
        //_form.Submit();

        EditarBombero(NroEquipoEdit);
        //navigationManager.NavigateTo($"/bomberos");

        //StateHasChanged();
        //await Task.Delay(500);
        //NevigateToYourUrl();
        _visible = false;
    }

    private void NevigateToYourUrl()
    {
        navigationManager.NavigateTo($"/Comunicacion", true);
    }

    private async void GetComunicacionViewModel(string NroEquipo)
    {
        using var context = DbFactory.CreateDbContext();
        Comunicacion? comunicacion = await context.Comunicacion.Where(b => b.NroEquipo == NroEquipo).SingleOrDefaultAsync();


        ComunicacionViewModel ComunicacionPasajeVM = new()
            {
                NroEquipo = comunicacion.NroEquipo,
                Modelo = comunicacion.Modelo,
                Marca = comunicacion.Marca,
                NroSerie = comunicacion.NroSerie,
                Estado = comunicacion.Estado,

            };
        ComunicacionVM = ComunicacionPasajeVM;
        comunicacionesViewModel.Add(ComunicacionPasajeVM);
        StateHasChanged();
    }//Se obtienen los valores de la base de datos al view model



}
