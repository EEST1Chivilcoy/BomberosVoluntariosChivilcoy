@implements IDisposable
@using System.ComponentModel.DataAnnotations
@using Vista.Services;
@inject IDepositoService DepositoService
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

<Table DataSource="ListasMoviminetosVista" Bordered Responsive Style="min-width: 320px!important;" PageSize="5" Size="TableSize.Small">
         <ColumnDefinitions Context="muestra">
             <PropertyColumn Property="c=>c.FechaIngreso" Format="dd/MM/yyyy" Sortable></PropertyColumn>
         <PropertyColumn Property="c=>c.MaterialAsignado.Codigo" Sortable></PropertyColumn>
         <PropertyColumn Property="c=>c.TipoMovimiento" 
                         SortDirections="new[] { SortDirection.Descending }"
                         Filters="DiscriminadorFilter"
                         OnFilter="((value,name)=>Enum.GetName(typeof(TipoMovimiento), name).StartsWith(Enum.GetName(typeof(TipoMovimiento), value)))" >
         </PropertyColumn>
         <PropertyColumn Property="c=>c.MaterialAsignado.Descripcion" Sortable></PropertyColumn>
         <PropertyColumn Property="c=>c.BomberoOMovil" Sortable></PropertyColumn>
         
     </ColumnDefinitions>
 </Table>

 <Form Model="MovimientoVM"
       LabelColSpan="8"
       WrapperColSpan="16"
       OnFinish="OnFinish"
       OnFinishFailed="OnFinishFailed"
       Style="width: 100%;height: 100%;">

     <FormItem Label="Rubro">
         <EnumSelect TEnum="@TipoMovimiento" @bind-Value="@MovimientoVM.TipoMovimiento" />
     </FormItem>

    <CheckboxGroup Style="width:100%" @bind-Value="@_value" TValue="string" OnChange="OnChange">

        <Row>
            <Col Span="8">
            <Checkbox Label="Bombero" @bind-Value="@chIsBombero">Bombero</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="Movil" @bind-Value="@chIsMovil">Movil</Checkbox>
            </Col>
        </Row>
    </CheckboxGroup>

     <FormItem Label="Bombero asignado">
         <Select TItem="BomberoViewModel"
                 TItemValue="int?"
                 DataSource="@bomberoTodos"
                 @bind-Value="@MovimientoVM.BomberoAsignado"
                 LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                 ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                 Placeholder="Selecione el bombero"
                 DefaultActiveFirstOption="false"
                 AllowClear="true"
                 Disabled="@(!chIsBombero)"
                EnableSearch>
        </Select>
    </FormItem>
    
    <FormItem Label="Movil asignado">
        <Select TItem="MovilViewModel"
                TItemValue="string"
                DataSource="@MovilTodos"
                @bind-Value="@MovimientoVM.MovilAsignado"
                LabelName="@nameof(MovilViewModel.NumeroMovil)"
                ValueName="@nameof(MovilViewModel.NumeroMovil)"
                Placeholder="Selecione el movil"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                Disabled="@(!chIsMovil)"
                EnableSearch>
        </Select>
    </FormItem>
    <FormItem Label="Material otorgado">
        <Select TItem="MaterialVM"
                TItemValue="int"
                DataSource="@MaterialesVM"
                @bind-Value="@MovimientoVM.MaterialId"
                LabelName="@nameof(MaterialVM.Descripcion)"
                ValueName="@nameof(MaterialVM.MaterialId)"
                Placeholder="Selecione el material"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>

    <FormItem Label="Ingrese las cantidad">
        <AntDesign.InputNumber @bind-Value="MovimientoVM.Cantidad" />
    </FormItem>
    <FormItem Label="Observaciones">
        <Input @bind-Value="MovimientoVM.Observaciones" />
    </FormItem>
    <FormItem Style="width: 100% !important;
            display: flex !important;
            justify-content: flex-end !important;
            align-items: flex-end !important; height:100% !important; margin-bottom: -32px;" WrapperColOffset="8" WrapperColSpan="16">
        <Button Class="boton_p" HtmlType="submit" Style="margin-right: 60px;">
            Guardar movimiento del material
        </Button>
    </FormItem>
</Form>


@code {
    BomberosDbContext Context { get; set; }
    bool chIsBombero;
    bool chIsMovil;
    public class MovilViewModel
    {
        public string NumeroMovil { get; set; }
    }

    public class BomberoViewModel
    {
        public string NombreYApellido { get; set; }
        public int NumeroLegajo { get; set; }
    }
    public class MaterialVM
    {
        public int MaterialId { get; set; }
        [Required]
        public DateTime FechaAlta { get; set; }
        public string? Descripcion { get; set; }
        public string? Codigo { get; set; }
        public int Stock { get; set; }
        public TipoRubro Rubro { get; set; }

    }
    public class MovimientoMaterialesViewModel
    {
        public DateTime FechaIngreso { get; set; }
        public TipoMovimiento TipoMovimiento { get; set; }
        public int Cantidad { get; set; }
        public int MaterialId { get; set; }
        public int? BomberoAsignado { get; set; }
        public string? MovilAsignado { get; set; }
        public string Observaciones { get; set; }
    }

    public class TodosMovimientosviewModel
    {
        public DateTime FechaIngreso { get; set; }
        public TipoMovimiento TipoMovimiento { get; set; }
        public int Cantidad { get; set; }
        public Bombero? BomberoAsignado { get; set; }
        public Movil? MovilAsignado { get; set; }
        public string BomberoOMovil
        {
            get
            {
                if (BomberoAsignado != null)
                {
                    return BomberoAsignado.Nombre +","+ BomberoAsignado.Apellido;
                }
                else if (MovilAsignado != null)
                {
                    return MovilAsignado.NumeroMovil;
                }
                else
                {
                    return "No asignado";
                }
            }
        }
        public Material? MaterialAsignado { get; set; }
    }

    MovimientoMaterialesViewModel MovimientoVM = new();
    List<MaterialVM> MaterialesVM = new();
    List<BomberoViewModel> bomberoTodos = new();
    List<MovilViewModel> MovilTodos = new();
    List<MovimientoMaterialesViewModel> ListasMoviminetos = new();
    List<TodosMovimientosviewModel> ListasMoviminetosVista = new();
    private TableFilter<TipoMovimiento>[] DiscriminadorFilter;
    private string[] _value = new string[] { };
    protected override async Task OnInitializedAsync()
    {
        await Init();
        DiscriminadorFilter = new TableFilter<TipoMovimiento>[Enum.GetValues(typeof(TipoMovimiento)).Length];
        int i = 0;
        foreach (TipoMovimiento value in Enum.GetValues(typeof(TipoMovimiento)))
        {
            DiscriminadorFilter[i] = new() { Text = Enum.GetName(typeof(TipoMovimiento), value), Value = value };
            i++;
        }
    }

    private async Task Init()
    {
        MovimientoVM = new();
        Context = DbFactory.CreateDbContext();

        await CargarMaterial();
        await CargarBomberos();
        await CargarMovil();
        await CargarMovimientos();

    }
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            var BomberoDestino = MovimientoVM.BomberoAsignado.HasValue ? await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == MovimientoVM.BomberoAsignado) : null;
            var MovilDestino = !string.IsNullOrEmpty(MovimientoVM.MovilAsignado) ? await Context.Moviles.SingleOrDefaultAsync(m => m.NumeroMovil == MovimientoVM.MovilAsignado) : null;
            var MaterialAsignado = await Context.Materiales.SingleOrDefaultAsync(ma => ma.MaterialId == MovimientoVM.MaterialId);
            if (MaterialAsignado == null)
            {
                await message.Error("No se encontró el material asignado.");
                return;
            }
            Vista.Data.Models.Salidas.Componentes.MovimientoMaterial movimiento = new()
                {
                    TipoMovimiento = MovimientoVM.TipoMovimiento,
                    DestinoBombero = BomberoDestino,
                    DestinoMovil = MovilDestino,
                    Cantidad = MovimientoVM.Cantidad,
                    Observaciones = MovimientoVM.Observaciones,
                    FechaIngreso = DateTime.Now,
                    Materiales = MaterialAsignado
                };
            await DepositoService.CargarMovimiento(movimiento);
            await Init();
            StateHasChanged();
            await message.Success("Movimiento cargado");
            await DepositoService.ActualizarStock(movimiento, MaterialAsignado);
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);

        }
    }
    private async Task CargarBomberos()
    {
        bomberoTodos = new();
        var bom = await Context.Bomberos.ToListAsync();
        foreach (var item in bom)
        {
            BomberoViewModel b = new()
                {
                    NombreYApellido = item.Nombre + ' ' + item.Apellido,
                    NumeroLegajo = item.NumeroLegajo
                };
            bomberoTodos.Add(b);
        }
    }
    private async Task CargarMovil()
    {
        MovilTodos = new();
        var movil = await Context.Moviles.ToListAsync();
        foreach (var item in movil)
        {
            MovilViewModel m = new()
                {
                    NumeroMovil = item.NumeroMovil
                };
            MovilTodos.Add(m);
        }
    }
    private async Task CargarMaterial()
    {
        MaterialesVM.Clear();
        var Materiales = await Context.Materiales.Where(m=>m.Stock > 0).ToArrayAsync();
        foreach (var m in Materiales)
        {
            MaterialVM materialVM = new()
                {
                    MaterialId = m.MaterialId,
                    Codigo = m.Codigo,
                    Stock = m.Stock,
                    Rubro = m.Rubro,
                    Descripcion = m.Descripcion,
                    FechaAlta = m.FechaAlta
                };
            MaterialesVM.Add(materialVM);
            await Context.SaveChangesAsync();
            StateHasChanged();
        }
    }
    private async Task CargarMovimientos()
    {
        ListasMoviminetosVista = new();

        var Movimientos = await Context.Movimientos.Include(b=>b.DestinoBombero).Include(ma=>ma.Materiales).Include(m=>m.DestinoMovil)
        .ToListAsync();
        foreach (var m in Movimientos)
        {
            TodosMovimientosviewModel mov = new()
            {
                FechaIngreso = m.FechaIngreso,
                TipoMovimiento=m.TipoMovimiento,
                MaterialAsignado = m.Materiales,
                BomberoAsignado = m.DestinoBombero,
                MovilAsignado = m.DestinoMovil,

            };
            ListasMoviminetosVista.Add(mov);
        }

    }
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(MovimientoVM)}");
    }

    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }


    public void Dispose()
    {
        Context?.Dispose();
    }
}
