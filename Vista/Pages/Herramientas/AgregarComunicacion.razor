@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory


<style>
    /* tile uploaded pictures */
    .upload-list-inline .ant-upload-list-item {
        float: left;
        width: 200px;
        margin-right: 8px;
    }

    .upload-list-inline [class*='-upload-list-rtl'] .ant-upload-list-item {
        float: right;
    }

    .upload-list-inline .ant-upload-animate-enter {
        animation-name: uploadAnimateInlineIn;
    }

    .upload-list-inline .ant-upload-animate-leave {
        animation-name: uploadAnimateInlineOut;
    }

    #crear-comunicacion {
        background-color: #C43A3A;
        color: white;
        font-size: 20px;
        font-family: calibri light;
        border: 0px;
        border-radius: 8px;
    }

    #blancoA {
        width: 100%;
        padding: 15px;
    }

    #estilo {
        border: 1px;
        border-radius: 8px;
        background-color: #AFAFAF;
    }

    #texto {
        font-size: 20px;
        font-family: calibri light;
        Font-Weight: bold;
    }
</style>

<Form Model="@ComunicacionVM"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    <FormItem Label="Nro Equipo">
        <Input @bind-Value="@ComunicacionVM.NroEquipo" />
    </FormItem>
    <FormItem Label="Modelo">
        <Input @bind-Value="@ComunicacionVM.Modelo" />
    </FormItem>
    <FormItem Label="Marca">
        <Input @bind-Value="@ComunicacionVM.Marca" />
    </FormItem>
    <FormItem Label="Nro Serie">
        <Input @bind-Value="@ComunicacionVM.NroSerie" />
    </FormItem>
    <FormItem Label="Estado">
        <EnumSelect TEnum="TipoEstadoHandie" @bind-Value="@ComunicacionVM.Estado" />
    </FormItem>

    @if (ComunicacionVM.Estado == TipoEstadoHandie.Activo)
    {
        <div>
            <FormItem Label="Seleccione una opción">
                <Checkbox @bind-Checked="@selectBombero" OnChange="() => HandleCheckboxChange(true, checkboxBomberoLabel)">Elija el bombero</Checkbox>
                <Checkbox @bind-Checked="@selectMovil" OnChange="() => HandleCheckboxChange(true, checkboxMovilLabel)">Elija el móvil</Checkbox>
            </FormItem>
        </div>


        @if (selectBombero)
        {
            <div>
                <FormItem Label="Elija el bombero que será asignado">
                    <Select TItem="BomberoViweModel"
                    TItemValue="int?"
                    DataSource="@BomberosVM"
                    @bind-Value="@ComunicacionVM.NroLegajo"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Seleccione a un bombero"
                    DefaultActiveFirstOption="false"

            EnableSearch
                    AllowClear="true">
                    </Select>
                </FormItem>
            </div>
        }

        @if (selectMovil)
        {
            <div>
                <FormItem Label="Elija el móvil que será asignado">
                    <Select TItem="MovilViewModel"
                    TItemValue="string"
                    DataSource="@MovilesViewModel"
                    @bind-Value="@ComunicacionVM.NumeroMovil"
                    LabelName="@nameof(MovilViewModel.NumeroMovil)"
                    ValueName="@nameof(MovilViewModel.NumeroMovil)"
                    Placeholder="Seleccione un móvil"
                    DefaultActiveFirstOption="false"

            EnableSearch
                    AllowClear="true">
                    </Select>
                </FormItem>
            </div>
        }
    }
    <style>
        .ant-col-offset-8 {
            margin-left: 0px !important;
        }
    </style>
    <FormItem Style="width: 100% !important;
            display: flex !important;
            justify-content: flex-end !important;
            align-items: flex-end !important; height:100% !important; margin-bottom: -32px;" WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Agregar Handie
        </Button>
    </FormItem>
</Form>

@code {
    private class ComunicacionViewModel
    {
        [Required, StringLength(255)]
        public string NroEquipo { get; set; }
        public string? Modelo { get; set; }
        public string? Marca { get; set; }
        public string? NroSerie { get; set; }
        public TipoEstadoHandie Estado { get; set; }
        public int? NroLegajo { get; set; }
        public Movil? Movil { get; set; }
        public string? NumeroMovil = " ";
    }
    public class MovilViewModel
    {
        public string Patente { get; set; }
        public string NumeroMovil { get; set; }
        public Comunicacion? HandieMovil { get; set; }
    }
    BomberosDbContext Context { get; set; }

    ComunicacionViewModel ComunicacionVM { get; set; } = new();
    List<BomberoViweModel> BomberosVM { get; set; } = new();
    List<MovilViewModel> MovilesViewModel { get; set; } = new();
    private bool selectBombero = false;
    private bool selectMovil = false;
    string checkboxMovilLabel = "Elija el móvil";
    string checkboxBomberoLabel = "Elija el bombero";

    private void HandleCheckboxChange(bool value, string checkboxName)
    {
        if (checkboxName == "Elija el bombero" && value)
        {
            selectMovil = false; // Desactivar el otro checkbox
            selectBombero = true; // Activar el checkbox actual
        }
        else if (checkboxName == "Elija el móvil" && value)
        {
            selectBombero = false; // Desactivar el otro checkbox
            selectMovil = true; // Activar el checkbox actual
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        ComunicacionVM = new();
        Context = DbFactory.CreateDbContext();
        await CargarBomberosView();
        await CargarMovilViewModel();
    }

    public async Task CargarBomberosView()
    {
        BomberosVM = new();
        var bomberos = await Context.Bomberos.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bomberoVM = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo
                };
            BomberosVM.Add(bomberoVM);
        }
    }
    public async Task CargarMovilViewModel()
    {
        MovilesViewModel = new();
        var moviles = await Context.Moviles.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Movil m in moviles)
        {
            MovilViewModel movilVM = new()
                {
                    NumeroMovil = m.NumeroMovil,
                    Patente = m.Patente,
                    HandieMovil = m.HandieMovil
                };
            MovilesViewModel.Add(movilVM);
        }
    }
    public async void OnFinish(EditContext editContext)
    {
        try
        {
            if (await Context.Comunicacion.SingleOrDefaultAsync(c => c.NroEquipo == ComunicacionVM.NroEquipo) != null)
            {
                await message.Error("Número de equipo repetido");
                return;
            }

            if (selectBombero)
            {
                Bombero? bomberoSelec = await Context.Bomberos.SingleOrDefaultAsync(bom => bom.NumeroLegajo == ComunicacionVM.NroLegajo);
                Comunicacion comunicacion = new()
                    {
                        NroEquipo = ComunicacionVM.NroEquipo,
                        Modelo = ComunicacionVM.Modelo,
                        Marca = ComunicacionVM.Marca,
                        NroSerie = ComunicacionVM.NroSerie,
                        Estado = ComunicacionVM.Estado,
                        Bombero = bomberoSelec
                    };
                Context.Comunicacion.Add(comunicacion);
            }
            else if (selectMovil)
            {
                Movil? movilSelec = await Context.Moviles.SingleOrDefaultAsync(mov => mov.NumeroMovil == ComunicacionVM.NumeroMovil);
                Comunicacion comunicacion = new()
                    {
                        NroEquipo = ComunicacionVM.NroEquipo,
                        Modelo = ComunicacionVM.Modelo,
                        Marca = ComunicacionVM.Marca,
                        NroSerie = ComunicacionVM.NroSerie,
                        Estado = ComunicacionVM.Estado,
                        Movil = movilSelec
                    };
                Context.Comunicacion.Add(comunicacion);
            }
            else
            {
                Comunicacion comunicacion = new()
                    {
                        NroEquipo = ComunicacionVM.NroEquipo,
                        Modelo = ComunicacionVM.Modelo,
                        Marca = ComunicacionVM.Marca,
                        NroSerie = ComunicacionVM.NroSerie,
                        Estado = ComunicacionVM.Estado
                    };
                Context.Comunicacion.Add(comunicacion);
            }

            // Limpiar el valor no seleccionado
            if (selectBombero)
            {
                ComunicacionVM.NumeroMovil = null;
            }
            else if (selectMovil)
            {
                ComunicacionVM.NroLegajo = null;
            }

            await Context.SaveChangesAsync();
            await Init();
            StateHasChanged();
            await message.Success("Handie agregado correctamente");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(ComunicacionVM)}");
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
