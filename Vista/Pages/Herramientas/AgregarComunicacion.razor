@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/Herramientas/Comunicacion/agregar"

<style>
    /* tile uploaded pictures */
    .upload-list-inline .ant-upload-list-item {
        float: left;
        width: 200px;
        margin-right: 8px;
    }

    .upload-list-inline [class*='-upload-list-rtl'] .ant-upload-list-item {
        float: right;
    }

    .upload-list-inline .ant-upload-animate-enter {
        animation-name: uploadAnimateInlineIn;
    }

    .upload-list-inline .ant-upload-animate-leave {
        animation-name: uploadAnimateInlineOut;
    }

    #crear-comunicacion {
        background-color: #C43A3A;
        color: white;
        font-size: 20px;
        font-family: calibri light;
        border: 0px;
        border-radius: 8px;
    }

    #blancoA {
        width: 100%;
        padding: 15px;
    }

    #estilo {
        border: 1px;
        border-radius: 8px;
        background-color: #AFAFAF;
    }

    #texto {
        font-size: 20px;
        font-family: calibri light;
        Font-Weight: bold;
    }
</style>

<Form Model="@ComunicacionVM"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    <FormItem Label="Nro Equipo">
        <Input @bind-Value="@ComunicacionVM.NroEquipo" />
    </FormItem>
    <FormItem Label="Modelo">
        <Input @bind-Value="@ComunicacionVM.Modelo" />
    </FormItem>
    <FormItem Label="Marca">
        <Input @bind-Value="@ComunicacionVM.Marca" />
    </FormItem>
    <FormItem Label="Nro Serie">
        <Input @bind-Value="@ComunicacionVM.NroSerie" />
    </FormItem>
    <FormItem Label="Estado">
        <EnumSelect TEnum="TipoEstadoHandie" @bind-Value="@ComunicacionVM.Estado" />
    </FormItem>
    <div>
        <FormItem Label="Elija el bombero que sera asignado">
            <Select TItem="BomberoViweModel"
                    TItemValue="int?"
                    DataSource="@BomberosVM"
            @bind-Value="@ComunicacionVM.NroLegajo"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Selecione a un bombero"
                    DefaultActiveFirstOption="false"
                    EnableSearch
                    AllowClear="true">
            </Select>
        </FormItem>
    </div>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Agregar Bombero
        </Button>
    </FormItem>
</Form>

@code {
    private class ComunicacionViewModel
    {
        [Required, StringLength(255)]
        public string NroEquipo { get; set; }
        public string? Modelo { get; set; }
        public string? Marca { get; set; }
        public string? NroSerie { get; set; }
        public TipoEstadoHandie Estado { get; set; }
        public int? NroLegajo { get; set; }
    }

    BomberosDbContext Context { get; set; }

    ComunicacionViewModel ComunicacionVM { get; set; } = new();
    List<BomberoViweModel> BomberosVM { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        ComunicacionVM = new();
        Context = DbFactory.CreateDbContext();
        await CargarBomberosView();
    }

    public async Task CargarBomberosView()
    {
        BomberosVM = new();
        var bomberos = await Context.Bomberos.Where(b => b.EquipoId == null).ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bomberoVM = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo
                };
            BomberosVM.Add(bomberoVM);
        }
    }

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            if (await Context.Comunicacion.SingleOrDefaultAsync(c => c.NroEquipo == ComunicacionVM.NroEquipo) != null)
            {
                await message.Error("Número de equipo repetido");
                return;
            }

            Bombero? bomberoSelec = await Context.Bomberos.SingleOrDefaultAsync(bom => bom.NumeroLegajo == ComunicacionVM.NroLegajo);
            Comunicacion comunicacion = new()
                {
                    NroEquipo = ComunicacionVM.NroEquipo,
                    Modelo = ComunicacionVM.Modelo,
                    Marca = ComunicacionVM.Marca,
                    NroSerie = ComunicacionVM.NroSerie,
                    Estado = ComunicacionVM.Estado,
                    Bombero = bomberoSelec
                };
            Context.Comunicacion.Add(comunicacion);
            await Context.SaveChangesAsync();

            //navigationManager.NavigateTo($"/Herramientas/Comunicacion", true);

            await Init();
            StateHasChanged();
            await message.Success("Handie agregado correctamente");
        }
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(ComunicacionVM)}");
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
