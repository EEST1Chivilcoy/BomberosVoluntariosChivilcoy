@implements IDisposable
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/Herramientas/AgregarMaterial"
@using static Vista.Pages.Herramientas.AgregarMaterial;
@using Vista.Services
@inject IDepositoService DepositoService
@inject IMessageService message
<Form Model="@MaterialViewModel"
        OnFinish="OnFinish"
        OnFinishFailed="OnFinishFailed"
        LabelColSpan="8"
        WrapperColSpan="16">

    <FormItem Label="Producto">
        <Input @bind-Value="MaterialViewModel.Descripcion" />
    </FormItem>

    <FormItem Label="Codigo de Barra">
        <Input @bind-Value="MaterialViewModel.Codigo" />
    </FormItem>

    <FormItem Label="Fecha">
        <DatePicker TValue="DateTime" DefaultValue="DateTime.Now" @bind-Value="MaterialViewModel.FechaAlta" />
    </FormItem>

    <FormItem Label="Stock">
        <AntDesign.InputNumber @bind-Value="MaterialViewModel.Stock" />
    </FormItem>

    <FormItem Label="Rubro">
        <EnumSelect TEnum="TipoRubro" @bind-Value="MaterialViewModel.Rubro" />
    </FormItem>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="Sumbit">
            Cargar Material
        </Button>
    </FormItem>
</Form>

@code {
    public BomberosDbContext Context;

    public class MaterialVM
    {
        public DateTime FechaAlta { get; set; }
        [Required]
        public string? Descripcion { get; set; }
        [Required]
        public string? Codigo { get; set; }
        public int Stock { get; set; }
        public TipoRubro Rubro { get; set; }
    }

    //variables locales
    public MaterialVM MaterialViewModel { get; set; } = new();

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Material material = new Material()
                {
                    Codigo = MaterialViewModel.Codigo,
                    Descripcion = MaterialViewModel.Descripcion,
                    FechaAlta = MaterialViewModel.FechaAlta,
                    Rubro = MaterialViewModel.Rubro,
                    Stock = MaterialViewModel.Stock
                };
            await DepositoService.AgregarMaterial(material);
            await Init();
            StateHasChanged();
            await message.Success("Material creado correctamente");
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(MaterialViewModel)}");
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        MaterialViewModel = new();
        Context = DbFactory.CreateDbContext();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}