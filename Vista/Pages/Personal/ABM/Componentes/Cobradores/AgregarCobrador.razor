@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Vista.Data.Mappers
@using System.ComponentModel
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Models.Imagenes
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Enums.Personal.ComisionDirectiva
@using Vista.Data.Enums.Personal.Cobrador
@using Vista.Data.Enums.Socios
@using Microsoft.Identity.Web
@using Microsoft.Graph
@using AntDesign

@attribute [Authorize]
@page "/fire-force/personal/cobrador/agregar"

@*Servicios Utilizados*@
@using Vista.Services
@inject IMessageService message
@inject NavigationManager navigationManager
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ICobradorService CobradorService

<style>
	/* Estilos generales */
	.container {
		padding: 24px !important;
		min-height: 100vh !important;
	}

	.page-title {
		font-size: 24px !important;
		font-weight: 600 !important;
		color: #1f1f1f !important;
		margin-bottom: 24px !important;
		display: flex !important;
		align-items: center !important;
	}

	.page-title-icon {
		margin-right: 12px !important;
		color: #c43a3a !important;
	}

	.card {
		background-color: white !important;
		border-radius: 8px !important;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08) !important;
		padding: 24px !important;
		margin-bottom: 24px !important;
	}

	.card-title {
		font-size: 18px !important;
		font-weight: 500 !important;
		color: #434343 !important;
		margin-bottom: 16px !important;
		padding-bottom: 12px !important;
		border-bottom: 1px solid #f0f0f0 !important;
	}

	/* Estilos de la foto */
	.profile-photo-container {
		display: flex !important;
		flex-direction: column !important;
		align-items: center !important;
		padding: 16px !important;
	}

	.photo-preview {
		width: 150px !important;
		height: 150px !important;
		border-radius: 50% !important;
		overflow: hidden !important;
		margin-bottom: 16px !important;
		display: flex !important;
		align-items: center !important;
		justify-content: center !important;
	}

	.upload-actions {
		display: flex !important;
		gap: 8px !important;
	}

	/* Estilo para las secciones del formulario */
	.form-section {
		margin-bottom: 24px !important;
	}

	/* Estilo para los botones de acción */
	.action-buttons {
		display: flex !important;
		justify-content: flex-end !important;
		gap: 12px !important;
		margin-top: 24px !important;
	}

	/* Estilo para los campos */
	.ant-form-item {
		margin-bottom: 16px !important;
	}

	.ant-form-item-label > label {
		color: #595959 !important;
		font-weight: 500 !important;
	}

	.ant-input,
	.ant-select:not(.ant-select-customize-input) .ant-select-selector,
	.ant-picker,
	.ant-input-number {
		border-radius: 4px !important;
		border: 1px solid #d9d9d9 !important;
	}

		.ant-input:hover,
		.ant-select:not(.ant-select-customize-input) .ant-select-selector:hover,
		.ant-picker:hover,
		.ant-input-number:hover {
			border-color: #c43a3a !important;
		}

		.ant-input:focus,
		.ant-select-focused:not(.ant-select-customize-input) .ant-select-selector,
		.ant-picker-focused,
		.ant-input-number-focused {
			border-color: #c43a3a !important;
			box-shadow: 0 0 0 2px rgba(196, 58, 58, 0.2) !important;
		}

	/* Ajuste visual para el switch */
	.ant-switch-checked {
		background-color: #c43a3a !important;
	}

	/* Estilo para campos requeridos */
	.required-field::after {
		content: '*' !important;
		color: #c43a3a !important;
		margin-left: 4px !important;
	}

	/* Estilo para el campo condicional de chofer */
	.conditional-field {
		margin-top: 12px !important;
		padding-top: 12px !important;
		border-top: 1px dashed #f0f0f0 !important;
	}
</style>

<div class="container">
	<div class="page-title">
		<div>
			<Icon Type="fund" Theme="IconThemeType.Fill" Class="page-title-icon" />
			<span>Registro de Nuevo Cobrador</span>
		</div>
	</div>

	@if (personalView != null)
	{
		<Form Model="@personalView"
			  Layout="FormLayout.Vertical"
			  OnFinish="OnFinish"
			  OnFinishFailed="OnFinishFailed">

			@*Información Personal (Común para todos)*@
			<div class="card">
				<div class="card-title">Información Personal</div>
				<AntDesign.Row Gutter="24">
					<AntDesign.Col Span="6">
						<div class="profile-photo-container">
							<div class="photo-preview">
								@if (ImageUrlPreview != null)
								{
									<Avatar Src="@ImageUrlPreview" Alt="Foto de perfil" Size="@("10rem")" />
								}
								else
								{
									<Avatar Icon="@IconType.Outline.User" Size="@("10rem")" />
								}
							</div>
							@if (ImageUrlPreview == null)
							{
								<div class="upload-actions">
									<Button Type="@ButtonType.Primary" Danger>
										<Icon Type="close" /> No se ha cargado ninguna foto
									</Button>
								</div>
							}
						</div>
					</AntDesign.Col>
					<AntDesign.Col Span="18">
						<AntDesign.Row Gutter="16">
							<AntDesign.Col Span="8">
								<FormItem Label="Nombre" Required>
									<Input @bind-Value="@personalView.Nombre" Disabled />
								</FormItem>
							</AntDesign.Col>
							<AntDesign.Col Span="8">
								<FormItem Label="Apellido" Required>
									<Input @bind-Value="@personalView.Apellido" Disabled />
								</FormItem>
							</AntDesign.Col>
							<AntDesign.Col Span="8">
								<FormItem Label="U.P.N" Required>
									<AntDesign.Input @bind-Value="@personalView.UPN">
										<AddOnAfter>
											<label>@@bomberoschivilcoy.org.ar</label>
											<AntDesign.Button Type="ButtonType.Primary"
															  Size="ButtonSize.Small"
															  OnClick="@(() => BusquedaPorUPN(personalView.UPN))"
															  Loading="@isSearching">
												<Icon Type="search" />
											</AntDesign.Button>
										</AddOnAfter>
									</AntDesign.Input>
								</FormItem>
							</AntDesign.Col>
						</AntDesign.Row>

						<AntDesign.Row Gutter="16">
							<AntDesign.Col Span="8">
								<FormItem Label="DNI" Required>
									<Input @bind-Value="@personalView.Documento" Placeholder="Ingrese el DNI" />
								</FormItem>
							</AntDesign.Col>
							<AntDesign.Col Span="8">
								<FormItem Label="Fecha de Nacimiento">
									<DatePicker @bind-Value="@personalView.FechaNacimiento"
												Picker="@DatePickerType.Date"
												Style="width: 100%;"
												Placeholder="@("Seleccione fecha")"
												AllowClear />
								</FormItem>
							</AntDesign.Col>
							<AntDesign.Col Span="8">
								<FormItem Label="Lugar de nacimiento">
									<Input @bind-Value="@personalView.LugarNacimiento" Placeholder="Ingrese lugar de nacimiento" />
								</FormItem>
							</AntDesign.Col>
						</AntDesign.Row>

						<AntDesign.Row Gutter="16">
							<AntDesign.Col Span="12">
								<FormItem Label="Dirección">
									<Input @bind-Value="@personalView.Direccion" Placeholder="Ingrese dirección" />
								</FormItem>
							</AntDesign.Col>
							<AntDesign.Col Span="6">
								<FormItem Label="Sexo">
									<EnumSelect TEnum="TipoSexo" @bind-Value="@personalView.Sexo" />
								</FormItem>
							</AntDesign.Col>
							<AntDesign.Col Span="6">
								<FormItem Label="Grupo Sanguíneo">
									<EnumSelect TEnum="TipoGrupoSanguineo ?" @bind-Value="@personalView.GrupoSanguineo" AllowClear />
								</FormItem>
							</AntDesign.Col>
						</AntDesign.Row>
					</AntDesign.Col>
				</AntDesign.Row>
			</div>

			@*Información Profesional*@
			<div class="card">
				<div class="card-title">Información Profesional</div>

				<AntDesign.Row Gutter="16">
					<AntDesign.Col Span="6">
						<FormItem Label="Estado">
							<EnumSelect TEnum="EstadoCobrador" @bind-Value="@personalView.Estado" AllowClear />
						</FormItem>
					</AntDesign.Col>
					<AntDesign.Col Span="6">
						<FormItem Label="Zonas asignadas">
							<EnumSelect Mode="SelectMode.Multiple" TEnum="Zona" @bind-Value="@personalView.ZonasAsignadas" AllowClear />
						</FormItem>
					</AntDesign.Col>
				</AntDesign.Row>
				<AntDesign.Row Gutter="16">
					<AntDesign.Col Span="8">
						<FormItem Label="Fecha de Aceptación">
							<DatePicker @bind-Value="@personalView.FechaAceptacion"
										Picker="@DatePickerType.Date"
										Style="width: 100%;"
										Placeholder="@("Seleccione fecha")"
										AllowClear />
						</FormItem>
					</AntDesign.Col>
				</AntDesign.Row>

			</div>

			@*Información de Contacto*@
			<div class="card">
				<div class="card-title">Información de Contacto</div>
				<AntDesign.Row Gutter="16">
					<AntDesign.Col Span="6">
						<FormItem Label="Teléfono Celular">
							<Input @bind-Value="@personalView.TelefonoCel" Placeholder="Ingrese teléfono celular" />
						</FormItem>
					</AntDesign.Col>
					<AntDesign.Col Span="6">
						<FormItem Label="Teléfono Fijo">
							<Input @bind-Value="@personalView.TelefonoFijo" Placeholder="Ingrese teléfono fijo" />
						</FormItem>
					</AntDesign.Col>
					<AntDesign.Col Span="6">
						<FormItem Label="Teléfono Laboral">
							<Input @bind-Value="@personalView.TelefonoLaboral" Placeholder="Ingrese teléfono laboral" />
						</FormItem>
					</AntDesign.Col>
					<AntDesign.Col Span="6">
						<FormItem Label="Email">
							<Input @bind-Value="@personalView.Email" Placeholder="Ingrese email" />
						</FormItem>
					</AntDesign.Col>
				</AntDesign.Row>
			</div>

			@*Botones de Acción*@
			<div class="action-buttons">
				<Button Type="@ButtonType.Default" OnClick="Cancelar">
					Cancelar
				</Button>
				<Button Type="@ButtonType.Primary" HtmlType="submit" Class="primary-button" OnClick="CrearCobrador">
					Registrar Cobrador
				</Button>
			</div>
		</Form>
	}
	else
	{
		<div>
			<p>Error: No se ha inicializado correctamente el formulario.</p>
		</div>
	}
</div>

@code {
	private CobradorViewModel? personalView = new();
	private ImageViewModel imageViewModel = new();
	private CancellationTokenSource? _debounceTokenSource;
	private bool isSearching = false;

	private string? ImageUrlPreview => imageViewModel.Base64 != null
		? $"data:{imageViewModel.TipoImagen};base64,{imageViewModel.Base64}"
		: null;

	private class ImageViewModel
	{
		public string? Base64 { get; set; }
		public string? TipoImagen { get; set; }
		public string? NombreImagen { get; set; }
	}

	public Task Cancelar()
	{
		navigationManager.NavigateTo($"/personal/cobradores", true);
		return Task.CompletedTask;
	}

	public async Task CrearCobrador()
	{
		try
		{
			if (personalView == null)
			{
				await message.ErrorAsync("Ocurrió un error al crear el cobrador.");
				return;
			}

			if (personalView.Documento == 0)
			{
				await message.ErrorAsync("El número de documento no puede ser cero.");
				return;
			}

			if (personalView is not CobradorViewModel cobradorView)
			{
				await message.ErrorAsync("Ocurrió un error al crear el miembro de comisión directiva.");
				return;
			}

			// Preparar el objeto Cobrador para enviarlo al servicio
			Cobrador cobrador = new Cobrador()
			{
				// --- Información Personal ---

				Nombre = cobradorView.Nombre,
				Apellido = cobradorView.Apellido,
				EntraId = cobradorView.EntraID,
				Documento = cobradorView.Documento,
				FechaNacimiento = cobradorView.FechaNacimiento,
				LugarNacimiento = cobradorView.LugarNacimiento,
				Direccion = cobradorView.Direccion,
				Sexo = cobradorView.Sexo,
				GrupoSanguineo = cobradorView.GrupoSanguineo,

				// --- Información Profesional ---

				Estado = cobradorView.Estado,
				ZonasAsignadas = cobradorView.ZonasAsignadas,
				FechaAceptacion = cobradorView.FechaAceptacion,

				// --- Información de Contacto ---
				Contacto = new Contacto
				{
					TelefonoCel = cobradorView.TelefonoCel,
					TelefonoFijo = cobradorView.TelefonoFijo,
					TelefonoLaboral = cobradorView.TelefonoLaboral,
					Email = cobradorView.Email
				}
			};

			// Preparar la foto si existe

			Imagen_Personal? foto = null;

			if (imageViewModel.Base64 != null && imageViewModel.TipoImagen != null && imageViewModel.NombreImagen != null)
			{
				foto = new Imagen_Personal
				{
					NombreImagen = imageViewModel.NombreImagen,
					TipoImagen = imageViewModel.TipoImagen,
					Base64Imagen = imageViewModel.Base64
				};
			}

			// Creamos el cobrador
			await CobradorService.CrearCobrador(cobrador, foto);

			cobrador = new();
			StateHasChanged();
			message.Success("Se agregó el cobrador.");
			navigationManager.NavigateTo($"/personal/cobradores", true);
		}
		catch (Exception ex)
		{
			await message.ErrorAsync("Ocurrió un error al crear el cobrador.");
			await message.ErrorAsync($"Error: {ex.Message}");
		}
	}

	public async Task BusquedaPorUPN(string upn)
	{
		if (string.IsNullOrWhiteSpace(upn))
		{
			await message.ErrorAsync("El UPN no puede estar vacío.");
			return;
		}

		// Cancelar cualquier búsqueda anterior
		_debounceTokenSource?.Cancel();
		_debounceTokenSource = new CancellationTokenSource();
		var token = _debounceTokenSource.Token;

		try
		{
			isSearching = true;
			StateHasChanged();

			// Debounce de 500ms
			await Task.Delay(500, token);

			// Construir el UPN completo
			string fullUpn = upn.Contains("@") ? upn : $"{upn}@bomberoschivilcoy.org.ar";

			// Buscar usuario
			var user = await GraphServiceClient.Users[fullUpn]
				.Request()
				.Select(u => new
				{
					u.Id,
					u.GivenName,
					u.Surname,
					u.UserPrincipalName
				})
				.GetAsync(token);

			if (user == null)
			{
				await message.ErrorAsync($"No se encontró ningún usuario con el UPN '{fullUpn}'.");
				return;
			}

			// Inicializar variables de imagen
			string? photoBase64 = null;
			string? contentType = null;
			string? nombreImagen = null;

			// Intentar obtener la foto del usuario
			try
			{
				// Primero obtener metadata de la foto
				var photoMetadata = await GraphServiceClient.Users[fullUpn]
					.Photo
					.Request()
					.GetAsync(token);

				if (photoMetadata != null)
				{
					// Obtener el stream de la foto
					var photoStream = await GraphServiceClient.Users[fullUpn]
						.Photo
						.Content
						.Request()
						.GetAsync(token);

					if (photoStream != null)
					{
						using var ms = new MemoryStream();
						await photoStream.CopyToAsync(ms, token);
						photoBase64 = Convert.ToBase64String(ms.ToArray());

						// Determinar el tipo MIME
						contentType = photoMetadata.AdditionalData?.ContainsKey("@odata.mediaContentType") == true
							? photoMetadata.AdditionalData["@odata.mediaContentType"]?.ToString()
							: "image/jpeg";

						var extension = contentType?.Split('/').LastOrDefault() ?? "jpg";
						nombreImagen = $"foto_{upn.Replace("@", "_").Replace(".", "_")}.{extension}";
					}
				}
			}
			catch (ServiceException photoEx) when (photoEx.StatusCode == System.Net.HttpStatusCode.NotFound)
			{
				// El usuario no tiene foto, continuar sin ella
				nombreImagen = null;
				photoBase64 = null;
				contentType = null;
			}

			// Asignar datos al modelo
			personalView.Nombre = user.GivenName ?? string.Empty;
			personalView.Apellido = user.Surname ?? string.Empty;
			personalView.EntraID = Guid.Parse(user.Id);
			personalView.UPN = upn; // Solo la parte antes del @

			// Asignar imagen
			imageViewModel.Base64 = photoBase64;
			imageViewModel.TipoImagen = contentType;
			imageViewModel.NombreImagen = nombreImagen;

			await message.SuccessAsync($"Usuario encontrado: {user.GivenName} {user.Surname}");
			StateHasChanged();
		}
		catch (ServiceException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
		{
			await message.ErrorAsync($"No se encontró ningún usuario con el UPN '{upn}@bomberoschivilcoy.org.ar'.");
		}
		catch (ServiceException ex) when (ex.Error?.Code == "ErrorAccessDenied")
		{
			await message.ErrorAsync("No tienes permisos para buscar usuarios. Contacta al administrador.");
		}
		catch (MicrosoftIdentityWebChallengeUserException ex)
		{
			// Manejar el caso de consentimiento requerido
			ConsentHandler.HandleException(ex);
		}
		catch (TaskCanceledException)
		{
			// Ignorar cancelaciones por debounce
		}
		catch (Exception ex)
		{
			await message.ErrorAsync($"Error al buscar usuario: {ex.Message}");
			Console.WriteLine($"Error detallado: {ex}");
		}
		finally
		{
			isSearching = false;
			StateHasChanged();
		}
	}

	User? user;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			user = await GraphServiceClient.Me.Request().GetAsync();
		}
		catch (Exception ex)
		{
			ConsentHandler.HandleException(ex);
		}
	}

	private void OnFinish(EditContext editContext)
	{
		Console.WriteLine($"Success:{JsonSerializer.Serialize(personalView)}");
	}

	private void OnFinishFailed(EditContext editContext)
	{
		Console.WriteLine($"Failed:{JsonSerializer.Serialize(personalView)}");
	}
}