@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@using System.ComponentModel
@using AntDesign.TableModels
@page "/moviles/movil/{VehiculoId:int?}"
<style>
    #ImagenMovil {
        border: 1px solid ##BABABA;
        min-width: 380px;
        min-height: 200px;
        border-radius: 2px;
        width: 100%;
    }

    .ant-table-pagination.ant-pagination {
        display: none!important;
    }
</style>
@if (existe)
{
    <div style="display: flex;gap: 20px;">
        <Button Type="primary" OnClick="@(()=>{ navigationManager.NavigateTo("/moviles"); })">
            Volver
        </Button>
        <Button Type="primary" OnClick="@(()=>{ _visible = true; })">
            Ver info
        </Button>
    </div>
    
    <Modal Title="@title"
           Visible="@_visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel">
        <div>
            <img id="ImagenMovil" src="data:@imagenView.TipoImagen;base64,@imagenView.Base64" />
        </div>
        <br>
        <div>
            <Table TItem="Data" DataSource="data" Responsive>
                <PropertyColumn Property="c=>c.Tipo"> @movilView.Tipo </PropertyColumn>
                <PropertyColumn Property="c=>c.Encargado">@movilView.EncargadoNombre</PropertyColumn>
                <PropertyColumn Property="c=>c.Marca"> @movilView.Marca </PropertyColumn>
                <PropertyColumn Property="c=>c.Modelo">@movilView.Modelo</PropertyColumn>
                <PropertyColumn Property="c=>c.Patente">@movilView.Patente</PropertyColumn>
            </Table>
        </div>
    </Modal>
}
else if (!existe)
{
    <h5>No existe este movil</h5>
}

@code {
    Data[] data = new Data[]
    {
        new()
        {
            Key = "1",
            Tipo = "John Brown",
            Encargado = 32,
            Marca = "New York No. 1 Lake Park",
            Modelo = "developer",
            Patente = ""
        }
    };

    public record Data
    {
        public string Key { get; set; }

        public string Tipo { get; set; }

        public int Encargado { get; set; }

        public string Marca { get; set; }

        public string Modelo { get; set; }

        public string Patente { get; set; }
    }
}
@code {
    string title = "Movil info";
    bool _visible = true;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
}
@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    public class MovilViewModel
    {
        public int EncargadoId { get; set; }
        [Required, StringLength(255)]
        public string EncargadoNombre { get; set; }
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)]
        public string NumeroMovil { get; set; }
        [Required, StringLength(255)]
        public string NumeroMotor { get; set; }
        [Required, StringLength(255)]
        public string NumeroChasis { get; set; }
        public TipoEstadoMovil Estado { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }


    public ImagenViewModel imagenView { get; set; } = new();
    public MovilViewModel movilView { get; set; } = new();
    public bool existe;


    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        Movil? movil = await db.Moviles.Include(m => m.Bomberos).ThenInclude(b => b.Bombero).Where(m => m.VehiculoId == VehiculoId).SingleOrDefaultAsync();

        if (movil is not null)
        {
            movilView.Marca = movil.Marca;
            movilView.Modelo = movil.Modelo;
            movilView.Año = movil.Año;
            movilView.Patente = movil.Patente;
            movilView.Tipo = movil.Tipo;
            movilView.NumeroMovil = movil.NumeroMovil;
            movilView.NumeroMotor = movil.NumeroMotor;
            movilView.NumeroChasis = movil.NumeroChasis;
            movilView.Estado = movil.Estado;
            foreach (MovilBombero b in movil.Bomberos)
            {
                if (b.Rol == TipoRol.Encargado)
                {
                    movilView.EncargadoId = b.Bombero.PersonaId;
                    movilView.EncargadoNombre = $"{b.Bombero.Nombre} {b.Bombero.Apellido}";
                }
            }
            ImagenMovil? imagen = await db.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
                imagenView.Base64 = imagen.Base64Imagen;
            }
            existe = true;
        }
        else if (movil is null)
        {
            existe = false;
        }
    }

    public async void EliminarMovil()
    {
        using var db = DbFactory.CreateDbContext();

        Movil? movil = await db.Moviles.Where(m => m.NumeroMovil == movilView.NumeroMovil).SingleOrDefaultAsync();

        if (movil is not null)
            db.Remove(movil);
        await db.SaveChangesAsync();

        navigationManager.NavigateTo("/moviles");
    }

}
