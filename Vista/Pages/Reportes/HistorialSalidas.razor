@page "/Reportes/HistorialSalidas"
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.ViewModels.FactorClimatico;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.MaterialesPeligrosos;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.ViewModels.Accidente;
@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Rescates;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;


<style>
    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 1em;
        padding: 0;
        overflow: auto;
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    .ant-modal-body {
        padding: 4px;
        font-size: 14px;
        line-height: 1.5715;
        word-wrap: break-word;
    }
</style>

<div class="template">
    <Table DataSource="salidasViewModel" OnChange="OnChange" TItem="SalidasViewModel1" Responsive PageSize="6">
        <TitleTemplate>
            <GridRow>
                <GridCol Span="8" Offset="12">
                    <Search Placeholder="Buscar el bombero " @bind-Value="searchString" OnSearch="()=>_table?.ReloadData()" />
                    <Title Level="2">Registro Salidas</Title>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="N° Parte" Property="c=>c.NumeroParte"
                            DefaultSortOrder="@SortDirection.Descending"
                            SorterCompare="@((a,b)=> a - b)" />
            <PropertyColumn Title="Direccion" Property="c=>c.EntreCalles"
                            DefaultSortOrder="@SortDirection.Descending"
                             />
             <TableFilter MatchMode="MatchMode.Contains" FilterCallback="OnFilterChanged" />
            <PropertyColumn Title="Tipo Salida" Property="c=>c.Discriminador"
                            SortDirections="new[] { SortDirection.Descending }"
                            Filters="DiscriminadorFilter"
                            OnFilter="((value,name)=>Enum.GetName(typeof(TipoSalida), name).StartsWith(Enum.GetName(typeof(TipoSalida), value)))" />

            <ActionColumn Title="Action">

                <Dropdown Trigger="@(new Trigger[] { Trigger.Click })" OnClick='e => { Console.WriteLine("Dropdown button clicked."); }'>
                    <Overlay>
                        <Menu>
                            <MenuItem>
                                <Button Class="boton_p" OnClick="()=>ShowModalEditar(context.SalidaId)">Editar</Button>
                            </MenuItem>
                            <MenuItem>
                                <Button Class="boton_p" OnClick="()=>ShowModalDetalle(context.SalidaId)">Detalles</Button>
                            </MenuItem>
                        </Menu>;
                    </Overlay>
                    <ChildContent>
                        <Button class="boton_p">Acciones<Icon Type="down" /></Button>
                    </ChildContent>
                </Dropdown>

            </ActionColumn>
        </ColumnDefinitions>
    
    </Table>
 </div>

@*-----------------------------------------------------------Modal Detalles-----------------------------------------------------------------------------------------*@


@if (mostrarDetalle is true)
{
    <ImprimirModal AnioNumeroParte="@anioNumeroParte" NumeroParte="@NumeroParte"/>
}
@if (mostrarEditar is true)
{
    <EditarSalida @key="salidaId" salidaId="salidaId" />
    mostrarEditar = false;
}



@*Se traen los datos de salida generales y discriminador*@
@code {
    bool autoCOnfir = false;
    string searchString;
    IEnumerable<Salida> dataSource;
    ITable _table;
    int _total = 0;
    TipoSalida discriminadoresSalidas;

    List<SalidasViewModel1>? salidasViewModel = new List<SalidasViewModel1>();
    List<string> discriminadores = new List<string>();
    private TableFilter<TipoSalida>[] DiscriminadorFilter;
    List<SalidasViewModel1>? salidasViewModelCarga = new List<SalidasViewModel1>();
    List<Salida>? salidas;
    Bombero[] TodosBomberos;
    Movil[] Moviles;
    public List<BomberoViweModel> bomberoChoferes = new();


    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        //Llamo a los datos de la tabla sallida co sus respectivas listas y objetos
        salidas = db.Set<Salida>()
        .Include(s => s.Moviles)
            .ThenInclude(ms => ms.Movil)

            .Include(s => s.Moviles)
            .ThenInclude(ms => ms.Chofer)
        .Include(s => s.CuerpoParticipante).ThenInclude(cp => cp.Bombero)
        .Include(s => s.ReceptorBombero).ThenInclude(rb => rb.Contacto)
        .Include(s => s.Encargado).ThenInclude(e => e.Brigada)
        .Include(s => s.QuienLleno).ThenInclude(ql => ql.Brigada)
        .ToList();

        //traigo el discriminados de cada elemento la tabla salidas
        foreach (var entidad in salidas)
        {
            var entry = db.Entry(entidad);
            var entityType = entry.Metadata;
            var discriminatorProperty = entityType.FindDiscriminatorProperty();
            var discriminatorValue = entry.CurrentValues[discriminatorProperty];

            string discriminador = discriminatorValue?.ToString();
            int discriminadorNumero = (int.Parse(discriminador)) - 1;// le bajo un valor para que sea congruente a como esta cargado en el 
                                                                     //enum tipo salida(empiezan desde el valor 0 y en el dbContext empieza desde el 1)
            discriminador = discriminadorNumero.ToString();
            discriminadores.Add(discriminador);
        }
        GetSalidasViewModel(salidas);

        //Filtro del discriminador, le asigno un valor de un enum a cada numero discriminador
        DiscriminadorFilter = new TableFilter<TipoSalida>[Enum.GetValues(typeof(TipoSalida)).Length];
        int i = 0;
        foreach (TipoSalida value in Enum.GetValues(typeof(TipoSalida)))
        {
            DiscriminadorFilter[i] = new() { Text = Enum.GetName(typeof(TipoSalida), value), Value = value };
            i++;
        }

        TodosBomberos = await db.Bomberos.ToArrayAsync();
        Moviles = await db.Moviles.ToArrayAsync();
        StateHasChanged();
    }

    void OnChange(QueryModel<SalidasViewModel1> query)
    {
        Console.WriteLine(JsonSerializer.Serialize(query));
    }

    void OnRowClick(RowData<SalidasViewModel1> row)
    {
        Console.WriteLine($"row {row.Data.SalidaId} was clicked");
    }

    private async void Delete(int id)
    {
        using var context = DbFactory.CreateDbContext();
        Salida? salida = await context.Set<Salida>().Where(s => s.NumeroParte == id).SingleOrDefaultAsync();
        context.Remove(salida);
        salidas = salidas.Where(x => x.NumeroParte != id).ToList();
        salidasViewModel = salidasViewModel.Where(x => x.NumeroParte != id).ToList();
        _total = salidas.Count;
        
        await context.SaveChangesAsync();
        StateHasChanged();
    }
}

@*Carga de modales para mostrar detalles*@
@code{
    private AccidenteViewModels accidenteViewModels = new();
    private FactorClimaticoViewModels factorClimaticoViewModel = new();
    private MaterialPeligrosoViewModels materialPeligrosoViewModel = new();
    private RescateAnimaViewModels rescateAnimalViewModel = new();
    private RescatePersonaViewModels rescatePersonaViewModel = new();
    private IncendioViewModels IncendioViewModel = new();
    private IncendioEstablecimientoEducativoViewModels incendioEstablecimientoEducativoViewModel = new();
    private IncendioEstablecimientoPublicoViewModels incendioEstablecimientoPublicoViewModel = new();
    private IncendioForestaViewModels IncendioForestalViewModel = new();
    private IncendioHospitalesYClinicasViewModels IncendioHospitalesYClinicasViewModel = new();
    private IncendioIndustriaViewModels IncendioIndustriaViewModel = new();
    private IncendioViviendaViewModels IncendioViviendaViewModel = new();
    private IncendioComercioViewModels IncendioComercioViewModel = new();

    private Data.ViewModels.Servicios.ServicioEspecialPrevencionViewModels servicioEspecialPrevencionViewModel = new();
    private Data.ViewModels.Servicios.ServicioEspecialRepresentacionViewModels servicioEspecialRepresentacionViewModel = new();
    private Data.ViewModels.Servicios.ServicioEspecialPrevencionViewModels servicioEspecialViewModel = new();

    List<AccidenteViewModels> accidentesVM = new List<AccidenteViewModels>();

    private async void  GetSalidasViewModel(List<Salida> salidas)
    {
        //db.Set<Salida>().ToList();
        using var context = await DbFactory.CreateDbContextAsync();


        int contador = 0;
        foreach (Salida s in salidas)
        {
            List<Damnificado>? damificado = await context.Damnificados
                .Where(D => D.SalidaId == s.SalidaId).Include(vd => vd.VehiculoDamnificado).ThenInclude(seg =>seg.Seguro)
                .ToListAsync();
            SalidasViewModel1 NuevaSalidaVM = new SalidasViewModel1()
            {
                    SalidaId = s.SalidaId,
                    FechaSalida = s.HoraSalida.Date,
                    TimeSalida = TimeOnly.FromDateTime(s.HoraSalida),
                    TimeLlegada = TimeOnly.FromDateTime(s.HoraLlegada),
                    //KmSalida= s.KmSalida,
                    //KmLlegada=s.KmLlegada,
                    NumeroParte= s.NumeroParte,
                    Descripcion=s.Descripcion,
                    CalleORuta=s.CalleORuta,
                    NumeroOKilometro=s.NumeroOKilometro,
                    EntreCalles= s.EntreCalles,
                    PisoNumero= s.PisoNumero,
                    Depto=s.Depto,
                    TipoZona=s.TipoZona,
                    NombreSolicitante= s.NombreSolicitante,
                    ApellidoSolicitante= s.ApellidoSolicitante,
                    DniSolicitante=s.DniSolicitante,
                    TelefonoSolicitante= s.TelefonoSolicitante,
                    NombreYApellidoReceptor=s.NombreYApellidoReceptor,
                    ReceptorId=s.ReceptorId,
                    ReceptorBombero = s.ReceptorBombero,
                    Damnificados = damificado,
                    Moviles = s.Moviles,
                    Seguro=s.Seguro,
                    CuerpoParticipante = s.CuerpoParticipante,
                    EncargadoId=s.EncargadoId,
                    Encargado= s.Encargado,
                    QuienLleno = s.QuienLleno,
                    QuienLlenoId=s.QuienLlenoId,
                    TipoServicio=s.TipoServicio,
                    Discriminador = (TipoSalida)int.Parse(discriminadores[contador])
            };
            
            salidasViewModel.Add(NuevaSalidaVM);

            contador++;
        }
        StateHasChanged();

    }
}


@*Modal Editar*@




@code {
    int numeroParteVisualizar;
    public bool mostrarDetalle= false;
    public bool mostrarEditar= false;
    int salidaId;
    int anioNumeroParte;
    int NumeroParte;

    private void ShowModalDetalle(int Id)
    {

        var salida = salidas.FirstOrDefault(n => n.SalidaId == Id);
        salidaId = Id;
        NumeroParte = salida.NumeroParte;
        anioNumeroParte = salida.AnioNumeroParte;

        mostrarDetalle = true;
    }

    private void ShowModalEditar(int Id)
    {
        numeroParteVisualizar = salidasViewModel.FindIndex(n => n.SalidaId == Id);
        mostrarEditar= true;
        salidaId = Id;
    }
    
}