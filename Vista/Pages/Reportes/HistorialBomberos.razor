@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/Reportes/HistorialBomberos"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Pages.Bomberos;

<div style="margin-top: 2em;">
    <Table DataSource="BomberosVM" PageSize="6" Bordered>
        <TitleTemplate>
            <GridRow>
                <GridCol Span="4">
                    <Title Level="3">Bomberos</Title>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Property="c=>c.NumeroLegajo" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.NombreYApellido" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Grado"
                            SortDirections="new[] { SortDirection.Descending }"
                            Filters="EscalafonJerarquicoFilter"
                            OnFilter="((value,name)=>Enum.GetName(typeof(EscalafonJerarquico), name).StartsWith(Enum.GetName(typeof(EscalafonJerarquico), value)))" />
            <PropertyColumn Property="c=>c.TelefonoCel" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.TelefonoFijo" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.TelefonoLaboral" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Email" Sortable></PropertyColumn>
        </ColumnDefinitions>
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
         @* No funciona, hay que hacer lo mismo que en ImprimirReporteMovil.razor *@
         <Button OnClick="@(() => { navigationManager.NavigateTo($"/HistorialBomberos/Imprimir"); })">Imprimir</Button>
    </div>
</div>

@code {

    private Brigada[]? brigadas;

    BomberosDbContext Context;

    List<Vista.Data.ViewModels.Personal.BomberoViweModel> todosLosBomberos = new();
    List<Vista.Data.ViewModels.Personal.BomberoViweModel> Preferencia = new();

    private TableFilter<EscalafonJerarquico>[] EscalafonJerarquicoFilter;

    IEnumerable<Bombero> dataSource;
    IEnumerable<Bombero> selectedRows;
    ITable table;

    static DateTime hasta = DateTime.Now;
    static DateTime desde = hasta.AddMonths(-1);

    List<Vista.Data.ViewModels.Personal.BomberoViweModel>? BomberosVM = new();
    List<Bombero>? bomberosRespaldo = new List<Bombero>();

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    bool _visible = false;
    bool _visibleDetalle = false;
    int idBombero;

    private async Task cargarbomberosVM()
    {
        var bomberos = await Context.Bomberos.ToListAsync();
        foreach (var a in bomberos)
        {
            var contacto = await Context.Contactos.Where(c => c.PersonaId == a.PersonaId).SingleOrDefaultAsync();
            Vista.Data.ViewModels.Personal.BomberoViweModel Bm = new()
            {
                NumeroLegajo = a.NumeroLegajo,
                Nombre = a.Nombre,
                Apellido = a.Apellido,
                Grado = a.Grado,
                TelefonoCel = contacto.TelefonoCel,
                TelefonoFijo = contacto.TelefonoFijo,
                TelefonoLaboral = contacto.TelefonoLaboral,
                Email = contacto.Email
            };
            BomberosVM.Add(Bm);
        }
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        await cargarbomberosVM();


        EscalafonJerarquicoFilter = new TableFilter<EscalafonJerarquico>[Enum.GetValues(typeof(EscalafonJerarquico)).Length];
        int i = 0;
        foreach (EscalafonJerarquico value in Enum.GetValues(typeof(EscalafonJerarquico)))
        {
            EscalafonJerarquicoFilter[i] = new() { Text = Enum.GetName(typeof(EscalafonJerarquico), value), Value = value };
            i++;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

}