@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IJSRuntime JSRuntime;

@page "/Reportes/HistorialBomberos"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Pages.Bomberos;
@using Vista.Data.Models.Grupos.Brigadas;
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes

<style>
    .ant-table-cell {
        min-width: 100px!important;
    }


    .ant-table-content{
        min-width: 300px !important;
    }

    .ant-table{
        min-width: min-content;
    }

    @@media (max-width: 960px){
        .ant-table-row, .ant-table-row-level-0 {
            display: flex !important;
            flex-direction: column !important;
        }

        .ant-table.ant-table-bordered > .ant-table-title{
            height: 15em !important;
        }

        #ant-blazor-df7d6d62-e78b-479a-b209-8325c3889500{
            width: 100%!important;
        }

        #ant-blazor-409acdf0-1470-4ab2-9ad6-e328b6913485{
            align-items: flex-start!important;
        }

        .notificacion{
            margin-top: 15px!important;
        }

        .inpt-cont-inline {
            flex-direction: column !important;
            gap: 0 !important;
        }
    }

    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 1em;
        padding: 0;
        overflow: auto;
    }
</style>

<div class="template">
    <Table DataSource="BomberosVM" PageSize="6" Responsive Bordered Style="min-width: 300px;">
        <ColumnDefinitions>
            <PropertyColumn Property="c=>c.NumeroLegajo" Title="Numero de Legajo" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.NombreYApellido" Title="Nombre Y Apellido" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Grado"
                            SortDirections="new[] { SortDirection.Descending }"
                            Filters="EscalafonJerarquicoFilter"
                            OnFilter="((value,name)=>Enum.GetName(typeof(EscalafonJerarquico), name).StartsWith(Enum.GetName(typeof(EscalafonJerarquico), value)))" />
            <PropertyColumn Property="c=>c.TelefonoCel" Title="Telefono Cel" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.TelefonoFijo" Title="Telefono Fijo" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.TelefonoLaboral" Title="Telefono Laboral" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Email" Sortable></PropertyColumn>
        </ColumnDefinitions>
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
        <Button OnClick="@(async () => await GenerarYMostrarPDF())">Imprimir</Button>
        <Button OnClick="@(async () => await GuardarEnExcel())">Exportar en Excel</Button>
    </div>
</div>

@code {

    private Brigada[]? brigadas;

    BomberosDbContext Context;

    private TableFilter<EscalafonJerarquico>[] EscalafonJerarquicoFilter;

    IEnumerable<Bombero> dataSource;
    IEnumerable<Bombero> selectedRows;
    ITable table;

    static DateTime hasta = DateTime.Now;
    static DateTime desde = hasta.AddMonths(-1);

    List<Vista.Data.ViewModels.Personal.BomberoViweModel>? BomberosVM = new();

    int _pageIndex = 1;
    int _pageSize = 6;
    int _total = 0;

    //Importar a PDF
    private async Task GenerarYMostrarPDF()
    {
        ExportarAPDF crear = new ExportarAPDF();
        var datos = BomberosVM.Select(b => new
        {
            b.NumeroLegajo,
            b.Nombre,
            b.Apellido,
            b.Grado,
            TelefonoCel = b.TelefonoCel,
            TelefonoFijo = b.TelefonoFijo,
            TelefonoLaboral = b.TelefonoLaboral,
            Email = b.Email
        });
        byte[] pdfBytes = crear.CrearPDF(datos);
        await JSRuntime.InvokeVoidAsync("abrirPDF", Convert.ToBase64String(pdfBytes));
    }

    //Importar a Excel
    private async Task GuardarEnExcel()
    {
        CrearExcel crear = new CrearExcel();
        var datos = BomberosVM.Select(b => new
        {
            b.NumeroLegajo,
            b.Nombre,
            b.Apellido,
            b.Grado,
            TelefonoCel = b.TelefonoCel,
            TelefonoFijo = b.TelefonoFijo,
            TelefonoLaboral = b.TelefonoLaboral,
            Email = b.Email
        });
        string ExcNombre = "DatosBomberos.xlsx";
        byte[] fileBytes = crear.ExportarEnExcel(datos);
        await JSRuntime.InvokeVoidAsync("guardarExcel", ExcNombre, Convert.ToBase64String(fileBytes), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }

    private async Task cargarbomberosVM()
    {
        var bomberos = await Context.Bomberos.ToListAsync();
        foreach (var a in bomberos)
        {
            var contacto = await Context.Contactos.Where(c => c.PersonalId == a.PersonaId).SingleOrDefaultAsync();
            Vista.Data.ViewModels.Personal.BomberoViweModel Bm = new()
            {
                NumeroLegajo = a.NumeroLegajo,
                Nombre = a.Nombre,
                Apellido = a.Apellido,
                Grado = a.Grado,
                TelefonoCel = contacto.TelefonoCel,
                TelefonoFijo = contacto.TelefonoFijo,
                TelefonoLaboral = contacto.TelefonoLaboral,
                Email = contacto.Email
            };
            BomberosVM.Add(Bm);
        }
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        await cargarbomberosVM();


        EscalafonJerarquicoFilter = new TableFilter<EscalafonJerarquico>[Enum.GetValues(typeof(EscalafonJerarquico)).Length];
        int i = 0;
        foreach (EscalafonJerarquico value in Enum.GetValues(typeof(EscalafonJerarquico)))
        {
            EscalafonJerarquicoFilter[i] = new() { Text = Enum.GetName(typeof(EscalafonJerarquico), value), Value = value };
            i++;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

}