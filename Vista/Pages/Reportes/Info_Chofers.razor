@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@page "/Reportes/Reportes_Choferes"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;

<style>
    .nombreClase {
        display: inline-block;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .inpt-cont {
        min-width: 170px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        align-items: flex-end;
        gap: 1em;
        overflow: hidden !important;
        height: 100%;
    }

    .botonesCont {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
    }

    .ant-table-title {
        height: 6.5em !important;
    }

    .ant-badge {
        margin: 20px 10px 0 0 !important;
    }

    @@media (max-width: 960px) {
        .ant-table-row, .ant-table-row-level-0 {
            display: flex !important;
            flex-direction: column !important;
        }

        .ant-table-title {
            height: 12.5em !important;
        }

        .buton-cont {
            width: 100% !important;
        }

        #ant-blazor-df7d6d62-e78b-479a-b209-8325c3889500 {
            width: 100% !important;
        }

        .inpt-cont-inline {
            flex-direction: column !important;
            gap: 0 !important;
            align-items: flex-start;
        }
        .buttoncont{
            width: 100%!important;
        }
    }
</style>

<div style="margin-top: 2em;">
    <Table DataSource="preferencia" TItem="ChoferesVM" PageSize="6" Responsive>
        <TitleTemplate>
             <div class="botonesCont">
                 <div class="inpt-cont-inline">
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">Desde: </label>
                         <DatePicker DefaultValue="@desde" @bind-Value="@desde" Picker="@DatePickerType.Month" Style="width: 150px;" AllowClear />
                     </div>
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">Hasta: </label>
                         <DatePicker DefaultValue="@hasta" @bind-Value="@hasta" Picker="@DatePickerType.Month" Style="width: 150px;" AllowClear />
                     </div>
                     <div>
                         <Button OnClick="()=>colocar_preferencia(desde,hasta,preferencia)" Style="margin-bottom: 5px;">
                             Buscar
                         </Button>
                     </div>
                 </div>
                 <div class="buttoncont">
                     <Button Class="buttoncont" Style="margin-bottom: 5px;" OnClick="()=>Insertar_todos_choferes(preferencia)">
                         Mostrar todos
                     </Button>
                 </div>
             </div>
        </TitleTemplate>
        <ColumnDefinitions>
            <Selection Key="@(context.NumeroLegajo.ToString())" />
            <PropertyColumn Property="c=>c.NumeroLegajo" Title="Nimero de Legajo"
                             DefaultSortOrder="@SortDirection.Descending"
                             SorterCompare="@((a,b)=> a - b)" />
            <PropertyColumn Property="c=>c.Nombre" Sortable />

            <PropertyColumn Property="c=>c.Apellido" Sortable />

            <PropertyColumn Property="c => c.DotacionNumero" Title="Dotacion" />

            <PropertyColumn Property="c=>c.VencimientoRegistro" Title="Vencimiento Registro" Sortable />

            <PropertyColumn Property="c=>c.TelefonoCel" Title="Telefono Celular" Sortable />

            <PropertyColumn Property="c=>c.TelefonoFijo" Title="Telefono Fijo" Sortable />

            <PropertyColumn Property="c=>c.TelefonoLaboral" Title="Telefono Laboral" Sortable />
        </ColumnDefinitions>
    </Table>
 </div>

@code {
    bool primeravuelta = true;
    List<ChoferesVM> todosLosChoferes = new List<ChoferesVM>();
    List<ChoferesVM> preferencia = new List<ChoferesVM>();

    //static string dateString = "5/1/2008 8:30:52 AM";
    static DateTime hasta = DateTime.Now;
    static DateTime desde = hasta.AddMonths(-1);

    class ChoferesVM
    {
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public TipoDotaciones Dotacion { get; set; }
        public DateTime? VencimientoRegistro { get; set; }
        public int NumeroLegajo { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoCel { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoLaboral { get; set; }
        [Required, StringLength(255)]
        public string TelefonoFijo { get; set; }
        public int DotacionNumero { get; set; }
    }
   
    async void Insertar_todos_choferes(List<ChoferesVM> b)
    {
        b.Clear();
        using var context = DbFactory.CreateDbContext();
        List<Bombero> choferes = await context.Bomberos.Where(b => b.Chofer).ToListAsync();//saco la info
        foreach (var chofer in choferes)
        {
            var contactos = await context.Contactos.Where(c => c.PersonaId == chofer.PersonaId).SingleOrDefaultAsync();
                ChoferesVM ChoferesPasajeVM = new()
                {
                    Nombre = chofer.Nombre,
                    Apellido = chofer.Apellido,
                    DotacionNumero = (int)chofer.Dotacion,
                    VencimientoRegistro = chofer.VencimientoRegistro,
                    NumeroLegajo = chofer.NumeroLegajo,
                    TelefonoCel = contactos.TelefonoCel,
                    TelefonoFijo = contactos.TelefonoFijo,
                    TelefonoLaboral = contactos.TelefonoLaboral
                };
            b.Add(ChoferesPasajeVM);
        }
        StateHasChanged();
    }

    //Guarda en la lista los valores que esten entre las fechas sin distingir los dias
    void colocar_preferencia(DateTime d, DateTime h, List<ChoferesVM> b)//preferentemente b es todos los choferes
    {
            int desde;
            int hasta;
            b.Clear();
            for (int i = 0; i < todosLosChoferes.Count; i++)
            {
                if (todosLosChoferes[i].VencimientoRegistro == null) continue;
                desde = DateTime.Compare(d, (DateTime)todosLosChoferes[i].VencimientoRegistro);
                hasta = DateTime.Compare(h, (DateTime)todosLosChoferes[i].VencimientoRegistro);
                if (desde <= 0 && hasta >= 0)
                {
                        b.Add(todosLosChoferes[i]);
                }
            }
            StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Insertar_todos_choferes(preferencia);
        Insertar_todos_choferes(todosLosChoferes);
        StateHasChanged();
    }
    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }
}