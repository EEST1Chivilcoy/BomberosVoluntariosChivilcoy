@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@page "/Reportes/Reportes_Choferes"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;

<h7 style="display: flex;justify-content:left;align-items:flex-start;height: 50%;width:50%;">
    Desde:<DatePicker DefaultValue="@desde" @bind-Value="@desde" Picker="@DatePickerType.Month" Style="width: 150px;" AllowClear />
    Hasta:<DatePicker DefaultValue="@hasta" @bind-Value="@hasta" Picker="@DatePickerType.Month" Style="width: 150px;" AllowClear />
</h7>

<Popconfirm Style="width: 33.3%;" Title="Estas seguro?"
            OnConfirm="()=>colocar_preferencia(desde,hasta,preferencia)"
            OnCancel="Cancel">
    <Button>
        Buscar
    </Button>
</Popconfirm>
<Popconfirm Style="width: 33.3%;" Title="Estas seguro?"
            OnConfirm="()=>Insertar_todos_choferes(preferencia)"
            OnCancel="Cancel">
    <Button>
        Mostrar todos
    </Button>
</Popconfirm>

<Table DataSource="preferencia" TItem="ChoferesVM">
    <TitleTemplate>
        <GridRow>
            <GridCol Span="6">
                <Title Level="4">Choferes</Title>
            </GridCol>
           
        </GridRow>
    </TitleTemplate>
    <ColumnDefinitions>
        <Selection Key="@(context.NumeroLegajo.ToString())" />
         <PropertyColumn Property="c=>c.NumeroLegajo"
                         DefaultSortOrder="@SortDirection.Descending"
                         SorterCompare="@((a,b)=> a - b)" />
        <PropertyColumn Property="c=>c.Nombre" Sortable />

        <PropertyColumn Property="c=>c.Apellido" Sortable />

        <PropertyColumn Property="c=>c.Dotacion" />

        <PropertyColumn Property="c=>c.VencimientoRegistro" Sortable />

        <PropertyColumn Property="c=>c.TelefonoCel" Sortable />

        <PropertyColumn Property="c=>c.TelefonoFijo" Sortable />

        <PropertyColumn Property="c=>c.TelefonoLaboral" Sortable />



    </ColumnDefinitions>
</Table>

@code {
    bool primeravuelta = true;
    List<ChoferesVM> todosLosChoferes = new List<ChoferesVM>();
    List<ChoferesVM> preferencia = new List<ChoferesVM>();

    //static string dateString = "5/1/2008 8:30:52 AM";
    static DateTime hasta = DateTime.Now;
    static DateTime desde = hasta.AddMonths(-1);

    class ChoferesVM
    {
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public TipoDotaciones Dotacion { get; set; }
        public DateTime? VencimientoRegistro { get; set; }
        public int NumeroLegajo { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoCel { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoLaboral { get; set; }
        [Required, StringLength(255)]
        public string TelefonoFijo { get; set; }
    }

    async void Insertar_todos_choferes(List<ChoferesVM> b)
    {
        b.Clear();
        using var context = DbFactory.CreateDbContext();
        List<Bombero> choferes = await context.Bomberos.Where(b => b.Chofer).ToListAsync();//saco la info
        foreach (var chofer in choferes)
        {
            var contactos = await context.Contactos.Where(c => c.PersonaId == chofer.PersonaId).SingleOrDefaultAsync();
                ChoferesVM ChoferesPasajeVM = new()
                {
                    Nombre = chofer.Nombre,
                    Apellido = chofer.Apellido,
                    Dotacion = chofer.Dotacion,
                    VencimientoRegistro = chofer.VencimientoRegistro,
                    NumeroLegajo = chofer.NumeroLegajo,
                    TelefonoCel = contactos.TelefonoCel,
                    TelefonoFijo = contactos.TelefonoFijo,
                    TelefonoLaboral = contactos.TelefonoLaboral

                };
            b.Add(ChoferesPasajeVM);
        }
        StateHasChanged();
    }


    //Guarda en la lista los valores que esten entre las fechas sin distingir los dias
    void colocar_preferencia(DateTime d, DateTime h, List<ChoferesVM> b)//preferentemente b es todos los choferes
    {
            int desde;
            int hasta;
            b.Clear();
            for (int i = 0; i < todosLosChoferes.Count; i++)
            {
                if (todosLosChoferes[i].VencimientoRegistro == null) continue;
                desde = DateTime.Compare(d, (DateTime)todosLosChoferes[i].VencimientoRegistro);
                hasta = DateTime.Compare(h, (DateTime)todosLosChoferes[i].VencimientoRegistro);
                if (desde <= 0 && hasta >= 0)
                {
                        b.Add(todosLosChoferes[i]);
                }
            }
            StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Insertar_todos_choferes(preferencia);
        Insertar_todos_choferes(todosLosChoferes);
        StateHasChanged();
    }
    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }

}