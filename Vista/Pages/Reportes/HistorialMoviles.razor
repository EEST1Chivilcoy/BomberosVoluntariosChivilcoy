@inject NavigationManager navigationManager
@implements IDisposable
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@page "/Reportes/HistorialMoviles"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.ViewModels.Personal;


<div>
    <Table DataSource="MovilesSalidas" Bordered>
        <TitleTemplate>
            <GridRow>
                <GridCol Span="4">
                    <Title Level="3">Moviles</Title>
                </GridCol>
            </GridRow>
        </TitleTemplate>

         <ColumnDefinitions>
            <PropertyColumn Property="c=>c.NumeroMovil" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Kilometraje" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.NumeroParte" Sortable></PropertyColumn>



            @if (context.CargoCombustible == true)
            {
                <PropertyColumn Property="c=>c.CargoCombustible">Cargo</PropertyColumn>
            }
            else
            {
                <PropertyColumn Property="c=>c.CargoCombustible">No Cargo</PropertyColumn>
            }
         </ColumnDefinitions> 

    </Table>
</div>

<style>
    .nombreClase {
        display: inline-block;
    }
</style>

<div style="display: flex;justify-content: space-evenly;width:80%;padding:1em 9em 0.1em 5em">
    <p class="nombreClase"> Desde:<DatePicker DefaultValue="@desde" @bind-Value="@desde" Picker="@DatePickerType.Month" Style="width: 150px;" AllowClear /></p>

    <p class="nombreClase">Hasta:<DatePicker DefaultValue="@hasta" @bind-Value="@hasta" Picker="@DatePickerType.Month" Style="width: 150px;" AllowClear /></p>

    <p class="nombreClase">
        <Button OnClick="()=> mostrar_eleccion(desde,hasta,Preferencia)">
            Buscar
        </Button>
    </p>

    <p class="nombreClase">
        <Button OnClick="()=> CargarSalidasMovil(Preferencia)">
            Mostrar todos
        </Button>
    </p>

</div>

<Button OnClick="@(() => { navigationManager.NavigateTo($"/HistorialMoviles/Imprimir"); })" Style="position: absolute;right: 20em;top: 2em;">Imprimir</Button>

@code {
    Movil[] moviles;

    List<MovilSalidaViewModel> todosLosMoviles = new List<MovilSalidaViewModel>();
    List<MovilSalidaViewModel> Preferencia = new List<MovilSalidaViewModel>();

    BomberosDbContext Context { get; set; }

    static DateTime hasta = DateTime.Now;
    static DateTime desde = hasta.AddMonths(-1);

    IEnumerable<HistorialMoviles> dataSource;
    IEnumerable<HistorialMoviles> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    private class MovilSalidaViewModel
    {

        public bool CargoCombustible { get; set; }
        public int Kilometraje { get; set; }
        public int NumeroParte { get; set; }
        public string NumeroMovil { get; set; }

    }

    private MovilSalidaViewModel MovilSalidaViewModels { get; set; } = new();

    List<MovilSalidaViewModel> MovilesSalidas { get; set; } = new();

    public async Task CargarSalidasMovil()
    {
        int movilId = 93;
        var movilsalidaVM = await Context.Set<MovilSalida>().Include(m => m.Salida).Where(m => m.MovilId == movilId).ToArrayAsync();
        if (movilsalidaVM != null)
        {

            foreach (var s in movilsalidaVM)
            {
                var movil = await Context.Moviles.SingleOrDefaultAsync(m => m.VehiculoId == s.MovilId);

                MovilSalidaViewModel msvm = new()
                    {

                        CargoCombustible = s.CargoCombustible,
                        Kilometraje = s.KmLlegada,
                        NumeroParte = s.Salida.NumeroParte,
                        NumeroMovil = movil.NumeroMovil

                    };

                MovilesSalidas.Add(msvm);
                StateHasChanged();

            } 

        }
    }

    void mostrar_eleccion(DateTime d, DateTime h, List<MovilSalidaViewModel> b)
    {
        int desde;
        int hasta;
        b.Clear();
        for (int i = 0; i < todosLosMoviles.Count; i++)
        {
            if (todosLosMoviles[i]. == null) continue;
            desde = DateTime.Compare(d, (DateTime)todosLosMoviles[i].VencimientoRegistro);
            hasta = DateTime.Compare(h, (DateTime)todosLosMoviles[i].VencimientoRegistro);
            if (desde <= 0 && hasta >= 0)
            {
                b.Add(todosLosMoviles[i]);
            }
        }
        StateHasChanged();
    }

    private async Task Init()
    {
        MovilSalidaViewModels = new();
        Context = DbFactory.CreateDbContext();
        moviles = await Context.Moviles.ToArrayAsync();
        await CargarSalidasMovil();

    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
        CargarSalidasMovil(Preferencia);
        CargarSalidasMovil(todosLosMoviles);
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }
}