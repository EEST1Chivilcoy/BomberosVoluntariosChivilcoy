@implements IDisposable
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/Reportes/HistorialMoviles"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.ViewModels.Personal;

<div>
    <Table DataSource="MovilesSalidas" Bordered>
        <PropertyColumn Property="c=>c.NumeroMovil"></PropertyColumn>
        <PropertyColumn Property="c=>c.Kilometraje"></PropertyColumn>
        <PropertyColumn Property="c=>c.NumeroParte"></PropertyColumn>

        @if (context.CargoCombustible == true)
        {
            <PropertyColumn Property="c=>c.CargoCombustible">Cargo</PropertyColumn>
        }
        else
        {
            <PropertyColumn Property="c=>c.CargoCombustible">No Cargo</PropertyColumn>
        }

       
    </Table>
</div>

@code {
    Movil[] moviles;

    BomberosDbContext Context { get; set; }

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;


    private class MovilSalidaViewModel
    {
        public bool CargoCombustible { get; set; }
        public int Kilometraje { get; set; }
        public int NumeroParte { get; set; }
        public string NumeroMovil { get; set; }
    }

    private MovilSalidaViewModel MovilSalidaViewModels { get; set; } = new();

    List<MovilSalidaViewModel> MovilesSalidas { get; set; } = new();

    public async Task CargarSalidasMovil()
    {
        int movilId = 93;
        var movilsalidaVM = await Context.Set<MovilSalida>().Include(m => m.Salida).Where(m => m.MovilId == movilId).ToArrayAsync();
        if (movilsalidaVM != null)
        {

            foreach (var s in movilsalidaVM)
            {
                var movil = await Context.Moviles.SingleOrDefaultAsync(m => m.VehiculoId == s.MovilId);

                MovilSalidaViewModel msvm = new()
                    {
                        CargoCombustible = s.CargoCombustible,
                        Kilometraje = s.KmLlegada,
                        NumeroParte = s.Salida.NumeroParte,
                        NumeroMovil = movil.NumeroMovil

                    };

                MovilesSalidas.Add(msvm);
                StateHasChanged();

            } 

        }
    }



    private async Task Init()
    {
        MovilSalidaViewModels = new();
        Context = DbFactory.CreateDbContext();
        moviles = await Context.Moviles.ToArrayAsync();
        await CargarSalidasMovil();

    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}