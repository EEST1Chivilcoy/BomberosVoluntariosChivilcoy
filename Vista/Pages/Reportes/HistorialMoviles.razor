@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@inject IJSRuntime JSRuntime;

@page "/Reportes/HistorialMoviles"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.ViewModels.Personal;

<style>

    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 1em;
        padding: 0;
        overflow: auto;
    }

    @@media (max-width: 960px) {
        .ant-table-row, .ant-table-row-level-0 {
            display: flex !important;
            flex-direction: column !important;
        }

        .ant-table-title {
            height: 12.5em !important;
        }

        .buton-cont {
            width: 100% !important;
        }

        #ant-blazor-df7d6d62-e78b-479a-b209-8325c3889500 {
            width: 100% !important;
        }

        .inpt-cont-inline {
            flex-direction: column !important;
            gap: 0 !important;
            align-items: flex-start!important;
        }

        .buttoncont {
            width: 100% !important;
        }
    }
</style>
<div class="template">
    <EditForm Model="this">
            <Table DataSource="MovilesSalidas" PageSize="6" Bordered Responsive>
                <TitleTemplate>
                    <div class="botonesCont">
                        <div class="inpt-cont-inline">
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Desde: </label>
                                <InputDate @bind-Value="fechaInicio" />
                            </div>
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Hasta: </label>
                                <InputDate @bind-Value="fechaFin" />
                            </div>
                            <div>
                                <Button OnClick="()=> FiltrarResultados(fechaInicio, fechaFin)">
                                    Filtrar
                                </Button>
                            </div>
                        </div>
                        <div class="buttoncont">
                            <Button OnClick="() => CargarSalidasMovil()">
                                Mostrar todos
                            </Button>
                        </div>
                    </div>
                </TitleTemplate>
    
                <ColumnDefinitions Context="muestra">
                    <PropertyColumn Property="c=>c.NumeroMovil" Sortable></PropertyColumn>
                    <PropertyColumn Property="c=>c.Kilometraje" Sortable></PropertyColumn>
                    <PropertyColumn Property="c=>c.NumeroParte" Sortable></PropertyColumn>
                    <PropertyColumn Property="c=>c.Hrllegada" Sortable></PropertyColumn>
                    <PropertyColumn Property="c=>c.CargoCombustibleTexto" Sortable> cargo </PropertyColumn>
                </ColumnDefinitions> 
            </Table>
            <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
            <Button OnClick="@(async () => await GenerarYMostrarPDF())">Imprimir</Button>
            <Button OnClick="@(async () => await GuardarEnExcel())">Exportar en Excel</Button>
            </div>
    </EditForm>
</div>

@code {
    BomberosDbContext Context;
    List<MovilSalida> moviles = new List<MovilSalida>();
    List<MovilSalidaViewModel> MovilesSalidas { get; set; } = new();
    private MovilSalidaViewModel MovilSalidaViewModels { get; set; } = new();

    DateTime FechaBuscarD;
    DateTime FechaBuscarH;

    private DateTime fechaInicio;
    private DateTime fechaFin;

    static DateTime hasta = DateTime.Now;
    static DateTime desde = hasta.AddMonths(-1);

    IEnumerable<Movil> dataSource;
    IEnumerable<Movil> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    //Importar a PDF
    private async Task GenerarYMostrarPDF()
    {
        ExportarAPDF crear = new ExportarAPDF();
        var datos = MovilesSalidas.Select(b => new
        {
            NumeroMovil = b.NumeroMovil,
            Kilometraje = b.Kilometraje,
            NumeroParte = b.NumeroParte,
            Hrllegada = b.Hrllegada,
            CargoCombustible = b.CargoCombustible
        });
        byte[] pdfBytes = crear.CrearPDF(datos);
        await JSRuntime.InvokeVoidAsync("abrirPDF", Convert.ToBase64String(pdfBytes));
    }

    //Importar a Excel
    private async Task GuardarEnExcel()
    {
        CrearExcel crear = new CrearExcel();
        var datos = MovilesSalidas.Select(b => new
        {
            NumeroMovil = b.NumeroMovil,
            Kilometraje = b.Kilometraje,
            NumeroParte = b.NumeroParte,
            Hrllegada = b.Hrllegada,
            CargoCombustible = b.CargoCombustible
        });
        string ExcNombre = "DatosMoviles.xlsx";
        byte[] fileBytes = crear.ExportarEnExcel(datos);
        await JSRuntime.InvokeVoidAsync("guardarExcel", ExcNombre, Convert.ToBase64String(fileBytes), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }

    private class MovilSalidaViewModel
    {

        public bool CargoCombustible { get; set; }
        public int Kilometraje { get; set; }
        public int NumeroParte { get; set; }
        public string NumeroMovil { get; set; }
        public DateTime? Hrllegada { get; set; }

        public string CargoCombustibleTexto
        {
            get
            {
                if (CargoCombustible)
                    return "si";
                else
                    return "no";
            }
        }

    }

    private async Task CargarSalidasMovil()
    {
        MovilesSalidas.Clear();
        var movilsalidaVM = await Context.Set<MovilSalida>().Include(m => m.Salida).ToArrayAsync();
        foreach (var s in movilsalidaVM)
        {
            var movil = await Context.Moviles.SingleOrDefaultAsync(m => m.VehiculoId == s.MovilId);
            MovilSalidaViewModel msvm = new()
                {
                    CargoCombustible = s.CargoCombustible,
                    Kilometraje = s.KmLlegada,
                    NumeroParte = s.Salida.NumeroParte,
                    NumeroMovil = movil.NumeroMovil,
                    Hrllegada = s.Salida.HoraSalida
                };
            MovilesSalidas.Add(msvm);
        }
        StateHasChanged();
    }

    private void FiltrarResultados(DateTime fechaInicio, DateTime fechaFin)
    {
        var resultadosFiltrados = MovilesSalidas.Where(m => m.Hrllegada >= fechaInicio && m.Hrllegada <= fechaFin).ToList();
        MovilesSalidas = resultadosFiltrados;
    }

    private async Task Init()
    {
        //var moviles = await Context.Set<MovilSalida>().ToListAsync();
        Context = DbFactory.CreateDbContext();
        await CargarSalidasMovil();
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }
}
