@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message
@inject IJSRuntime JSRuntime;

@page "/Reportes/HistorialMoviles"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.ViewModels.Personal;

<style>
    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .inpt-cont {
        min-width: 170px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        align-items: flex-end;
        gap: 1em;
        overflow: hidden !important;
        height: 100%;
    }

    .botonesCont{
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
    }

    .ant-table-title{
        height: 6.5em !important;
    }

</style>

<EditForm Model="this">
    <div style="margin-top: 2em;">
        <Table DataSource="MovilesSalidas" PageSize="6" Bordered>
            <TitleTemplate>
                <div class="botonesCont">
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Desde: </label>
                            <InputDate @bind-Value="fechaInicio" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Hasta: </label>
                            <InputDate @bind-Value="fechaFin" />
                        </div>
                        <div>
                            <Button OnClick="()=> FiltrarResultados(fechaInicio, fechaFin)">
                                Filtrar
                            </Button>
                        </div>
                    </div>
                    <div>
                        <Button OnClick="() => CargarSalidasMovil()">
                            Mostrar todos
                        </Button>
                    </div>
                </div>
            </TitleTemplate>
    
            <ColumnDefinitions Context="muestra">
                <PropertyColumn Property="c=>c.NumeroMovil" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.Kilometraje" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.NumeroParte" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.Hrllegada" Sortable></PropertyColumn>
                <PropertyColumn Property="c=>c.CargoCombustibleTexto" Sortable> cargo </PropertyColumn>
            </ColumnDefinitions> 
        </Table>
        <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
            <Button OnClick="@(async () => await JSRuntime.InvokeAsync<object>("open", "/Reportes/ImprimirRM", "_blank"))">Imprimir</Button>
        </div>
    </div>
</EditForm>

@code {
    BomberosDbContext Context;
    List<MovilSalida> moviles = new List<MovilSalida>();
    List<MovilSalidaViewModel> MovilesSalidas { get; set; } = new();
    private MovilSalidaViewModel MovilSalidaViewModels { get; set; } = new();

    DateTime FechaBuscarD;
    DateTime FechaBuscarH;

    private DateTime fechaInicio;
    private DateTime fechaFin;

    static DateTime hasta = DateTime.Now;
    static DateTime desde = hasta.AddMonths(-1);

    IEnumerable<Movil> dataSource;
    IEnumerable<Movil> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    private class MovilSalidaViewModel
    {

        public bool CargoCombustible { get; set; }
        public int Kilometraje { get; set; }
        public int NumeroParte { get; set; }
        public string NumeroMovil { get; set; }
        //public DateTime Desde { get; set; }
        //public DateTime Hasta { get; set; }
        public DateTime? Hrllegada { get; set; }

        public string CargoCombustibleTexto
        {
            get
            {
                if (CargoCombustible)
                    return "si";
                else
                    return "no";
            }
        }

    }

    private async Task CargarSalidasMovil()
    {
        MovilesSalidas.Clear();
        var movilsalidaVM = await Context.Set<MovilSalida>().Include(m => m.Salida).ToArrayAsync();
        foreach (var s in movilsalidaVM)
        {
            var movil = await Context.Moviles.SingleOrDefaultAsync(m => m.VehiculoId == s.MovilId);
            MovilSalidaViewModel msvm = new()
                {
                    CargoCombustible = s.CargoCombustible,
                    Kilometraje = s.KmLlegada,
                    NumeroParte = s.Salida.NumeroParte,
                    NumeroMovil = movil.NumeroMovil,
                    Hrllegada = s.Salida.HoraSalida
                };
            MovilesSalidas.Add(msvm);
        }
        StateHasChanged();
    }

    private void FiltrarResultados(DateTime fechaInicio, DateTime fechaFin)
    {
        var resultadosFiltrados = MovilesSalidas.Where(m => m.Hrllegada >= fechaInicio && m.Hrllegada <= fechaFin).ToList();
        MovilesSalidas = resultadosFiltrados;
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        //var moviles = await Context.Set<MovilSalida>().ToListAsync();
        await CargarSalidasMovil();
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

    private void Cancel()
    {
        _message.Error("Operacion cancelada");
    }
}
