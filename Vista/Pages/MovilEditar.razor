@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/moviles/editar/{VehiculoId:int?}"


<style>
    .button-container {
        display: flex;
        justify-content: space-between;
        padding-top: 4px;
    }

    .ant-carousel .slick-slide {
        text-align: center;
        height: 160px;
        line-height: 160px;
        background: #364d79;
        overflow: hidden;
    }
    .ant-carousel .slick-slide h3 {
       color: #fff;
    }
</style>
@if (movilView is not null)
{
    <Modal Title="@title"
           Visible="@_visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel" Style="width: 60%;">
            
    </Modal>
    <div style="width: 60%;height: 40%;">
        <Carousel @ref="_carousel">
            <CarouselSlick>
                <label>marca:</label>
                <input type="text" @bind="movilView.Marca" />
                <br>
                <label>modelo:</label>
                <input type="text" @bind="movilView.Modelo" />
                <br>
                <label>año:</label>
                <input type="text" @bind="movilView.Año" />
                <InputFile OnChange="SubirFoto" />
                <br>
                <label>patente:</label>
                <input type="text" @bind="movilView.Patente" />
                <br>
                <label>tipo:</label>
                <input type="text" @bind="movilView.Tipo" />
                <br>
            </CarouselSlick>
            <CarouselSlick>
                <label>nº movil:</label>
                <input type="text" @bind="movilView.NumeroMovil" />
                <br>
                <label>nº motor:</label>
                <input type="text" @bind="movilView.NumeroMotor" />
                <br>
                <label>nº chasis:</label>
                <input type="text" @bind="movilView.NumeroChasis" />
                <br>
                <select @bind="movilView.Estado">
                    <option value="@TipoEstadoMovil.Activo">Activo</option>
                    <option value="@TipoEstadoMovil.Inactivo">Inactivo</option>
                    <option value="@TipoEstadoMovil.Reparacion">Reparacion</option>
                    <option value="@TipoEstadoMovil.Limpieza">Limpieza</option>
                </select>
                <br>
            </CarouselSlick>
            <CarouselSlick>
                @if (bomberos is not null)
                {
                    <h4>bomberos</h4>
                    <br />
                    @foreach (BomberoViewModel b in bomberoViews)
                    {
                        <h5>@b.Rol.ToString() :</h5>
                        <br />
                        <select @bind="b.PersonaId">
                            <option selected value="0">-seleccione un bombero-</option>
                            @foreach (Bombero bo in bomberos)
                            {
                                <option value="@bo.PersonaId">@bo.Apellido  @bo.Nombre</option>
                            }
                        </select>
                    }
                    <button @onclick="@(() => { TipoRol tipo = TipoRol.Subalterno; AgregarALista(tipo); })"></button>
                }
            </CarouselSlick>
            <CarouselSlick>
                <h3>4</h3>
            </CarouselSlick>
        </Carousel>
    </div>
    <div class="button-container">
        <Button OnClick="@( _=>_carousel.Previous())" Size="small">Prev</Button>
        <div>
            @foreach (int i in Enumerable.Range(0, 4))
            {
                <Button OnClick="@( _=>_carousel.GoTo(i))" Size="small">@(i + 1)</Button>
            }
        </div>
        <Button OnClick="@( _=>_carousel.Next())" Size="small">Next</Button>

    </div>

    //
    
    //
    
    //
    
    <br />
    <br />
    <br />
    <br />
    <button @onclick="EditarMovil">Editar movil</button>
    
}
else
{
 <h1> Error 404</h1>    
}

@code {
    [Parameter]
    public int? VehiculoId { get; set; }

    public class MovilViewModel
    {
        [Required, StringLength(255)]
        public string Marca { get; set; }
        [Required, StringLength(255)]
        public string Modelo { get; set; }
        public int? Año { get; set; }
        [Required, StringLength(255)]
        public string Patente { get; set; }
        [Required, StringLength(255)]
        public string Tipo { get; set; }
        [Required, StringLength(255)] 
        public string NumeroMovil { get; set; }
        [Required, StringLength(255)]
        public string NumeroMotor { get; set; }
        [Required, StringLength(255)]
        public string NumeroChasis { get; set; }
        public TipoEstadoMovil Estado { get; set; }
    }
    public class ImagenViewModel
    {
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
    }
    public class BomberoViewModel
    {
        public TipoRol Rol { get; set; }
        public int PersonaId { get; set; }
    }

    public ImagenViewModel imagenView { get; set; } = new();
    public MovilViewModel movilView { get; set; } = new();
    public List<BomberoViewModel> bomberoViews { get; set; } = new();
    public Bombero[]? bomberos;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        bomberos = await db.Bomberos.ToArrayAsync();

        Movil? movil = await db.Moviles.Where(m => m.VehiculoId == VehiculoId).SingleOrDefaultAsync();

        if (movil is not null)
        {
            movilView.Marca = movil.Marca;
            movilView.Modelo = movil.Modelo;
            movilView.Año = movil.Año;
            movilView.Patente = movil.Patente;
            movilView.Tipo = movil.Tipo;
            movilView.NumeroMovil = movil.NumeroMovil;
            movilView.NumeroMotor = movil.NumeroMotor;
            movilView.NumeroChasis = movil.NumeroChasis;
            movilView.Estado = movil.Estado;
            ImagenMovil? imagen = await db.ImagenesMoviles.Where(i => i.ImagenId == movil.ImagenId).SingleOrDefaultAsync();

            if (imagen is not null)
            {
                imagenView.Nombre = imagen.NombreImagen;
                imagenView.TipoImagen = imagen.TipoImagen;
                imagenView.Base64 = imagen.Base64Imagen;
            }
            existe = true;
        }
        else if (movil is null)
        {
            existe = false;
        }

        AgregarALista(TipoRol.Encargado);
        AgregarALista(TipoRol.Subalterno);
    }

    public void AgregarALista(TipoRol tipo)
    {
        BomberoViewModel b = new()
        {
            Rol = tipo
        };

        bomberoViews.Add(b);
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenView.Base64 = imagenBase64;
        imagenView.TipoImagen = e.File.ContentType;
        imagenView.Nombre = e.File.Name;
    }

    public async void EditarMovil()
    {
        using var db = DbFactory.CreateDbContext();

        if (movilView.NumeroMovil is not null)
        {
            Movil? movil = await db.Moviles.Where(m => m.NumeroMovil == movilView.NumeroMovil).SingleOrDefaultAsync();

            if (movil is not null)
            {
                movil.Marca = movilView.Marca;
                movil.Modelo = movilView.Modelo;
                movil.Año = movilView.Año;
                movil.Patente = movilView.Patente;
                movil.Tipo = movilView.Tipo;
                movil.Imagen = new()
                    {
                    NombreImagen = imagenView.Nombre,
                    TipoImagen = imagenView.TipoImagen,
                    Base64Imagen = imagenView.Base64
                    };
                movil.NumeroChasis = movilView.NumeroChasis;
                movil.NumeroMotor = movilView.NumeroMotor;
                movil.NumeroMovil = movilView.NumeroMovil;
                movil.Estado = movilView.Estado;

                foreach (BomberoViewModel m in bomberoViews)
                {
                    if (m.PersonaId != 0)
                    {
                        MovilBombero bombero = new()
                            {
                                Rol = m.Rol,
                                PersonaId = m.PersonaId
                            };
                        movil.Bomberos.Add(bombero);
                    }
                }
                await db.SaveChangesAsync();
            }
        }

        navigationManager.NavigateTo("/moviles");
    }
    //modal
    string title = "Editar movil";
    bool _visible = true;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    //carousel
    Carousel? _carousel;
}


