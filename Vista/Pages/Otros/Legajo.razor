@page "/legajo"
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.ViewModels.FactorClimatico;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.ViewModels.Accidente;
@using Vista.Data.ViewModels;


<Table DataSource="salidasViewModel" OnChange="OnChange" TItem="SalidasViewModel1">
    <TitleTemplate>
        <GridRow>
            <GridCol Span="4">
                <Title Level="3">Registro Salidas</Title>
            </GridCol>
            <GridCol Span="8" Offset="12">
                <Search Placeholder="Search Name" @bind-Value="searchString" OnSearch="()=>_table?.ReloadData()" />
            </GridCol>
        </GridRow>
    </TitleTemplate>
    <ColumnDefinitions>
        <PropertyColumn Title="N° Parte" Property="c=>c.NumeroParte"
                        DefaultSortOrder="@SortDirection.Descending"
                        SorterCompare="@((a,b)=> a - b)" />
        <PropertyColumn Title="Direccion" Property="c=>c.EntreCalles"
                        DefaultSortOrder="@SortDirection.Descending"
                         />
         <TableFilter MatchMode="MatchMode.Contains" FilterCallback="OnFilterChanged" />
        <PropertyColumn Title="Tipo Salida" Property="c=>c.Discriminador"
                        SortDirections="new[] { SortDirection.Descending }"
                        Filters="DiscriminadorFilter"
                        OnFilter="((value,name)=>Enum.GetName(typeof(TipoSalida), name).StartsWith(Enum.GetName(typeof(TipoSalida), value)))" />

        <ActionColumn Title="Action">
            <Space>
                <SpaceItem><Button Danger OnClick="()=>Delete(context.NumeroParte)">Delete</Button></SpaceItem>
                @*<SpaceItem><Button Type="primary" OnClick="()=>ShowModalEditar(context.NumeroLegajo)">Editar</Button></SpaceItem>*@
                <SpaceItem><Button Type="primary" OnClick="()=>ShowModalDetalle(context.SalidaId)">Detalles</Button></SpaceItem>
            </Space>
        </ActionColumn>
        @*<Column Title="Salidas" @bind-Field="@discriminadores" Sortable />*@
    </ColumnDefinitions>
    
</Table>


@*-----------------------------------------------------------Modal Detalles-----------------------------------------------------------------------------------------*@


<Modal Title="@title"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    
        
    <p><b>NumeroParte: @salidasViewModel[numeroParteVisualizar].NumeroParte</b></p>
    <p>Tipo De Salida: @salidasViewModel[numeroParteVisualizar].Discriminador</p>

    <p>HoraLlegada: @salidasViewModel[numeroParteVisualizar].HoraLLegada</p>
    <p>KmSalida: @salidasViewModel[numeroParteVisualizar].KmSalida</p>
    <p>KmLlegada: @salidasViewModel[numeroParteVisualizar].KmLlegada</p>
    <p>Descripcion: @salidasViewModel[numeroParteVisualizar].Descripcion</p>
    <p>CalleORuta: @salidasViewModel[numeroParteVisualizar].CalleORuta</p>
    <p>NumeroOKilometro: @salidasViewModel[numeroParteVisualizar].NumeroOKilometro</p>
    <p>EntreCalles: @salidasViewModel[numeroParteVisualizar].EntreCalles</p>
    <p>PisoNumero: @salidasViewModel[numeroParteVisualizar].PisoNumero</p>
    <p>Depto: @salidasViewModel[numeroParteVisualizar].Depto</p>
    <p>TipoZona: @salidasViewModel[numeroParteVisualizar].TipoZona</p>

    <p>NombreSolicitante: @salidasViewModel[numeroParteVisualizar].NombreSolicitante</p>
    <p>ApellidoSolicitante: @salidasViewModel[numeroParteVisualizar].NombreSolicitante</p>
    <p>DniSolicitante: @salidasViewModel[numeroParteVisualizar].DniSolicitante</p>
    <p>TelefonoSolicitante: @salidasViewModel[numeroParteVisualizar].TelefonoSolicitante</p>

    <p><b>Receptor:</b> @salidasViewModel[numeroParteVisualizar].NombreYApellidoReceptor</p>
    <p><b>Telefono Receptor:</b> @salidasViewModel[numeroParteVisualizar].TelefonoReceptor</p>

    <p><b>ReceptorBombero:</b> @salidasViewModel[numeroParteVisualizar].ReceptorBombero</p>

    
    @if (salidasViewModel[numeroParteVisualizar].Damnificados is not null)
    {
        <p><b>Damnificado:</b></p>
        @foreach (Damnificado d in salidasViewModel[numeroParteVisualizar].Damnificados)
        {
            <p>Nombre: @d.Nombre</p>
            <p>Apellido: @d.Apellido</p>
            <p>Dni: @d.Dni</p>
            <p>Sexo: @d.Sexo</p>
            <p>LugarDeNacimiento: @d.LugarDeNacimiento</p>
            <p>Estado: @d.Estado</p>
            <p>VehiculoDamnificado:</p>
            //Añadir este objeto a la hora de traer salidas
            <p>Edad: @d.Edad</p>
            <p>Estado: @d.Estado</p>
        }
    }
    

    <p><b>Moviles:</b></p>

    @foreach (MovilSalida ms in salidasViewModel[numeroParteVisualizar].Moviles)
    {
        <p><b>Chofer: @ms.Chofer.Nombre @ms.Chofer.Apellido</b></p>
        
        <p>MovilId: @ms.MovilId</p>
        <p>Tipo movil: @ms.Movil.Tipo</p>//traer datos de movil en llamada de salidas
        <p>Modelo movil: @ms.Movil.Modelo</p>
        <p>NumeroMovil movil: @ms.Movil.NumeroMovil</p>
        @if (ms.CargoCombustible)
        {
            <p><b>Cargo Combustible: si</b></p>
            <p>Quien lleno planilla movil: @ms.NumeroFactura</p>
            <p>Quien lleno planilla movil: @ms.FechaFactura</p>
            <p>Quien lleno planilla movil: @ms.TipoConbustible</p>
            <p>Quien lleno planilla movil: @ms.CantidadLitros</p>
            <p>Quien lleno planilla movil: @ms.QuienLleno</p>
            <p>Telefono: @ms.TelefonoQuienLleno</p>
        }
        
    }
    <p><b>CuerpoParticipante:</b></p>
    @foreach (BomberoSalida b in salidasViewModel[numeroParteVisualizar].CuerpoParticipante)
    {
        <p><b>Bombero: @b.Bombero.Nombre @b.Bombero.Apellido</b></p>//traer datos de cada bombero
        <p>Numero de Legajo: @b.Bombero.NumeroLegajo</p>
        <p>Salio: @b.Salio</p>
        <p>Grado: @b.Grado</p>
    }

    <p><b>Encargado:</b></p>
    <p>Bombero: @salidasViewModel[numeroParteVisualizar].Encargado.Nombre @salidasViewModel[numeroParteVisualizar].Encargado.Apellido</p>
    <p>Encargado:  @salidasViewModel[numeroParteVisualizar].Encargado.NumeroLegajo</p>
    
    <p><b>QuienLleno:</b></p>
    <p>Bombero: @salidasViewModel[numeroParteVisualizar].QuienLleno.Nombre @salidasViewModel[numeroParteVisualizar].QuienLleno.Apellido</p>
    <p>Numero de Parte: @salidasViewModel[numeroParteVisualizar].QuienLleno.NumeroLegajo</p>

    <p>TipoServicio: @salidasViewModel[numeroParteVisualizar].TipoServicio</p>

    @switch (@salidasViewModel[numeroParteVisualizar].Discriminador)
    {
        case TipoSalida.Accidente:
            Task.Run(async () =>
            {   
                await GetViewModelAccidentes(salidasViewModel[numeroParteVisualizar].SalidaId);
            });
            <p><b>Accidente: </b></p>
            <p>Tipo: @accidenteViewModels.Tipo</p>
            <p>Cantidad de vehiculos: @accidenteViewModels.CantidadVheiculo</p>
            if (@accidenteViewModels.VehiculosAfectado is not null)
            {
                foreach (VehiculoAfectadoAccidente v in @accidenteViewModels.VehiculosAfectado)
                {
                    <p><b>Vehiculos Afectados: </b></p>
                    <p>Patente: @v.Patente</p>
                    <p>Patente: @v.Marca</p>
                    <p>Patente: @v.Modelo</p>
                    <p>Patente: @v.Tipo</p>

                    <p><b>Seguro:</b></p>
                                //traer datos de seguroVehiculo
                    <p>Numero Poliza: @v.Seguro.NumeroDePoliza</p>
                    <p>Compañia Aseguradora: @v.Seguro.CompañiaAseguradora</p>
                    <p>Fecha de Vencimiento: @v.Seguro.FechaDeVencimineto</p>
                    <p>Air Bag: @v.Airbag</p>

                }
            }

            <p>Condiciones Climaticas: @accidenteViewModels.CondicionesClimaticas</p>
            <p>Otro Condicion: @accidenteViewModels.OtroCondicion</p>
            break;

        case TipoSalida.FactorClimatico:
            
            break;
        case TipoSalida.MaterialPeligroso:
            break;
        case TipoSalida.ServicioEspecialPrevencionViewModels:
            break;
        case TipoSalida.RescateAnimal:
            break;
        case TipoSalida.RescatePersona:
            break;
        case TipoSalida.IncendioComercio:
            break;
        case TipoSalida.IncendioEstablecimientoEducativo:
            break;
        case TipoSalida.IncendioEstablecimientoPublico:
            break;
        case TipoSalida.IncendioForestal:
            break;
        case TipoSalida.IncendioHospitalesYClinicas:
            break;
        case TipoSalida.IncendioIndustria:
            break;
        case TipoSalida.IncendioVivienda:
            break;
        case TipoSalida.ServicioEspecialPrevencion:
            break;
        case TipoSalida.Incendio:
            break;
        case TipoSalida.ServicioEspecial:
            break;
    }

</Modal>


@using AntDesign.TableModels;
@using System.Text.Json;
@code {
    string searchString;
    IEnumerable<Salida> dataSource;
    ITable _table;
    int _total = 0;
    TipoSalida discriminadoresSalidas;

    List<SalidasViewModel1>? salidasViewModel = new List<SalidasViewModel1>();
    List<string> discriminadores = new List<string>();
    private TableFilter<TipoSalida>[] DiscriminadorFilter;
    List<SalidasViewModel1>? salidasViewModelCarga = new List<SalidasViewModel1>();
    List<Salida>? salidas;

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        //Llamo a los datos de la tabla sallida co sus respectivas listas y objetos
        salidas = db.Set<Salida>()
        .Include(s => s.Moviles)
            .ThenInclude(ms => ms.Movil)

            .Include(s => s.Moviles)
            .ThenInclude(ms => ms.Chofer)
        .Include(s => s.CuerpoParticipante).ThenInclude(cp => cp.Bombero)
        .Include(s => s.ReceptorBombero).ThenInclude(rb => rb.Contacto)
        .Include(s => s.Encargado).ThenInclude(e => e.Brigada)
        .Include(s => s.QuienLleno).ThenInclude(ql => ql.Brigada)
        .ToList();

        //traigo el discriminados de cada elemento la tabla salidas
        foreach (var entidad in salidas)
        {
            var entry = db.Entry(entidad);
            var entityType = entry.Metadata;
            var discriminatorProperty = entityType.FindDiscriminatorProperty();
            var discriminatorValue = entry.CurrentValues[discriminatorProperty];

            string discriminador = discriminatorValue?.ToString();
            int discriminadorNumero = (int.Parse(discriminador)) - 1;// le bajo un valor para que sea congruente a como esta cargado en el 
                                                                     //enum tipo salida(empiezan desde el valor 0 y en el dbContext empieza desde el 1)
            discriminador = discriminadorNumero.ToString();
            discriminadores.Add(discriminador);
        }
        GetSalidasViewModel(salidas);

        //Filtro del discriminador, le asigno un valor de un enum a cada numero discriminador
        DiscriminadorFilter = new TableFilter<TipoSalida>[Enum.GetValues(typeof(TipoSalida)).Length];
        int i = 0;
        foreach (TipoSalida value in Enum.GetValues(typeof(TipoSalida)))
        {
            DiscriminadorFilter[i] = new() { Text = Enum.GetName(typeof(TipoSalida), value), Value = value };
            i++;
        }


        StateHasChanged();
    }

    void OnChange(QueryModel<SalidasViewModel1> query)
    {
        Console.WriteLine(JsonSerializer.Serialize(query));

        //dataSource = query.ExecuteQuery(data.AsQueryable())
        //    .Where(x => string.IsNullOrWhiteSpace(searchString) || x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }

    void OnRowClick(RowData<SalidasViewModel1> row)
    {
        Console.WriteLine($"row {row.Data.SalidaId} was clicked");
    }

    private async void Delete(int id)
    {
        using var context = DbFactory.CreateDbContext();
        Salida? salida = await context.Set<Salida>().Where(s => s.NumeroParte == id).SingleOrDefaultAsync();
        context.Remove(salida);
        salidas = salidas.Where(x => x.NumeroParte != id).ToList();
        salidasViewModel = salidasViewModel.Where(x => x.NumeroParte != id).ToList();
        _total = salidas.Count;
        
        await context.SaveChangesAsync();
        StateHasChanged();
    }
}
@code{
    private AccidenteViewModels accidenteViewModels = new();
    List<AccidenteViewModels> accidentesVM = new List<AccidenteViewModels>();
    private class SalidasViewModel1 : SalidasViewModels
    {
        public int SalidaId { get; set; }


        public string? Receptor { get; set; }

        public int? ReceptorId { get; set; }


        public Bombero? ReceptorBombero { get; set; }

        public int? SeguroId { get; set; }
        public SeguroSalida? Seguro { get; set; }


        public int EncargadoId { get; set; }
        public Bombero Encargado { get; set; }

        public int QuienLlenoId { get; set; }
        public Bombero QuienLleno { get; set; }
        public TipoSalida Discriminador { get; set; }
    }

    private async void  GetSalidasViewModel(List<Salida> salidas)
    {
        //db.Set<Salida>().ToList();
        using var context = await DbFactory.CreateDbContextAsync();


        int contador = 0;
        foreach (Salida s in salidas)
        {
            List<Damnificado>? damificado = await context.Damnificados
                .Where(D => D.SalidaId == s.SalidaId)
                .ToListAsync();
            SalidasViewModel1 NuevaSalidaVM = new SalidasViewModel1()
            {
                    SalidaId = s.SalidaId,
                    HoraSalida= s.HoraSalida,
                    HoraLLegada = s.HoraLlegada,
                    KmSalida= s.KmSalida,
                    KmLlegada=s.KmLlegada,
                    NumeroParte= s.NumeroParte,
                    Descripcion=s.Descripcion,
                    CalleORuta=s.CalleORuta,
                    NumeroOKilometro=s.NumeroOKilometro,
                    EntreCalles= s.EntreCalles,
                    PisoNumero= s.PisoNumero,
                    Depto=s.Depto,
                    TipoZona=s.TipoZona,
                    NombreSolicitante= s.NombreSolicitante,
                    ApellidoSolicitante= s.ApellidoSolicitante,
                    DniSolicitante=s.DniSolicitante,
                    TelefonoSolicitante= s.TelefonoSolicitante,
                    NombreYApellidoReceptor=s.NombreYApellidoReceptor,
                    TelefonoReceptor=s.TelefonoReceptor,
                    ReceptorId=s.ReceptorId,
                    ReceptorBombero = s.ReceptorBombero,
                    Damnificados = damificado,
                    Moviles = s.Moviles,
                    Seguro=s.Seguro,
                    CuerpoParticipante = s.CuerpoParticipante,
                    EncargadoId=s.EncargadoId,
                    Encargado= s.Encargado,
                    QuienLleno = s.QuienLleno,
                    QuienLlenoId=s.QuienLlenoId,
                    TipoServicio=s.TipoServicio,
                    Discriminador = (TipoSalida)int.Parse(discriminadores[contador])
            };
            salidasViewModel.Add(NuevaSalidaVM);

            contador++;
        }
        StateHasChanged();

    }

    private async Task GetViewModelAccidentes(int Id)
    {
        using var db = await DbFactory.CreateDbContextAsync();

        Accidente? accidente = await db.Accidentes.Where(s => s.SalidaId == Id)
        .Include(sal => sal.VehiculosAfectado).ThenInclude(vehiculo => vehiculo.Seguro)
        .SingleOrDefaultAsync();
        List<VehiculoAfectadoAccidente> vehiculosAccidentesAfectados = await db.VehiculosAfectadosAccidentes.
        Where(va => va.SalidaId == Id)

        .ToListAsync();
        accidenteViewModels = new()
        {
            Tipo=accidente.Tipo,
            CantidadVheiculo=accidente.CantidadVehiculos,

            VehiculosAfectado=accidente.VehiculosAfectado,
            CondicionesClimaticas=accidente.CondicionesClimaticas,
            OtroCondicion=accidente.OtroCondicion

        };
        StateHasChanged();
        
    }

}
@code {
    string title = "Detalles Salida";
    bool _visible = false;
    int numeroParteVisualizar;
    private void ShowModalDetalle(int numeroParte)
    {
        numeroParteVisualizar = salidasViewModel.FindIndex(n => n.SalidaId == numeroParte);
        
        _visible = true;
    }
    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
}