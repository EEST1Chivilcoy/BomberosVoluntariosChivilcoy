@page "/isolated-select-test"
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.ViewModels.FactorClimatico;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.MaterialesPeligrosos;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.ViewModels.Accidente;
@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Rescates;


<Button Type="primary" OnClick="()=>ShowModalEditar()">Editar</Button>
<Modal Title="@("Editar Salida")"
       Visible="@_visibleEditar"
       OnOk="@HandleOk1"
       OnCancel="@HandleCancel1">
    <Form Model="@SalidasVMEditar"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
    @ref="@_form">
        <!-- Otros elementos del formulario se omiten para simplificar -->
        <!-- Aquí se encuentra el componente Select aislado -->
        <FormItem Label="Seleccionar Bombero">
            <Select DataSource="@filteredBomberos"
                    ValueChanged="OnSelectedItemChangedHandler"
                    EnableSearch
                    Style="width: 200px;"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    TItemValue="int"
                    TItem="BomberoViweModel"
                    Placeholder="Buscar bombero"
                    HideNotFoundContent="true"
                    SearchDebounceMilliseconds="350"
                    OnSearch="OnSearch">
            </Select>
        </FormItem>

    </Form>
</Modal>
@code {
    bool _visibleEditar = false;
    private class SalidasViewModel1 : SalidasViewModels
    {
        public int SalidaId { get; set; }


        public string? Receptor { get; set; }

        public int? ReceptorId { get; set; }


        public Bombero? ReceptorBombero { get; set; }

        public int? SeguroId { get; set; }
        public SeguroSalida? Seguro { get; set; }


        public int EncargadoId { get; set; }
        public Bombero Encargado { get; set; }

        public int QuienLlenoId { get; set; }
        public Bombero QuienLleno { get; set; }
        public TipoSalida Discriminador { get; set; }
    }
    #region original form coding
    public class Model
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
        public bool RememberMe { get; set; } = true;
    }

    private SalidasViewModel1 SalidasVMEditar = new SalidasViewModel1();

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(SalidasVMEditar)}");
    }

    #endregion

    #region original modal coding

    bool _visible1 = false;

    //private void ShowModal()
    //{
    //    _visible1 = true;
    //}

    private void HandleCancel1(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visibleEditar = false;
    }

    #endregion

    /*
     * Careful!
     *
     * next bind submit event to modal OK button
     */

    private Form<SalidasViewModel1> _form;

    /// <summary>
    /// when form is submited, close the modal
    /// </summary>
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visibleEditar = false;
    }

    /// <summary>
    /// on modal OK button is click, submit form manually
    /// </summary>
    /// <param name="e"></param>
    private void HandleOk1(MouseEventArgs e)
    {
        _form.Submit();
    }
}
@code
{
    List<BomberoViweModel> filteredBomberos = new List<BomberoViweModel>();
    // Datos de prueba para el componente Select
    List<BomberoViweModel> bomberoTodos = new List<BomberoViweModel>
    {
        new BomberoViweModel { NumeroLegajo = 1, Nombre = "Juan", Apellido="Pérez"},
        new BomberoViweModel { NumeroLegajo = 2, Nombre = "María", Apellido="Gómez" },
        new BomberoViweModel { NumeroLegajo = 3, Nombre = "Carlos", Apellido="Gómez" },
        new BomberoViweModel { NumeroLegajo = 4, Nombre = "Laura", Apellido="Fernandez" },
        new BomberoViweModel { NumeroLegajo = 5, Nombre = "Tincho", Apellido="Carlos" },
        new BomberoViweModel { NumeroLegajo = 6, Nombre = "Cruz", Apellido="Ian" },
        new BomberoViweModel { NumeroLegajo = 7, Nombre = "Santos", Apellido="Dias" }
    };

    private void OnSearch(string value)
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            filteredBomberos = bomberoTodos.Where(b => b.NombreYApellido.Contains(value, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredBomberos = new List<BomberoViweModel>(bomberoTodos);
        }
    }

    private void OnSelectedItemChangedHandler(int value)
    {
        Console.WriteLine($"Selected Legajo: {value}");
    }
    public void ShowModalEditar()
    {
       

        _visibleEditar = true;
    }
}