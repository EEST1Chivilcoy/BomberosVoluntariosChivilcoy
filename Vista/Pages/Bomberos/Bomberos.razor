@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/bomberos"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;

<div style="margin-top: 2em;">
    <Table @ref="table"
           TItem="Bombero"
           DataSource="@bomberos"
           @bind-SelectedRows="selectedRows"
           OnChange="OnChange"
           Total="_total"
           @bind-PageIndex="_pageIndex"
           @bind-PageSize="_pageSize">
        <TitleTemplate>
            <GridRow>
                <GridCol Span="4">
                    <Title Level="3">Bomberos</Title>
                </GridCol>
                <GridCol Span="8" Offset="12">
                    <Search Placeholder="Search" @bind-Value="@searchString" OnSearch="()=>search(searchString)" BindOnInput />
                     @if (String.IsNullOrWhiteSpace(searchString))
                    {
                        bomberos = bomberosRespaldo;
                    }
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <Selection Key="@(context.NumeroLegajo.ToString())" />
            <PropertyColumn Property="c=>c.NumeroLegajo"
                            DefaultSortOrder="@SortDirection.Descending"
                            SorterCompare="@((a,b)=> a - b)" />
            <TableFilter MatchMode="MatchMode.Contains" FilterCallback="OnFilterChanged" />
            <PropertyColumn Property="c=>c.Nombre" Sortable />
             <PropertyColumn Property="c=>c.Apellido" Sortable />
             <PropertyColumn Property="c=>c.Grado"
                             SortDirections="new[] { SortDirection.Descending }"
                             Filters="EscalafonJerarquicoFilter"
                             OnFilter="((value,name)=>Enum.GetName(typeof(EscalafonJerarquico), name).StartsWith(Enum.GetName(typeof(EscalafonJerarquico), value)))" />
             <ActionColumn Title="Action">
                 <Space>
                     <SpaceItem><Button Danger OnClick="()=>Delete(context.NumeroLegajo)">Delete</Button></SpaceItem>
                     <SpaceItem><Button Type="primary" OnClick="()=>ShowModalEditar(context.NumeroLegajo)">Editar</Button></SpaceItem>
                     <SpaceItem><Button Type="primary" OnClick="()=>ShowModalDetalle(context.NumeroLegajo)">Detalles</Button></SpaceItem>
                 </Space>
             </ActionColumn>
        </ColumnDefinitions>
         @*--------------------------------------------Modal-----------------------------------------------*@
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em; gap: 10px;">
        <Button OnClick="@(() => { navigationManager.NavigateTo($"/bomberos/agregar"); })">Agregar Bombero</Button>
        <Button OnClick="@ShowModalAgregarS">Agregar Sancion</Button>
        <Button OnClick="@ShowModalAgregarA">Ascender bombero</Button>
    </div>
 </div>


 <Modal Title="@("Bombero")"
        Visible="@_visible"
        OnOk="@HandleOk"
        OnCancel="@HandleCancel">
     <Form Loading="loading" Model="@bomberoVM"
           LabelColSpan="8"
           WrapperColSpan="16"
           OnFinish="OnFinish"
           OnFinishFailed="OnFinishFailed"
     @ref="@_form">

         <FormItem Label="Nombre">
             <Input DefaultValue="@bomberoVM.Nombre" @bind-Value="@bomberoVM.Nombre" />
         </FormItem>
         <FormItem Label="Apellido">
             <Input DefaultValue="@bomberoVM.Apellido" @bind-Value="@bomberoVM.Apellido" />
         </FormItem>

         <FormItem Label="Fecha de Nacimiento">
             <DatePicker @bind-Value="@bomberoVM.FechaNacimiento" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
             @*<DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@bomberoView.FechaNacimiento" Style="width: 100%;"/>*@
         </FormItem>

         <FormItem Label="DNI">
             <Input DefaultValue="@bomberoVM.Documento" @bind-Value="@bomberoVM.Documento" />
         </FormItem>
         <FormItem Label="Direccion">
             <Input DefaultValue="@bomberoVM.Direccion" @bind-Value="@bomberoVM.Direccion" />
         </FormItem>
         <FormItem Label="Dotaciones">
             <EnumSelect DefaultValue="@bomberoVM.Dotacion" TEnum="TipoDotaciones" @bind-Value="@bomberoVM.Dotacion" />
         </FormItem>

         <FormItem Label="Numero Legajo">
             <AntDesign.InputNumber DefaultValue="@bomberoVM.NumeroLegajo" @bind-Value="@bomberoVM.NumeroLegajo" />
         </FormItem>

         <FormItem Label="Fecha de Aceptacion">
             @*<DatePicker @bind-Value="@bomberoView.FechaAceptacion" TValue="DateTime?" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />*@
             <DatePicker DefaultValue="@bomberoVM.FechaAceptacion" @bind-Value="@bomberoVM.FechaAceptacion" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
         </FormItem>

         <FormItem Label="Numero IOMA">
             <Input DefaultValue="@bomberoVM.NumeroIoma" @bind-Value="@bomberoVM.NumeroIoma" />
         </FormItem>

         <FormItem Label="Lugar de nacimiento">
             <Input DefaultValue="@bomberoVM.LugarNacimiento" @bind-Value="@bomberoVM.LugarNacimiento" />
         </FormItem>

         @*<FormItem Label="Grupo Sanguineo" >
        <Input @bind-Value="@bomberoView.GrupoSanguineo"/>
        </FormItem>*@

         <FormItem Label="Dotaciones">
             <EnumSelect DefaultValue="@bomberoVM.GrupoSanguineo" TEnum="TipoGrupoSanguineo" @bind-Value="@bomberoVM.GrupoSanguineo" />
         </FormItem>

         <FormItem Label="Observaciones">
             <Input DefaultValue="@bomberoVM.Observaciones" @bind-Value="@bomberoVM.Observaciones" />
         </FormItem>

         <FormItem Label="Nivel de estuduio">
             <Input DefaultValue="@bomberoVM.NivelEstudios" @bind-Value="@bomberoVM.NivelEstudios" />
         </FormItem>

         <FormItem Label="Profesion">
             <Input DefaultValue="@bomberoVM.Profesion" @bind-Value="@bomberoVM.Profesion" />
         </FormItem>

         <FormItem Label="Resolucion 1">
             <Input DefaultValue="@bomberoVM.Resolucion1" @bind-Value="@bomberoVM.Resolucion1" />
         </FormItem>
         <FormItem Label="Resolucion 2">
             <Input DefaultValue="@bomberoVM.Resolucion2" @bind-Value="@bomberoVM.Resolucion2" />
         </FormItem>
         <FormItem Label="Resolucion 3">
             <Input DefaultValue="@bomberoVM.Resolucion3" @bind-Value="@bomberoVM.Resolucion3" />
         </FormItem>
         <FormItem Label="Resolucion 4">
             <Input DefaultValue="@bomberoVM.Resolucion4" @bind-Value="@bomberoVM.Resolucion4" />
         </FormItem>
         <FormItem Label="Resolucion 5">
             <Input DefaultValue="@bomberoVM.Resolucion5" @bind-Value="@bomberoVM.Resolucion5" />
         </FormItem>
         <FormItem Label="Resolucion 6">
             <Input DefaultValue="@bomberoVM.Resolucion6" @bind-Value="@bomberoVM.Resolucion6" />
         </FormItem>

         <FormItem Label="Es chofer">
             <Checkbox DefaultValue="@bomberoVM.Chofer" @bind-Checked="@bomberoVM.Chofer">
             </Checkbox>
             @if (bomberoVM.Chofer)
            {
                <label id="texto">Fecha vencimiento del carnet</label>
                <br>
                @*<DatePicker @bind-Value="@bomberoView.VencimientoRegistro" TValue="DateTime?" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />*@
                <DatePicker DefaultValue="@bomberoVM.VencimientoRegistro" @bind-Value="@bomberoVM.VencimientoRegistro" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
            }
            @if (!bomberoVM.Chofer)
            {
                <label id="texto">No es chofer</label>
            }
        </FormItem>

        <FormItem Label="Grado">
            <EnumSelect DefaultValue="@bomberoVM.Grado" TEnum="EscalafonJerarquico" @bind-Value="@bomberoVM.Grado" />
        </FormItem>
        <FormItem Label="Estado">
            <Select @bind-Value="@bomberoVM.Estado"
                    DefaultValue="@(bomberoVM.Estado)"
                    Style="width:200px"
                    TItemValue="EstadoBombero"
                    TItem="EstadoBombero"
                    Bordered="true">
                <SelectOptions>
                    <SelectOption TItemValue="EstadoBombero" TItem="EstadoBombero" Value="@(EstadoBombero.CuerpoActivo)" Label="Cuerpo activo" />
                    <SelectOption TItemValue="EstadoBombero" TItem="EstadoBombero" Value="@(EstadoBombero.Reserva)" Label="Reserva" />
                    <SelectOption TItemValue="EstadoBombero" TItem="EstadoBombero" Value="@(EstadoBombero.ComisionDirectiva)" Label="Comision directiva" />
                    <SelectOption TItemValue="EstadoBombero" TItem="EstadoBombero" Value="@(EstadoBombero.Retirado)" Label="Retirado" />
                </SelectOptions>
            </Select>
        </FormItem>

        <FormItem Label="Sexo">
            <EnumSelect DefaultValue="@bomberoVM.Sexo" TEnum="TipoSexo" @bind-Value="@bomberoVM.Sexo" />
        </FormItem>

        @* Carga Contacto-----------------------------------------------------------------------*@
        <FormItem Label="Telefono Laboral">
            <Input DefaultValue="@bomberoVM.TelefonoLaboral" @bind-Value="@bomberoVM.TelefonoLaboral" />
        </FormItem>

        <FormItem Label="Telefono Celular">
            <Input DefaultValue="@bomberoVM.TelefonoCel" @bind-Value="@bomberoVM.TelefonoCel" />
        </FormItem>

        <FormItem Label="Telefono Fijo">
            <Input DefaultValue="@bomberoVM.TelefonoFijo" @bind-Value="@bomberoVM.TelefonoFijo" />
        </FormItem>

        <FormItem Label="Email">
            <Input DefaultValue="@bomberoVM.Email" @bind-Value="@bomberoVM.Email" />
        </FormItem>
        @*Carga Brigada-----------------------------------------------------------------------*@
        <FormItem Label="Nombre Brigada">
            <Input DefaultValue="@bomberoVM.NombreBrigada" @bind-Value="@bomberoVM.NombreBrigada" />
        </FormItem>
        <FormItem Label="Nombre Brigada">
            <Select TItem="Brigada"
                    TItemValue="string"
                    DataSource="@brigadas"
            @bind-Value="@bomberoVM.NombreBrigada"
                    DefaultValue="@bomberoVM.NombreBrigada"
                    ValueName="@nameof(Brigada.Nombre)"
                    LabelName="@nameof(Brigada.Nombre)"
                    OnSelectedItemChanged="OnSelectedItemChangedHandler">
            </Select>
        </FormItem>
        @*
        <FormItem Label="Vigente desde">
        <DatePicker DefaultValue="@DateTime.Now" @bind-Value="@bomberoVM.VigenteDesde" Picker="@DatePickerType.Date" Style="width: 150px;" AllowClear />
        </FormItem>
        <FormItem Label="Vigente hasta">
        <DatePicker DefaultValue="@null" @bind-Value="@bomberoVM.VigenteHasta" Picker="@DatePickerType.Date" Style="width: 150px;" AllowClear />
        </FormItem>
        <FormItem Label="Dia de semana">
        <Select @bind-Value="@bomberoVM.DiaSemana"
        Style="width:200px"
        TItemValue="Dias"
        TItem="Dias"
        Bordered="true">
        <SelectOptions>
        <SelectOption TItemValue="Dias" TItem="Dias" Value="@(Dias.Domingo)" Label="Domingo" />
        <SelectOption TItemValue="Dias" TItem="Dias" Value="@(Dias.Lunes)" Label="Lunes" />
        <SelectOption TItemValue="Dias" TItem="Dias" Value="@(Dias.Martes)" Label="Martes" />
        <SelectOption TItemValue="Dias" TItem="Dias" Value="@(Dias.Miercoles)" Label="Miercoles" />
        <SelectOption TItemValue="Dias" TItem="Dias" Value="@(Dias.Jueves)" Label="Jueves" />
        <SelectOption TItemValue="Dias" TItem="Dias" Value="@(Dias.Viernes)" Label="Viernes" />
        <SelectOption TItemValue="Dias" TItem="Dias" Value="@(Dias.Sabado)" Label="Sabado" />
        </SelectOptions>
        </Select>
        </FormItem>

        <FormItem Label="Horarios">
        <Select @bind-Value="@horadesde"
        Style="width:200px"
        TItemValue="int"
        TItem="int"
        Bordered="true">
        <SelectOptions>
        @for (int i = 1; i < 25 ; i++)
        {
        <SelectOption TItemValue="int" TItem="int" Value="@(i)" />
        }
        </SelectOptions>
        </Select>

        <Select @bind-Value="@horaasta"
        Style="width:200px"
        TItemValue="int"
        TItem="int"
        Bordered="true">
        <SelectOptions>
        @for (int i = 1; i < 25; i++)
        {
        <SelectOption TItemValue="int" TItem="int" Value="@(i)" />
        }
        </SelectOptions>
        </Select>
        </FormItem>
        <FormItem Label="Hora hasta">
        @*<TimePicker TValue="TimeOnly" />
        </FormItem>


        <FormItem Label="Tipo de horario">
        <Select @bind-Value="@bomberoVM.ModoRotativo"
        DefaultValue="TiposRotativos.Fijo"
        Style="width:200px"
        TItemValue="TiposRotativos"
        TItem="TiposRotativos"
        Bordered="true">
        <SelectOptions>
        <SelectOption TItemValue="TiposRotativos" TItem="TiposRotativos" Value="@(TiposRotativos.Fijo)" Label="Fijo" />
        <SelectOption TItemValue="TiposRotativos" TItem="TiposRotativos" Value="@(TiposRotativos.Semanal)" Label="Semanal" />
        <SelectOption TItemValue="TiposRotativos" TItem="TiposRotativos" Value="@(TiposRotativos.Mensual)" Label="Mensual" />
        </SelectOptions>
        </Select>
        </FormItem>

        @if (bomberoVM.ModoRotativo != TiposRotativos.Fijo)
        {
        <FormItem Label="Periodo">
        <Input DefaultValue="@TimeOnly.MaxValue" @bind-Value="@bomberoVM.Periodo" />
        </FormItem>
        }
        *@
    </Form>

</Modal>
@{
    RenderFragment footer = @<Template>
        <Button OnClick="@HandleCancelDetalle" @key="@( "back" )">Salir</Button>
    </Template>;
}
<Modal Footer="null" Title="@("Ascenso")"
       Visible="@_visibleAgregarA"
       OnOk="@HandleOkAgregarA"
       OnCancel="@HandleCancelAgregarA">
    <AscensoBombero />
    <Button Style="margin-right: 100px !important;" Type="@ButtonType.Primary" OnClick="@HandleCancelAgregarA">
        Volver
    </Button>
</Modal>
<Modal Footer="null" Title="@("Sancion")" Style=""
       Visible="@_visibleAgregarS"
       OnOk="@HandleOkAgregarS"
       OnCancel="@HandleCancelAgregarS">
    <SancionBombero />
    <Button Style="margin-right: 100px !important;" Type="@ButtonType.Primary" OnClick="@HandleCancelAgregarS">
        Volver
    </Button>
</Modal>
<Modal Title="@("Detalles de bombero")"
       Visible="@_visibleDetalle"
       OnCancel="@HandleCancelDetalle"
       Footer="@footer">

    <p>Nombre: @bomberoVM.Nombre</p>
    <p>Apellido: @bomberoVM.Apellido</p>
    <p>Direccion: @bomberoVM.Direccion</p>
    <p>FechaNacimiento: @bomberoVM.FechaNacimiento</p>
    <p>FechaNacimiento: @bomberoVM.FechaNacimiento</p>
    <p>NumeroLegajo: @bomberoVM.NumeroLegajo</p>
    <p>Grado: @bomberoVM.Grado</p>
    <p>Dotacion: @bomberoVM.Dotacion</p>
    <p>Brigada: @bomberoVM.Brigada</p>
    @if (@bomberoVM.Chofer)
    {
        <p>Chofer: Es Chofer</p>
        <p>VencimientoRegistro: @bomberoVM.VencimientoRegistro</p>
    }
    else
    {
        <p>Chofer: No es Chofer</p>
    }


    <p>VencimientoRegistro: @bomberoVM.VencimientoRegistro</p>
    <p>Sexo: @bomberoVM.Sexo</p>
    <p>LugarNacimiento: @bomberoVM.LugarNacimiento</p>
    <p>Documento: @bomberoVM.Documento</p>
    <p>LugarNacimiento: @bomberoVM.LugarNacimiento</p>
    <p>GrupoSanguineo: @bomberoVM.GrupoSanguineo</p>
    <p>Observaciones: @bomberoVM.Observaciones</p>
    <p>Profesion: @bomberoVM.Profesion</p>
    <p>NivelEstudios: @bomberoVM.NivelEstudios</p>
    <p>NumeroIoma: @bomberoVM.NumeroIoma</p>
    <p>Resolucion1: @bomberoVM.Resolucion1</p>
    <p>Resolucion2: @bomberoVM.Resolucion2</p>
    <p>Resolucion3: @bomberoVM.Resolucion3</p>
    <p>Resolucion4: @bomberoVM.Resolucion4</p>
    <p>Resolucion5: @bomberoVM.Resolucion5</p>
    <p>Resolucion6: @bomberoVM.Resolucion6</p>
    <p>TelefonoCel: @bomberoVM.TelefonoCel</p>
    <p>TelefonoLaboral: @bomberoVM.TelefonoLaboral</p>
    <p>TelefonoFijo: @bomberoVM.TelefonoFijo</p>
    <p>Email: @bomberoVM.Email</p>
    <p>NombreBrigada: @bomberoVM.NombreBrigada</p>
</Modal>
@if (selectedRows != null && selectedRows.Any())
{
    <Button Danger Size="small" OnClick="@(e => { selectedRows = null; })">Clear</Button>

    @foreach (var selected in selectedRows)
    {
        <Tag @key="selected.NumeroLegajo" Closable OnClose="e=>RemoveSelection(selected.NumeroLegajo)">@selected.NumeroLegajo - @selected.NumeroLegajo</Tag>
    }
}
@code {
    //variables

    private bool busquedaVacia = true;
    //static int horadesde, minutosdesde, horaasta, minutosasta;
    //TimeOnly horacero = new(0,0,0);
    #region "tabla"
    //Bombero[]? bomberos;
    private Brigada[]? brigadas;
    string searchString;
    IEnumerable<Bombero> dataSource;
    IEnumerable<Bombero> selectedRows;
    ITable table;
    List<Bombero>? bomberos = new List<Bombero>();//lo hago con lista porque no me deja usar el buscador en OnChange por pasar valores nulos
    List<Bombero>? bomberosRespaldo = new List<Bombero>();
    List<string>? bomberosFiltro = new List<string>();
    private List<Bombero> bomberosFiltrados = new List<Bombero>();


    private TableFilter<EscalafonJerarquico>[] EscalafonJerarquicoFilter;

    int _pageIndex = 1;
    int _pageSize = 6;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        brigadas = await db.Brigadas.ToArrayAsync();
        bomberos = await db.Bomberos.Where(x => x.Estado != EstadoBombero.Retirado).ToListAsync();//Se trae a todos los bomberos que no esten en reserva

        bomberosRespaldo = bomberos;

        EscalafonJerarquicoFilter = new TableFilter<EscalafonJerarquico>[Enum.GetValues(typeof(EscalafonJerarquico)).Length];
        int i = 0;
        foreach (EscalafonJerarquico value in Enum.GetValues(typeof(EscalafonJerarquico)))
        {
            EscalafonJerarquicoFilter[i] = new() { Text = Enum.GetName(typeof(EscalafonJerarquico), value), Value = value };
            i++;
        }


        StateHasChanged();
    }

    void OnRowClick(RowData<Bombero> row)
    {
        Console.WriteLine($"row {row.Data.Brigada.BrigadaId} was clicked");
    }//Toma el valor del valor de la fila seleccionada

    private async Task OnChange(QueryModel<Bombero> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
        //dataSource = queryModel.ExecuteQuery(bomberos.AsQueryable())
        //    .Where(x => string.IsNullOrWhiteSpace(searchString) || x.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase));
        //arreglar busqueda-----------------------------------------------------------------------------------------------------------------------------------------
        OnInitializedAsync();
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.NumeroLegajo != id);
        selectedRows = selected;
    }

    private async void Delete(int id)
    {
        using var context = DbFactory.CreateDbContext();
        Bombero? bombero = await context.Bomberos.Where(b => b.NumeroLegajo == id).SingleOrDefaultAsync();
        context.Remove(bombero);
        bomberos = bomberos.Where(x => x.NumeroLegajo != id).ToList();
        _total = bomberos.Count;
        await context.SaveChangesAsync();
        StateHasChanged();
    }
    #endregion
    //----------------------------------------------------------------------------------------------
    #region "ViewModel"
    private class BomberosViewModel
    {
        public DateTime FechaNacimiento { get; set; }
        public DateTime FechaAceptacion { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public EstadoBombero Estado { get; set; }
        public int NumeroLegajo { get; set; }
        public EscalafonJerarquico Grado { get; set; }
        public TipoDotaciones Dotacion { get; set; }
        [Required, StringLength(255)]
        public string Brigada { get; set; }
        public bool Chofer { get; set; }
        public DateTime? VencimientoRegistro { get; set; }
        public TipoSexo Sexo { get; set; }
        [Required, StringLength(255)]
        public string Direccion { get; set; }
        [Required, StringLength(255)]
        public string LugarNacimiento { get; set; }
        [Required, StringLength(255)]
        public string Documento { get; set; }
        [Required, StringLength(255)]
        public TipoGrupoSanguineo GrupoSanguineo { get; set; }
        [Required, StringLength(255)]
        public string Observaciones { get; set; }
        [Required, StringLength(255)]
        public string Profesion { get; set; }
        [Required, StringLength(255)]
        public string NivelEstudios { get; set; }
        [Required, StringLength(255)]
        public string NumeroIoma { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion1 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion2 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion3 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion4 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion5 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion6 { get; set; }
        //Contacto-------------------------------
        [Required, StringLength(255)]
        public string? TelefonoCel { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoLaboral { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoFijo { get; set; }
        [Required, StringLength(255)]
        public string? Email { get; set; }
        ////Imagen-------------------------------
        //public string Base64 { get; set; }
        //[Required, StringLength(255)]
        //public string TipoImagen { get; set; }
        //[Required, StringLength(255)]
        //public string NombreImagen { get; set; }
        //Brigada-------------------------------
        public string NombreBrigada { get; set; }

        //Horarios
        /*
        public bool es_periodico { get; set; }
        public DateTime? VigenteDesde { get; set; }
        public DateTime? VigenteHasta { get; set; }
        public Dias DiaSemana { get; set; }
        public TimeOnly HoraDesde { get; set; }
        public TimeOnly HoraHasta { get; set; }
        public TimeOnly? Periodo { get; set; }
        public TiposRotativos ModoRotativo { get; set; }
        public int BomberoId { get; set; }
        */
    }
    #endregion
    #region Primera parte Modal

    private BomberosViewModel bomberoVM = new BomberosViewModel();

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(bomberoVM)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    #endregion

    #region Acciones Modal

    bool _visible = false;
    bool _visibleDetalle = false;
    public bool _visibleAgregarS;
    public bool _visibleAgregarA;
    int idBombero;
    private async void ShowModalEditar(int id)
    {

        GetBomberoViewModel(id);
        await Task.Delay(200);
        _visible = true;
        idBombero = id;
    }//Abre el modal editar

    private async void ShowModalDetalle(int id)
    {
        GetBomberoViewModel(id);
        await Task.Delay(200);
        _visibleDetalle = true;


    }//Abre modal ver detalles

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("e");
        _visible = false;
    }
    private void HandleCancelDetalle(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleDetalle = false;
    }

    #endregion
    private Form<BomberosViewModel> _form;

    /// <summary>
    /// when form is submited, close the modal
    /// </summary>
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine("e");
        _visible = false;
    }

    private async void HandleOk(MouseEventArgs e)
    {
        //bomberoVM.GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), bomberoVM.GrupoSanguineo);
        //_form.Submit();

        EditarBombero(idBombero);
        //navigationManager.NavigateTo($"/bomberos");

        //StateHasChanged();
        //await Task.Delay(500);
        //NevigateToYourUrl();
        _visible = false;
    }

    private void NevigateToYourUrl()
    {
        navigationManager.NavigateTo($"/bomberos", true);
    }

    private async void GetBomberoViewModel(int id)
    {
        using var context = DbFactory.CreateDbContext();
        Bombero? bombero = await context.Bomberos.Where(b => b.NumeroLegajo == id).SingleOrDefaultAsync();
        Brigada? brigada = await context.Brigadas.Where(b => b.BrigadaId == bombero.BrigadaId).SingleOrDefaultAsync();
        //Bombero? imagen = await context.Bomberos.Include(i => i.ImagenId).SingleOrDefaultAsync();
        Bombero? bombero1 = await context.Bomberos
            .Include(b => b.Contacto)
            .Where(b => b.NumeroLegajo == id)
            .SingleOrDefaultAsync();

        BomberosViewModel BomeroPasajeVM = new()
            {
                FechaNacimiento = bombero.FechaNacimiento,
                Sexo = bombero.Sexo,
                Nombre = bombero.Nombre,
                Apellido = bombero.Apellido,
                Documento = bombero.Documento,
                NumeroLegajo = bombero.NumeroLegajo,
                NumeroIoma = bombero.NumeroIoma,
                LugarNacimiento = bombero.LugarNacimiento,
                Grado = bombero.Grado,

                //NombreImagen = bombero.Imagen.NombreImagen,
                //TipoImagen = bombero.Imagen.TipoImagen,
                //Base64 = bombero.Imagen.Base64Imagen,

                Dotacion = bombero.Dotacion,

                NombreBrigada = brigada.Nombre,

                Resolucion1 = bombero.Resolucion1,
                Resolucion2 = bombero.Resolucion2,
                Resolucion3 = bombero.Resolucion3,
                Resolucion4 = bombero.Resolucion4,
                Resolucion5 = bombero.Resolucion5,
                Resolucion6 = bombero.Resolucion6,
                GrupoSanguineo = (TipoGrupoSanguineo)Enum.Parse(typeof(TipoGrupoSanguineo), bombero.GrupoSanguineo),
                Estado = bombero.Estado,
                Chofer = bombero.Chofer,
                VencimientoRegistro = bombero.VencimientoRegistro,
                Direccion = bombero.Direccion,
                Observaciones = bombero.Observaciones,
                Profesion = bombero.Profesion,
                NivelEstudios = bombero.NivelEstudios,
                FechaAceptacion = bombero.FechaAceptacion,

                TelefonoCel = bombero1.Contacto.TelefonoCel,
                TelefonoFijo = bombero1.Contacto.TelefonoFijo,
                TelefonoLaboral = bombero1.Contacto.TelefonoLaboral,
                Email = bombero1.Contacto.Email
            };
        bomberoVM = BomeroPasajeVM;
        StateHasChanged();
    }//Se obtienen los valores de la base de datos al view model

    private async void EditarBombero(int id)
    {
        /*
        bomberoVM.HoraDesde = horacero;
        bomberoVM.HoraHasta = horacero;
        bomberoVM.HoraDesde.AddHours(horadesde);
        bomberoVM.HoraHasta.AddHours(horaasta);
        */
        using var context = DbFactory.CreateDbContext();
        Bombero? bombero = await context.Bomberos
        .Where(b => b.NumeroLegajo == id)
        .Include(c => c.Contacto)
        .Include(h => h.Horarios.Count)
        .SingleOrDefaultAsync();
        Brigada? brigada = await context.Brigadas.Where(b => b.BrigadaId == bombero.BrigadaId).SingleOrDefaultAsync();
        //HorarioBombero horario = await context.HorariosBomberos.Where(h => h.BomberoId == id).SingleOrDefaultAsync();

        bombero.FechaNacimiento = bomberoVM.FechaNacimiento;
        bombero.Sexo = bomberoVM.Sexo;
        bombero.FechaNacimiento = bomberoVM.FechaNacimiento;
        bombero.Sexo = bomberoVM.Sexo;
        bombero.Nombre = bomberoVM.Nombre;
        bombero.Apellido = bomberoVM.Apellido;
        bombero.Documento = bomberoVM.Documento;
        bombero.NumeroLegajo = bomberoVM.NumeroLegajo;
        bombero.NumeroIoma = bomberoVM.NumeroIoma;
        bombero.LugarNacimiento = bomberoVM.LugarNacimiento;
        bombero.Grado = bomberoVM.Grado;
        //Imagen = new()
        //{
        //    NombreImagen = bomberoVM.NombreImagen,
        //    TipoImagen = bomberoVM.TipoImagen,
        //    Base64Imagen = bomberoVM.Base64
        //},
        bombero.Dotacion = bomberoVM.Dotacion;
        brigada.Nombre = bomberoVM.NombreBrigada;
        bombero.Resolucion1 = bomberoVM.Resolucion1;
        bombero.Resolucion2 = bomberoVM.Resolucion2;
        bombero.Resolucion3 = bomberoVM.Resolucion3;
        bombero.Resolucion4 = bomberoVM.Resolucion4;
        bombero.Resolucion5 = bomberoVM.Resolucion5;
        bombero.Resolucion6 = bomberoVM.Resolucion6;
        bombero.GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), bomberoVM.GrupoSanguineo);
        bombero.Estado = bomberoVM.Estado;
        bombero.Chofer = bomberoVM.Chofer;
        bombero.VencimientoRegistro = bomberoVM.VencimientoRegistro;
        bombero.Direccion = bomberoVM.Direccion;
        bombero.Observaciones = bomberoVM.Observaciones;
        bombero.Profesion = bomberoVM.Profesion;
        bombero.NivelEstudios = bomberoVM.NivelEstudios;
        bombero.FechaAceptacion = bomberoVM.FechaAceptacion;
        bombero.Contacto.TelefonoCel = bomberoVM.TelefonoCel;
        bombero.Contacto.TelefonoFijo = bomberoVM.TelefonoFijo;
        bombero.Contacto.TelefonoLaboral = bomberoVM.TelefonoLaboral;
        bombero.Contacto.Email = bomberoVM.Email;
        //agregar el seteo de hora desde y asta
        /*
        horario.HoraDesde = bomberoVM.HoraDesde;
        horario.HoraHasta = bomberoVM.HoraHasta;
        */

        await context.SaveChangesAsync();
        await OnInitializedAsync();
        StateHasChanged();
    }

    public string CargarImage(Bombero bombero)
    {
        using var db = DbFactory.CreateDbContext();

        string src = "/";

        ImagenMovil? imagen = db.ImagenesMoviles.Where(i => i.ImagenId == bombero.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }

        return src;
    }

    private void OnSelectedItemChangedHandler(Brigada value)
    {
        Console.WriteLine($"selected: ${value?.Nombre}");
    }

    private void search(string value)
    {
        int number;

        bomberosFiltrados = bomberos.Where(d =>
        d.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) ||
        Enum.GetName(typeof(EscalafonJerarquico), d.Grado).Contains(value, StringComparison.OrdinalIgnoreCase) ||
        d.Apellido.Contains(value, StringComparison.OrdinalIgnoreCase))
        .ToList();
        if (int.TryParse(value, out number))
        {
            bomberosFiltrados = bomberos.Where(d =>
            d.NumeroLegajo.Equals(number)).ToList();
        }
        bomberos = bomberosFiltrados;

    }

    private void UpdateSearchStatus()
    {
        busquedaVacia = string.IsNullOrWhiteSpace(searchString);
        if (busquedaVacia) bomberos = bomberosRespaldo;
    }
    private void ShowModalAgregarS()
    {
        _visibleAgregarS = true;
    }

    private async void HandleOkAgregarS(MouseEventArgs e)
    {
        _visibleAgregarS = false;
    }
    public async void HandleCancelAgregarS(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregarS = false;
    }
    private async void HandleOkAgregarA(MouseEventArgs e)
    {
        _visibleAgregarA = false;
    }
    public async void HandleCancelAgregarA(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregarA = false;
    }
    private void ShowModalAgregarA()
    {
        _visibleAgregarA = true;
    }
}
