@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/bomberos"
@using Vista.Services
@inject IBomberoService BomberoService
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json

<style>
    .template {
        margin-top: 20px;
        width: 100%;
        max-width: 1200px;
        padding: 20px;
        background-color: #f8f8f8;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .ant-table {
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .ant-table-title {
        background-color: #A63333
    }

    .ant-table-thead .ant-table-cell {
        background-color: #A63333 !important;
        color: white !important;
        font-weight: bold;
    }

    .ant-table-cell {
        padding: 16px !important;
    }

    .title-template-container {
        background-color: #A63333;
        padding: 16px;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-input {
        width: 250px;
    }

        .search-input input {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            border: none;
        }

            .search-input input::placeholder {
                color: rgba(255, 255, 255, 0.7);
            }

    .add-button {
        background-color: #4CAF50 !important;
        border-color: #438E46 !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    @@media (max-width: 960px) {
        .template {
            padding: 10px;
        }

        .title-template-container {
            flex-direction: column;
            align-items: stretch;
        }

        .search-input,
        .add-button {
            width: 100%;
            margin-top: 10px;
        }
    }

    .flex-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    /* Modal de Editar ------------------------------- */
    .ant-form-horizontal .ant-form-item-label {
        flex-grow: 1;
        background: #A63333;
    }

        .ant-form-horizontal .ant-form-item-label > label {
            color: #FFFFFF;
            padding: 2px 4px;
            margin-right: 267.2px;
        }

    .ant-form-item {
        box-sizing: border-box;
        margin: 0;
        margin-bottom: 0px;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        font-variant: tabular-nums;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        margin-bottom: 8px !important;
        vertical-align: top;
        font-weight: bold;
    }
    .ant-modal-title {
        margin: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 16px;
        line-height: 22px;
        word-wrap: break-word;
        font-weight: bold !important;
    }
    /* Modal de Editar ------------------------------- */

    .ant-modal .ant-form-item-label {
        flex-grow: 1;
        background: #A63333;
    }

        .ant-modal .ant-form-item-label > label {
            color: #FFFFFF;
            padding: 2px 4px;
            margin-right: 267.2px;
        }

    /* Modal de Detalles ------------------------------- */
    .ant-form-horizontal .ant-form-item-control {
        flex: 1 1 0;
        min-width: 0;
        padding-left: 5px;
    }
    /* Modal de Detalles ------------------------------- */
    
    /* Ambos Modales ------------------------------- */
    .ant-modal-content {
        position: relative;
        background-color: #fff;
        background-clip: padding-box;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05);
        pointer-events: auto;
        border: 1px solid red !important;
    }
    /* Ambos Modales ------------------------------- */

    /* SWITCH */
    [type="button"]:not(:disabled), [type="reset"]:not(:disabled), [type="submit"]:not(:disabled), button:not(:disabled) {
        cursor: pointer;
        margin-left: 2px !important;
    }

    .ant-switch-checked {
        background-color: #A63333 !important;
    }
    /* SWITCH */


</style>

<Flex Class="flex-container" Justify="center" Align="center">
    <div class="template">
        <Table @ref="table"
               TItem="Bombero"
               DataSource="@bomberos"
               OnChange="OnChange"
               @bind-PageIndex="_pageIndex"
               @bind-PageSize="_pageSize"
               Responsive>
            <TitleTemplate>
                <Space Size="@("large")" Style="width: 100%; justify-content: flex-end;">
                    <f Style="font-weight: bold; color: white; font-size: 14px; margin-right: 5px !important;">Filtrar por: </f>
                    <SpaceItem>
                      <EnumSelect DefaultValue="EstadoBombero.CuerpoActivo" ValueChanged="(EstadoBombero estado) => search(searchString, estado)" TEnum="EstadoBombero" />
                    </SpaceItem>
                    <SpaceItem>
                        <Search Placeholder="Buscar Numerario"
                                @bind-Value="@searchString"
                                OnSearch="()=>search(searchString, Estado)"
                                BindOnInput
                                Style="width: 200px;" />
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="primary"
                                OnClick="@(() => { navigationManager.NavigateTo("/bomberos/agregar"); })"
                                Class="add-button">
                            <Icon Type="plus" /> Agregar
                        </Button>
                    </SpaceItem>
                </Space>
            </TitleTemplate>
            <ColumnDefinitions>
                <Column TData="Bombero" Title="Foto" Width="100">
                    <Avatar Size="64" Src="@CargarImage(context)" />
                </Column>
                <PropertyColumn Property="@(c => $"{c.Apellido}, {c.Nombre}")" Title="Apellido y Nombre" Sortable />
                <PropertyColumn Title="Legajo" Property="c=>c.NumeroLegajo" Sortable
                                DefaultSortOrder="@SortDirection.Descending"
                                SorterCompare="@((a,b)=> a - b)" />
                <PropertyColumn Title="Jerarquía" Property="c=>c.Grado" Sortable
                                Filters="EscalafonJerarquicoFilter"
                                OnFilter="((value,name)=>Enum.GetName(typeof(EscalafonJerarquico), name).StartsWith(Enum.GetName(typeof(EscalafonJerarquico), value)))" />
                <PropertyColumn Title="Domicilio" Property="c=>c.Direccion" Sortable />
                <PropertyColumn Title="Contacto" Property="c=>c.Contacto" Sortable />
                <ActionColumn Title="Acciones" Align=ColumnAlign.Center>
                    <Space>
                        <SpaceItem>
                            <Button Type="primary" OnClick="()=>DetalleBombero(context.PersonaId)">
                                <Icon Type="eye" /> Detalles
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Type="default" OnClick="()=>EditarBombero(context.PersonaId)">
                                <Icon Type="edit" /> Editar
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            @if (context.Estado != EstadoBombero.Inactivo)
                            {
                                <Popconfirm Title="¿Está seguro de dar de baja este registro?"
                                            OnConfirm="()=>CambiarEstado(context.PersonaId, EstadoBombero.Inactivo)"
                                            OkText="Sí"
                                            CancelText="No">
                                    <Button Danger>
                                        <Icon Type="down" /> Baja
                                    </Button>
                                </Popconfirm>
                            }
                            else
                            {
                                <Popconfirm Title="¿Está seguro de dar de alta este registro?"
                                            OnConfirm="()=>CambiarEstado(context.PersonaId, EstadoBombero.CuerpoActivo)"
                                            OkText="Sí"
                                            CancelText="No">
                                    <Button Color="Color.Green2">
                                        <Icon Type="up" /> Alta
                                    </Button>
                                </Popconfirm>
                            }
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ColumnDefinitions>
        </Table>
    </div>
</Flex>

@{
    RenderFragment footer = @<Template>
        <Button OnClick="@CloseModals" @key="@( "back" )">Cerrar</Button>
    </Template>;
}

@if (EditarVisible == true)
{
    <Modal Footer="null" Title="Editar" OnCancel="CloseModals" Visible="@EditarVisible">
        <BomberosEditar BomberoId="@BomberoId" OnClose="CloseModals" />
    </Modal>
}
@if (DetallesVisible == true)
{
    <Modal Visible="@DetallesVisible" OnCancel="@CloseModals" Footer="@footer">
        <BomberosDetalles BomberoId="@BomberoId" />
    </Modal>
}

@code {
    string searchString;
    ITable table;
    List<Bombero>? bomberos = new List<Bombero>();
    List<Bombero>? SinFiltrar = new List<Bombero>();
    public EstadoBombero Estado = EstadoBombero.CuerpoActivo;

    private TableFilter<EscalafonJerarquico>[] EscalafonJerarquicoFilter;

    int _pageIndex = 1;
    int _pageSize = 6;

    // Funciones modal
    public int BomberoId { get; set; }
    public bool EditarVisible { get; set; }
    public bool DetallesVisible { get; set; }

    private async Task CambiarEstado(int BomberoId, EstadoBombero estado)
    {
        using var db = await DbFactory.CreateDbContextAsync();
        Bombero bombero = await db.Bomberos.Where(b => b.PersonaId == BomberoId).SingleOrDefaultAsync();
        bombero.Estado = estado;
        await BomberoService.CambiarEstado(bombero);
        await RefreshData();
    }

    private async void EditarBombero(int ID)
    {
        BomberoId = ID;
        EditarVisible = true;
    }
    private async void DetalleBombero(int ID)
    {
        BomberoId = ID;
        DetallesVisible = true;
    }
    private async void CloseModals()
    {
        DetallesVisible = false;
        EditarVisible = false;
        await RefreshData();
    }

    // Init, OnChange y Carga de datos
    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        search(searchString, Estado);
        SinFiltrar = await db.Bomberos.ToListAsync();

        EscalafonJerarquicoFilter = new TableFilter<EscalafonJerarquico>[Enum.GetValues(typeof(EscalafonJerarquico)).Length];
        int i = 0;
        foreach (EscalafonJerarquico value in Enum.GetValues(typeof(EscalafonJerarquico)))
        {
            EscalafonJerarquicoFilter[i] = new() { Text = Enum.GetName(typeof(EscalafonJerarquico), value), Value = value };
            i++;
        }

        StateHasChanged();
    }

    private async Task RefreshData()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        SinFiltrar = await db.Bomberos.ToListAsync();
        search(searchString, Estado);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnChange(QueryModel<Bombero> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
        OnInitializedAsync();
    }

    public string CargarImage(Bombero bombero)
    {
        var Context = DbFactory.CreateDbContext();

        string src = "/";

        ImagenBombero? imagen = Context.ImagenesBomberos.Where(i => i.ImagenId == bombero.ImagenId).SingleOrDefault();

        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }
        return src;
    }

    private void search(string value, EstadoBombero estado)
    {
        int number;

        Estado = estado;

        bomberos = SinFiltrar.Where(d => d.Estado == Estado).ToList();

        if (string.IsNullOrEmpty(value))
        {
            StateHasChanged();
            return;
        }

        bomberos = bomberos.Where(d =>
        d.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) ||
        Enum.GetName(typeof(EscalafonJerarquico), d.Grado).Contains(value, StringComparison.OrdinalIgnoreCase) ||
        d.Apellido.Contains(value, StringComparison.OrdinalIgnoreCase))
        .ToList();
        if (int.TryParse(value, out number))
        {
            bomberos = bomberos.Where(d =>
            d.NumeroLegajo.Equals(number)).ToList();
        }
        StateHasChanged();
    }
}