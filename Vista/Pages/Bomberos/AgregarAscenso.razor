@implements IDisposable
@using System.ComponentModel.DataAnnotations
@using Vista.Services
@inject IBomberoService BomberoService
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }
</style>

<Form Model="AscensoVM"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;">
    <FormItem Label="Personal Afectado">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@BomberoTodos"
        @bind-Value="@Bombero"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione Bombero Encargado"
                DefaultActiveFirstOption="false"
                OnSelectedItemChanged="HandleChange"
                EnableSearch>
        </Select>
    </FormItem>
    <FormItem Label="Fecha de emision">
        <DatePicker AllowClear="false" @bind-Value="AscensoVM.FechaEmision" />
    </FormItem>
    <FormItem Label="Descripción">
        <Input @bind-Value="AscensoVM.Descripcion" />
    </FormItem>
    <FormItem Label="Grado anterior">
        <Input Value="@AscensoVM.GradoAntiguo" Disabled />
    </FormItem>
    <FormItem Label="Grado ascenso">
        <EnumSelect TEnum="@EscalafonJerarquico" @bind-Value="@AscensoVM.GradoAscenso" />
    </FormItem>
    <FormItem Style="width: 100% !important;
            display: flex !important;
            justify-content: flex-end !important;
            align-items: flex-end !important; height:100% !important; margin-bottom: -32px;" WrapperColOffset="8" WrapperColSpan="16">
        <Button Class="boton_p" HtmlType="submit" Style="margin-right: 60px;">
            Ascender Bombero
        </Button>
    </FormItem>
</Form>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    List<BomberoViweModel> BomberoTodos = new List<BomberoViweModel>();
    public Bombero[]? bomberos;
    public int Bombero { get; set; }
    BomberosDbContext Context { get; set; }
    AscensoViewModel AscensoVM { get; set; } = new AscensoViewModel();

    private async void HandleChange()
    {
        Bombero bombero = Context.Bomberos.Where(b => b.NumeroLegajo == Bombero).SingleOrDefault();
        if (bombero != null)
        {
            AscensoVM.GradoAntiguo = bombero.Grado;
        }
    }

    // View Model

    public class AscensoViewModel
    {
        public Bombero PersonalAfectado { get; set; }
        public DateTime FechaEmision { get; set; } = DateTime.Now;
        public string Descripcion { get; set; }
        public EscalafonJerarquico GradoAntiguo { get; set; }
        public EscalafonJerarquico GradoAscenso { get; set; }
    }

    // OnFinish

    private async void OnFinish (EditContext editContext)
    {
        try
        {
            Bombero? BomberoAfectado = await Context.Bomberos.Where(b => b.NumeroLegajo == Bombero).SingleOrDefaultAsync();
            Vista.Data.Models.Salidas.Componentes.AscensoBombero ascenso = new()
                {
                    FechaEmision = AscensoVM.FechaEmision,
                    Descripcion = AscensoVM.Descripcion,
                    GradoAntiguo = AscensoVM.GradoAntiguo,
                    GradoAscenso = AscensoVM.GradoAscenso,
                    PersonalAfectado = BomberoAfectado
                };
            await BomberoService.AscenderBombero(ascenso);
            await Init();
            await OnClose.InvokeAsync();
            StateHasChanged();
            await message.Success("Bombero Ascendido");
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);

        }
    }
    private void OnFinishFailed (EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(AscensoVM)}");
    }

    // Init y Carga de datos

    public async Task CargarBomberosView()
    {
        BomberoTodos = new();
        var bomberos = await Context.Bomberos.ToListAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo
                };
            BomberoTodos.Add(bombero);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        AscensoVM = new();

        Context = DbFactory.CreateDbContext();

        await CargarBomberosView();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

}