@page "/bomberos"

@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json
@using Vista.Data.Models.Imagenes
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Mappers

@*Servicios utilizados*@
@using Vista.Services
@inject IBomberoService BomberoService
@inject IMessageService message
@inject NavigationManager navigationManager

<style>
    .abm-container {
        width: 100% !important;
        max-width: 1400px !important;
        margin: 0 auto !important;
        padding: 32px 16px !important;
    }


    .abm-main-card {
        background: rgba(255, 255, 255, 0.92) !important;
        backdrop-filter: blur(12px) !important;
        border-radius: 18px !important;
        box-shadow: 0 6px 24px rgba(130, 0, 20, 0.25), 0 4px 12px rgba(0, 0, 0, 0.08) !important;
        border: 1px solid rgba(130, 0, 20, 0.15) !important;
        overflow: hidden !important;
        margin-bottom: 32px !important;
    }

    .abm-header-section {
        background: linear-gradient(135deg, #A63333 0%, #732D2D 100%) !important;
        color: white !important;
        padding: 28px !important;
        position: relative !important;
        overflow: hidden !important;
        margin-bottom: 0 !important;
    }
    .abm-header-section::before {
        content: '';
        display: none;
    }
    .abm-header-section .lava-bubbles {
        position: absolute;
        top: 0; left: 0; width: 100%; height: 100%;
        pointer-events: none;
        z-index: 1;
        overflow: hidden;
    }
    .abm-header-section .lava-bubble {
        position: absolute;
        border-radius: 50%;
        opacity: 0.45;
        background: radial-gradient(circle at 60% 40%, #FFD54F 0%, #F9A825 80%, transparent 100%);
        animation: lava-bubble-move 8s linear infinite;
        filter: blur(1.5px);
        mix-blend-mode: lighten;
    }
    .abm-header-section .lava-bubble.b1 {
        left: 10%; width: 60px; height: 60px; bottom: -70px;
        animation-delay: 0s;
        animation-duration: 7.5s;
    }
    .abm-header-section .lava-bubble.b2 {
        left: 35%; width: 90px; height: 90px; bottom: -100px;
        animation-delay: 2s;
        animation-duration: 9s;
        background: radial-gradient(circle at 60% 40%, #FFEB3B 0%, #FFD54F 80%, transparent 100%);
    }
    .abm-header-section .lava-bubble.b3 {
        left: 65%; width: 50px; height: 50px; bottom: -60px;
        animation-delay: 1.5s;
        animation-duration: 6.5s;
        background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #FFD54F 80%, transparent 100%);
    }
    .abm-header-section .lava-bubble.b4 {
        left: 80%; width: 70px; height: 70px; bottom: -80px;
        animation-delay: 3.2s;
        animation-duration: 8.5s;
        background: radial-gradient(circle at 60% 40%, #F9A825 0%, #FFD54F 80%, transparent 100%);
    }
    .abm-header-section .lava-bubble.b5 {
        left: 55%; width: 40px; height: 40px; bottom: -50px;
        animation-delay: 5s;
        animation-duration: 7.2s;
        background: radial-gradient(circle at 60% 40%, #FFFDE7 0%, #F9A825 80%, transparent 100%);
    }

    @@keyframes lava-bubble-move {
        0% {
            transform: translateY(0) scale(1) rotate(0deg);
            opacity: 0.45;
        }
        60% {
            opacity: 0.7;
            filter: blur(2.5px);
        }
        80% {
            transform: translateY(-220px) scale(1.15) rotate(10deg);
            opacity: 0.6;
        }
        100% {
            transform: translateY(-320px) scale(0.95) rotate(-8deg);
            opacity: 0;
        }
    }

    .abm-header-section .main-title {
        font-family: 'Poppins', 'Fjalla One', sans-serif !important;
        font-size: 2.2rem !important;
        font-weight: 700 !important;
        letter-spacing: 1px !important;
        margin: 0 !important;
        display: flex !important;
        align-items: center !important;
        gap: 12px !important;
        animation: text-glow 2.5s ease-in-out infinite alternate !important;
        position: relative !important;
        z-index: 2 !important;
    }
    .abm-header-section .title-icon {
        color: #FFD54F !important;
        font-size: 2rem !important;
        filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.25)) !important;
    }
    @@keyframes text-glow {
        0%, 100% { text-shadow: 0 0 5px #F9A825, 0 0 10px #FFD54F; }
        50% { text-shadow: 0 0 12px #F9A825, 0 0 22px #FFD54F; }
    }
    .abm-header-section .title-container {
        position: relative !important;
        z-index: 2 !important;
        margin-bottom: 20px !important;
    }

    .abm-filters {
        display: grid !important;
        grid-template-columns: 2fr 2fr auto !important;
        align-items: center !important;
        gap: 16px !important;
        margin-bottom: 16px !important;
    }

        .abm-filters .ant-select,
        .abm-filters .ant-input {
            font-size: 16px !important;
            width: 100% !important;
            height: 40px !important;
        }

        .abm-select-estado .ant-select-selector {
    width: 100% !important;
    height: 40px !important;
}   

        .abm-filters .ant-input-search {
            display: flex !important;
        }

        .abm-filters button {
            height: 40px !important;
            font-size: 16px !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            gap: 6px !important;
        }

    .ant-table {
        overflow: hidden !important;
        font-size: 16px !important;
        background-color: #ffffff !important;
    }

    .ant-table-thead .ant-table-cell {
        background-color: #A63333 !important;
        color: #fff !important;
        font-weight: bold !important;
        padding: 16px !important;
        border: none !important;
    }

    .ant-table-cell {
        padding: 18px !important;
        border-bottom: 1px solid #f0f0f0 !important;
    }

    .abm-action-buttons {
        display: flex !important;
        justify-content: center !important;
        flex-wrap: wrap !important;
        gap: 8px !important;
    }

        .abm-action-buttons .ant-btn {
            min-width: 110px !important;
            height: 38px !important;
            font-size: 15px !important;
            display: inline-flex !important;
            align-items: center !important;
            justify-content: center !important;
            gap: 6px !important;
            line-height: 1.2 !important;
            padding: 0 12px !important;
        }

    .ant-btn-dangerous {
        color: #a63333 !important;
        border-color: #a63333 !important;
    }

        .ant-btn-dangerous:hover {
            background-color: #a63333 !important;
            color: white !important;
        }

    .ant-pagination {
        justify-content: center !important;
        margin-top: 24px !important;
    }

    .ant-pagination-item {
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
    }

    .ant-pagination-prev,
    .ant-pagination-next {
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
    }

    @@media (max-width: 768px) {
        .abm-title {
            font-size: 22px !important;
        }

        .ant-table {
            font-size: 15px !important;
        }

        .abm-action-buttons {
            flex-direction: column !important;
            align-items: stretch !important;
        }

        .abm-filters {
            grid-template-columns: 1fr !important;
        }

        .abm-action-buttons .ant-btn {
            width: 100% !important;
        }


    }

            .abm-title h2 {
    font-family: 'Bebas Neue', 'Fjalla One', sans-serif;
    font-size: 2.5rem;
    letter-spacing: 2px;

    color: #ffffff;
    position: relative;
    margin-right: 950px;
    padding-bottom: 6px;
        }


    .add-button {
        background: linear-gradient(135deg, #4CAF50 0%, #438E46 100%) !important;
        border: none !important;
        color: white !important;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3) !important;
        padding: 0 20px !important;
        font-weight: 600 !important;
        border-radius: 8px !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }
    .add-button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4) !important;
    }


    .abm-select-estado {
        width: 100% !important;
        min-width: 0 !important;
        box-sizing: border-box !important;
        height: 40px !important;
        font-size: 14px !important;

        display: block !important;
    }

</style>

<Flex Class="flex-container" Justify="FlexJustify.Center" Align="FlexAlign.Center">
    <div class="abm-container">
        <Card Class="abm-main-card">
            <div class="abm-header-section">
                <div class="lava-bubbles">
                    <div class="lava-bubble b1"></div>
                    <div class="lava-bubble b2"></div>
                    <div class="lava-bubble b3"></div>
                    <div class="lava-bubble b4"></div>
                    <div class="lava-bubble b5"></div>
                </div>
                <div class="title-container">
                    <h1 class="main-title">
                        <Icon Type="fire" Class="title-icon" />
                        GESTIÃ“N DE BOMBEROS
                    </h1>
                </div>
                <div class="abm-filters">
                    <EnumSelect DefaultValue="EstadoBombero.CuerpoActivo"
                                ValueChanged="(EstadoBombero estado) => search(searchString, estado)"
                                TEnum="EstadoBombero"
                                Class="abm-select-estado" />
                    <Search Placeholder="Buscar Bombero"
                            @bind-Value="@searchString"
                            OnSearch="()=>search(searchString, Estado)"
                            BindOnInput />
                    <Button Type="ButtonType.Primary"
                            Class="add-button"
                            OnClick="@(() => navigationManager.NavigateTo("/bomberos/agregar"))">
                        <Icon Type="plus" /> Agregar Bombero
                    </Button>
                </div>
            </div>

            <Table @ref="table"
                   TItem="BomberoViweModel"
                   DataSource="@bomberos"
                   OnChange="OnChange"
                   @bind-PageIndex="_pageIndex"
                   @bind-PageSize="_pageSize"
                   Responsive>
                <ColumnDefinitions>
                    <Column TData="Bombero" Title="Foto" Width="100">
                        @if (context.UrlImagen != null)
                        {
                            <Avatar Size="AvatarSize.Large" Src="@(context.UrlImagen)" />
                        }
                        else
                        {
                            <Avatar Size="AvatarSize.Large" Icon="user" />
                        }
                    </Column>
                    <PropertyColumn Property="@(c => $"{c.Apellido}, {c.Nombre}")" Title="Apellido y Nombre" Sortable />
                    <PropertyColumn Title="Legajo" Property="c => c.NumeroLegajo" Sortable />
                    <PropertyColumn Title="JerarquÃ­a" Property="@(c => c.Grado.GetDisplayName())" Sortable />
                    <PropertyColumn Title="Estado" Property="@(c => c.Estado.GetDisplayName())" Sortable />
                    <ActionColumn Title="Acciones" Align=ColumnAlign.Center>
                        <div class="abm-action-buttons">
                            <Button Type="ButtonType.Primary" OnClick="() => DetalleBombero(context.Id)">
                                <Icon Type="eye" /> Detalles
                            </Button>
                            <Button Type="default" OnClick="() => EditarBombero(context.Id)">
                                <Icon Type="edit" /> Editar
                            </Button>
                            @if (context.Estado != EstadoBombero.Baja)
                            {
                                <Popconfirm Title="Â¿EstÃ¡ seguro de dar de baja?"
                                            OnConfirm="()=>CambiarEstado(context.Id, EstadoBombero.Baja)"
                                            OkText="SÃ­" CancelText="No">
                                    <Button Danger>
                                        <Icon Type="down" /> Baja
                                    </Button>
                                </Popconfirm>
                            }
                            else
                            {
                                <Popconfirm Title="Â¿EstÃ¡ seguro de dar de alta?"
                                            OnConfirm="()=>CambiarEstado(context.Id, EstadoBombero.CuerpoActivo)"
                                            OkText="SÃ­" CancelText="No">
                                    <Button Color="Color.Green2">
                                        <Icon Type="up" /> Alta
                                    </Button>
                                </Popconfirm>
                            }
                        </div>
                    </ActionColumn>
                </ColumnDefinitions>
            </Table>
        </Card>
    </div>
</Flex>

@{
    RenderFragment footer = @<Template>
        <Button OnClick="@CloseModals" @key="@("back")">Cerrar</Button>
    </Template>;
}

@if (EditarVisible == true)
{
    <Modal Footer="null" OnCancel="CloseModals" Visible="@EditarVisible" Centered="@true" DefaultMaximized="@true">
        <BomberosEditar BomberoId="@BomberoId" OnClose="CloseModals" />
    </Modal>
}
@if (DetallesVisible == true)
{
    <Modal Visible="@DetallesVisible" OnCancel="@CloseModals" Footer="@footer" Centered="@true" DefaultMaximized="@true">
        <BomberosDetalles BomberoId="@BomberoId" />
    </Modal>
}

@code {
    string searchString;
    ITable table;
    List<BomberoViweModel>? bomberos = new();
    List<BomberoViweModel>? SinFiltrar = new();
    public EstadoBombero Estado = EstadoBombero.CuerpoActivo;

    private TableFilter<EscalafonJerarquico>[] EscalafonJerarquicoFilter;

    int _pageIndex = 1;
    int _pageSize = 6;

    // Funciones modal
    public int BomberoId { get; set; }
    public bool EditarVisible { get; set; }
    public bool DetallesVisible { get; set; }

    private async Task CambiarEstado(int BomberoId, EstadoBombero estado)
    {
        var bombero = await BomberoService.ObtenerBomberoPorIdAsync(BomberoId);
        bombero.Estado = estado;
        await BomberoService.CambiarEstado(bombero);
        await RefreshData();
    }

    private void EditarBombero(int ID)
    {
        BomberoId = ID;
        EditarVisible = true;
    }

    private void DetalleBombero(int ID)
    {
        BomberoId = ID;
        DetallesVisible = true;
    }

    private async void CloseModals()
    {
        DetallesVisible = false;
        EditarVisible = false;
        await RefreshData();
    }

    // Init, OnChange y Carga de datos
    protected override async Task OnInitializedAsync()
    {
        var bomberos = await BomberoService.ObtenerTodosLosBomberosAsync(ConImagenes: true);
        SinFiltrar = bomberos.ToBomberoViewModelList();

        search(searchString, Estado);

        EscalafonJerarquicoFilter = new TableFilter<EscalafonJerarquico>[Enum.GetValues(typeof(EscalafonJerarquico)).Length];
        int i = 0;
        foreach (EscalafonJerarquico value in Enum.GetValues(typeof(EscalafonJerarquico)))
        {
            EscalafonJerarquicoFilter[i] = new() { Text = Enum.GetName(typeof(EscalafonJerarquico), value), Value = value };
            i++;
        }

        StateHasChanged();
    }

    private async Task RefreshData()
    {
        var bomberos = await BomberoService.ObtenerTodosLosBomberosAsync();
        SinFiltrar = bomberos.ToBomberoViewModelList();

        search(searchString, Estado);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnChange(QueryModel<BomberoViweModel> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
        await OnInitializedAsync();
    }

    private void search(string value, EstadoBombero estado)
    {
        int number;

        Estado = estado;

        bomberos = SinFiltrar.Where(d => d.Estado == Estado).ToList();

        if (string.IsNullOrEmpty(value))
        {
            StateHasChanged();
            return;
        }

        bomberos = bomberos.Where(d =>
        d.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) ||
        Enum.GetName(typeof(EscalafonJerarquico), d.Grado).Contains(value, StringComparison.OrdinalIgnoreCase) ||
        d.Apellido.Contains(value, StringComparison.OrdinalIgnoreCase))
        .ToList();
        if (int.TryParse(value, out number))
        {
            bomberos = bomberos.Where(d =>
            d.NumeroLegajo.Equals(number)).ToList();
        }
        StateHasChanged();
    }
}