@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IJSRuntime JSRuntime
@using Vista.Services
@inject IBomberoService BomberoService;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@page "/bomberos/agregar"
<style>
    /* tile uploaded pictures */
    .upload-list-inline .ant-upload-list-item {
        float: left;
        width: 200px;
        margin-right: 8px;
    }

    .upload-list-inline [class*='-upload-list-rtl'] .ant-upload-list-item {
        float: right;
    }

    .upload-list-inline .ant-upload-animate-enter {
        animation-name: uploadAnimateInlineIn;
    }

    .upload-list-inline .ant-upload-animate-leave {
        animation-name: uploadAnimateInlineOut;
    }

    #crear-bombero {
        background-color: #C43A3A;
        color: white;
        font-size: 20px;
        font-family: calibri light;
        border: 0px;
        border-radius: 8px;
    }

    #blancoA {
        width: 100%;
        padding: 15px;
    }

    #estilo {
        border: 1px;
        border-radius: 8px;
        background-color: #AFAFAF;
    }

    #texto {
        font-size: 20px;
        font-family: calibri light;
        Font-Weight: bold;
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

</style>

<Form Model="@bomberoView"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">

    <FormItem Label="Foto">
        <InputFile OnChange="SubirFoto"/>
    </FormItem>

    <FormItem Label="Nombre">
        <Input @bind-Value="@bomberoView.Nombre" />
    </FormItem>
    <FormItem Label="Apellido">
        <Input @bind-Value="@bomberoView.Apellido" />
    </FormItem>

    <FormItem Label="Fecha de Nacimiento">
        <DatePicker @bind-Value="@bomberoView.FechaNacimiento" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
    </FormItem>

    <FormItem Label="DNI">
        <Input @bind-Value="@bomberoView.Documento" />
    </FormItem>
    <FormItem Label="Direccion">
        <Input @bind-Value="@bomberoView.Direccion" />
    </FormItem>
    <FormItem Label="Dotaciones">
        <EnumSelect TEnum="TipoDotaciones" @bind-Value="@bomberoView.Dotacion" />
    </FormItem>

    <FormItem Label="Numero Legajo">
        <AntDesign.InputNumber @bind-Value="@bomberoView.NumeroLegajo" />
    </FormItem>

    <FormItem Label="Fecha de Aceptacion">
        <DatePicker @bind-Value="@bomberoView.FechaAceptacion" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
    </FormItem>

    <FormItem Label="Numero IOMA">
        <Input @bind-Value="@bomberoView.NumeroIoma" />
    </FormItem>

    <FormItem Label="Lugar de nacimiento">
        <Input @bind-Value="@bomberoView.LugarNacimiento" />
    </FormItem>

    <FormItem Label="Grupo Sanguineo">
        <EnumSelect TEnum="TipoGrupoSanguineo" @bind-Value="@bomberoView.GrupoSanguineo" />
    </FormItem>

    <FormItem Label="Altura (cm)">
        <AntDesign.InputNumber @bind-Value="@bomberoView.Altura" />
    </FormItem>

    <FormItem Label="Peso">
        <AntDesign.InputNumber @bind-Value="@bomberoView.Peso" />
    </FormItem>

    <FormItem Label="Observaciones">
        <Input @bind-Value="@bomberoView.Observaciones" />
    </FormItem>

    <FormItem Label="Nivel de estuduio">
        <Input @bind-Value="@bomberoView.NivelEstudios" />
    </FormItem>

    <FormItem Label="Profesion">
        <Input @bind-Value="@bomberoView.Profesion" />
    </FormItem>

    <FormItem Label="Resolucion 1">
        <Input @bind-Value="@bomberoView.Resolucion1" />
    </FormItem>
    <FormItem Label="Resolucion 2">
        <Input @bind-Value="@bomberoView.Resolucion2" />
    </FormItem>
    <FormItem Label="Resolucion 3">
        <Input @bind-Value="@bomberoView.Resolucion3" />
    </FormItem>
    <FormItem Label="Resolucion 4">
        <Input @bind-Value="@bomberoView.Resolucion4" />
    </FormItem>
    <FormItem Label="Resolucion 5">
        <Input @bind-Value="@bomberoView.Resolucion5" />
    </FormItem>
    <FormItem Label="Resolucion 6">
        <Input @bind-Value="@bomberoView.Resolucion6" />
    </FormItem>

    <FormItem Label="Es chofer">
        <Checkbox @bind-Checked="@bomberoView.Chofer">
        </Checkbox>
        @if (bomberoView.Chofer)
        {
            <label id="texto">Fecha vencimiento del carnet</label>
            <br>
            <DatePicker @bind-Value="@bomberoView.VencimientoRegistro" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
        }
        @if (!bomberoView.Chofer)
        {
            <label id="texto">No es chofer</label>
        }
    </FormItem>

    <FormItem Label="Grado">
        <EnumSelect TEnum="EscalafonJerarquico" @bind-Value="@bomberoView.Grado" />
    </FormItem>


    <FormItem Label="Estado">
        <EnumSelect TEnum="EstadoBombero" @bind-Value="@bomberoView.Estado" />
    </FormItem>

    <FormItem Label="Sexo">
        <EnumSelect TEnum="TipoSexo" @bind-Value="@bomberoView.Sexo" />
    </FormItem>


    @*Carga Contacto-----------------------------------------------------------------------*@
    <FormItem Label="Telefono Laboral">
        <Input @bind-Value="@bomberoView.TelefonoLaboral" />
    </FormItem>

    <FormItem Label="Telefono Celular">
        <Input @bind-Value="@bomberoView.TelefonoCel" />
    </FormItem>

    <FormItem Label="Telefono Fijo">
        <Input @bind-Value="@bomberoView.TelefonoFijo" />
    </FormItem>

    <FormItem Label="Email">
        <Input @bind-Value="@bomberoView.Email" />
    </FormItem>
    @*Carga Brigada-----------------------------------------------------------------------*@
    <FormItem Label="Nombre Brigada">
        <Select TItem="Brigada"
                TItemValue="int"
                DataSource="@brigadas"
                @bind-Value="@bomberoView.BrigadaId"
                Placeholder="Elegir Brigada"
                LabelName="@nameof(Brigada.Nombre)"
                ValueName="@nameof(Brigada.BrigadaId)"
                OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </Select>
    </FormItem>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Class="boton_p" HtmlType="submit" OnClick="CrearBombero">
            Agregar Bombero
        </Button>
    </FormItem>
</Form>




@code {
    [Parameter]
    public int? BomberoId { get; set; }

    private class BomberosViewModel
    {
        public DateTime FechaNacimiento { get; set; }
        public DateTime FechaAceptacion { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public EstadoBombero Estado { get; set; }
        public int NumeroLegajo { get; set; }
        public EscalafonJerarquico Grado { get; set; }
        public TipoDotaciones Dotacion { get; set; }
        public TipoGrupoSanguineo GrupoSanguineo { get; set; }
        [Required]
        public int Altura { get; set; }
        [Required]
        public int Peso { get; set; }
        public Brigada Brigada { get; set; }
        public bool Chofer { get; set; }
        public DateTime? VencimientoRegistro { get; set; }
        public TipoSexo Sexo { get; set; }
        [Required, StringLength(255)]
        public string Direccion { get; set; }
        [Required, StringLength(255)]
        public string LugarNacimiento { get; set; }
        [Required, StringLength(255)]
        public string Documento { get; set; }
        [Required, StringLength(255)]
        public string Observaciones { get; set; }
        [Required, StringLength(255)]
        public string Profesion { get; set; }
        [Required, StringLength(255)]
        public string NivelEstudios { get; set; }
        [Required, StringLength(255)]
        public string NumeroIoma { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion1 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion2 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion3 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion4 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion5 { get; set; }
        [Required, StringLength(255)]
        public string? Resolucion6 { get; set; }
        //Contacto-------------------------------
        [Required, StringLength(255)]
        public string? TelefonoCel { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoLaboral { get; set; }
        [Required, StringLength(255)]
        public string? TelefonoFijo { get; set; }
        [Required, StringLength(255)]
        public string? Email { get; set; }
        //Imagen-------------------------------
        public string Base64 { get; set; }
        [Required, StringLength(255)]
        public string TipoImagen { get; set; }
        [Required, StringLength(255)]
        public string NombreImagen { get; set; }
        //Brigada-------------------------------
        public int BrigadaId { get; set; }
    }

    BomberosViewModel bomberoView { get; set; } = new();
    public Bombero[]? bomberos;
    public Brigada[]? brigadas;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();
        brigadas = await db.Brigadas.ToArrayAsync();
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        bomberoView.Base64 = imagenBase64;
        bomberoView.TipoImagen = e.File.ContentType;
        bomberoView.NombreImagen = e.File.Name;
    }

    private async Task AgregarFotoPorDefecto(string rutaArchivo)
    {
        using var fileStream = File.OpenRead(rutaArchivo);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        string imagenBase64 = Convert.ToBase64String(memoryStream.ToArray());
        string tipoImagen = "image/png"; // Asumiendo que es un archivo PNG
        string nombreImagen = Path.GetFileName(rutaArchivo);

        bomberoView.Base64 = imagenBase64;
        bomberoView.TipoImagen = tipoImagen;
        bomberoView.NombreImagen = nombreImagen;
    }

    public async Task CrearBombero()
    {
        try
        {

            if (string.IsNullOrEmpty(bomberoView.Base64))
            {
                await AgregarFotoPorDefecto("wwwroot/imagenes/FotoPorDefecto.png");
            }

        Bombero bombero = new Bombero()
        {
            FechaNacimiento = bomberoView.FechaNacimiento,
            Sexo = bomberoView.Sexo,
            Nombre = bomberoView.Nombre,
            Apellido = bomberoView.Apellido,
            Documento = bomberoView.Documento,
            NumeroLegajo = bomberoView.NumeroLegajo,
            NumeroIoma = bomberoView.NumeroIoma,
            LugarNacimiento = bomberoView.LugarNacimiento,
            Grado = bomberoView.Grado,
            Imagen = new()
            {
                NombreImagen = bomberoView.NombreImagen,
                TipoImagen = bomberoView.TipoImagen,
                Base64Imagen = bomberoView.Base64
            },
            Dotacion = bomberoView.Dotacion,
            Resolucion1 = bomberoView.Resolucion1,
            Resolucion2 = bomberoView.Resolucion2,
            Resolucion3 = bomberoView.Resolucion3,
            Resolucion4 = bomberoView.Resolucion4,
            Resolucion5 = bomberoView.Resolucion5,
            Resolucion6 = bomberoView.Resolucion6,
            GrupoSanguineo = bomberoView.GrupoSanguineo,
            BrigadaId = bomberoView.Brigada != null ? bomberoView.BrigadaId : null,
            Altura = bomberoView.Altura,
            Peso = bomberoView.Peso,
            Estado = bomberoView.Estado,
            Chofer = bomberoView.Chofer,
            VencimientoRegistro = bomberoView.VencimientoRegistro,
            Direccion = bomberoView.Direccion,
            Observaciones = bomberoView.Observaciones,
            Profesion = bomberoView.Profesion,
            NivelEstudios = bomberoView.NivelEstudios,
            FechaAceptacion = bomberoView.FechaAceptacion,
            Contacto = new Contacto
            {
                TelefonoCel = bomberoView.TelefonoCel,
                TelefonoFijo = bomberoView.TelefonoFijo,
                TelefonoLaboral = bomberoView.TelefonoLaboral,
                Email = bomberoView.Email
            }
        };
        await BomberoService.CrearBombero(bombero);
        bomberoView = new BomberosViewModel();
        StateHasChanged();
        navigationManager.NavigateTo($"/bomberos/agregar", true);
    }
    catch (Exception ex)
    {
        // Manejo de excepciones (puedes mostrar un mensaje al usuario o registrar el error)
        Console.WriteLine($"Error: {ex.Message}");
    }
}


    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(bomberoView)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(bomberoView)}");
    }

    private void OnSelectedItemChangedHandler(Brigada value)
    {
        Console.WriteLine($"selected: ${value?.Nombre}");
    }
}