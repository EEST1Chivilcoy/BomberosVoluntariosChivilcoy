@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IJSRuntime JSRuntime
@using Vista.Services
@inject IBomberoService BomberoService;
@inject IMessageService message
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@page "/bomberos/agregar"
<style>
    /* tile uploaded pictures */
    .upload-list-inline .ant-upload-list-item {
        float: left;
        width: 200px;
        margin-right: 8px;
    }

    .upload-list-inline [class*='-upload-list-rtl'] .ant-upload-list-item {
        float: right;
    }

    .upload-list-inline .ant-upload-animate-enter {
        animation-name: uploadAnimateInlineIn;
    }

    .upload-list-inline .ant-upload-animate-leave {
        animation-name: uploadAnimateInlineOut;
    }

    #crear-bombero {
        background-color: #C43A3A;
        color: white;
        font-size: 20px;
        font-family: calibri light;
        border: 0px;
        border-radius: 8px;
    }

    #blancoA {
        width: 100%;
        padding: 15px;
    }

    #estilo {
        border: 1px;
        border-radius: 8px;
        background-color: #FFFFFF;
    }

    #texto {
        font-size: 20px;
        font-family: calibri light;
        font-weight: bold;
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    #textoLabel {
        color: black;
    }

    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f3f3f3;
    }

    .form-container {
        max-width: 900px; /* Reducir el ancho del contenedor */
        margin: auto;
        max-height: 1600px;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.2);
        border: 1px solid red !important;
        border-top-color: red;
        border-right-color: red;
        border-bottom-color: red;
        border-left-color: red;
    }

    .form-title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px !important;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
    }

    .custom-label .ant-form-item-label > label {
        color: #FFFFFF;
        padding: 2px 4px;
        margin-right: 267.2px;
    }

    .ant-form-item-label {
        background-color: #A63333;
    }

    .ant-form-item {
        box-sizing: border-box;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        font-variant: tabular-nums;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        margin-bottom: -4px !important;
    }

    .ant-select:not(.ant-select-customize-input) .ant-select-selector {
        position: relative;
        background-color: #fff;
        border: 1px solid !important;
        border-radius: 2px;
        transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
        border-color: red;
    }

    a, area, button, [role="button"], input:not([type="range"]), label, select, summary, textarea {
        touch-action: manipulation;
        border-color: red !important;
    }

    .ant-picker {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        font-variant: tabular-nums;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        padding: 4px 11px 4px;
        position: relative;
        display: inline-flex;
        align-items: center;
        background: #fff;
        border: 1px solid !important;
        border-radius: 2px;
        transition: border 0.3s, box-shadow 0.3s;
        border-color: red !important;
    }

    .ant-layout, .ant-layout * {
        box-sizing: border-box;
        border-color: red !important;
    }

    .ant-input-number-input {
        width: 100%;
        height: 30px;
        padding: 0 11px;
        text-align: left;
        background-color: transparent;
        border: 1px solid !important;
        border-radius: 2px;
        outline: 0;
        transition: all 0.3s linear;
        appearance: textfield !important;
        border-color: red !important;
    }

    .ant-select:not(.ant-select-customize-input) .ant-select-selector {
        position: relative;
        background-color: #fff;
        border: 1px solid red !important;
        border-top-width: 1px;
        border-top-style: solid;
        border-top-color: red;
        border-right-width: 1px;
        border-right-style: solid;
        border-right-color: red;
        border-bottom-width: 1px;
        border-bottom-style: solid;
        border-bottom-color: red;
        border-left-width: 1px;
        border-left-style: solid;
        border-left-color: red;
        border-image-outset: 0;
        border-image-repeat: stretch;
        border-image-slice: 100%;
        border-image-source: none;
        border-image-width: 1;
        border-radius: 2px;
        transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
    }
    /* SWITCH */
    [type="button"]:not(:disabled), [type="reset"]:not(:disabled), [type="submit"]:not(:disabled), button:not(:disabled) {
        cursor: pointer;
        margin-left: 4px !important;
    }

    /* SWITCH */
</style>

<div class="container">
    <div class="form-container">
        <div class="form-title">
            <Form Model="@bomberoView"
                  LabelColSpan="8"
                  WrapperColSpan="16"
                  OnFinish="OnFinish"
                  OnFinishFailed="OnFinishFailed">
                <div class="form-grid">
                    <FormItem Label="Foto" class="custom-label">
                        <InputFile OnChange="SubirFoto" />
                    </FormItem>
                    <FormItem Label="Nombre" class="custom-label">
                        <Input @bind-Value="@bomberoView.Nombre" />
                    </FormItem>
                    <FormItem Label="Apellido" Class="custom-label">
                        <Input @bind-Value="@bomberoView.Apellido" />
                    </FormItem>
                    <FormItem Label="Fecha de Nacimiento" Class="custom-label">
                        <DatePicker @bind-Value="@bomberoView.FechaNacimiento" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
                    </FormItem>
                    <FormItem Label="DNI" Class="custom-label">
                        <Input @bind-Value="@bomberoView.Documento" />
                    </FormItem>
                    <FormItem Label="Direccion" Class="custom-label">
                        <Input @bind-Value="@bomberoView.Direccion" />
                    </FormItem>
                    <FormItem Label="Dotaciones" Class="custom-label">
                        <EnumSelect TEnum="TipoDotaciones" @bind-Value="@bomberoView.Dotacion" />
                    </FormItem>
                    <FormItem Label="Numero Legajo" Class="custom-label">
                        <Input @bind-Value="@bomberoView.NumeroLegajo" />
                    </FormItem>
                    <FormItem Label="Fecha de Aceptacion" Class="custom-label">
                        <DatePicker @bind-Value="@bomberoView.FechaAceptacion" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
                    </FormItem>
                    <FormItem Label="Numero IOMA" Class="custom-label">
                        <Input @bind-Value="@bomberoView.NumeroIoma" />
                    </FormItem>
                    <FormItem Label="Lugar de nacimiento" Class="custom-label">
                        <Input @bind-Value="@bomberoView.LugarNacimiento" />
                    </FormItem>
                    <FormItem Label="Grupo Sanguineo" Class="custom-label">
                        <EnumSelect TEnum="TipoGrupoSanguineo" @bind-Value="@bomberoView.GrupoSanguineo" AllowClear />
                    </FormItem>
                    <FormItem Label="Altura (cm)" Class="custom-label">
                        <AntDesign.InputNumber @bind-Value="@bomberoView.Altura" />
                    </FormItem>
                    <FormItem Label="Peso" Class="custom-label">
                        <AntDesign.InputNumber @bind-Value="@bomberoView.Peso" />
                    </FormItem>
                    <FormItem Label="Observaciones" Class="custom-label">
                        <Input @bind-Value="@bomberoView.Observaciones" />
                    </FormItem>
                    <FormItem Label="Nivel de estuduio" Class="custom-label">
                        <Input @bind-Value="@bomberoView.NivelEstudios" />
                    </FormItem>
                    <FormItem Label="Profesion" Class="custom-label">
                        <Input @bind-Value="@bomberoView.Profesion" />
                    </FormItem>
                    <FormItem Label="Es chofer" Class="custom-label">
                        <Switch @bind-Checked="@bomberoView.Chofer" />
                        @if (bomberoView.Chofer)
                        {
                            <label id="texto">Fecha vencimiento del carnet</label>
                            <br>
                            <DatePicker @bind-Value="@bomberoView.VencimientoRegistro" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
                        }
                        @if (!bomberoView.Chofer)
                        {
                            <label id="texto"></label>
                        }
                    </FormItem>
                    <FormItem Label="Grado" Class="custom-label">
                        <EnumSelect TEnum="EscalafonJerarquico" @bind-Value="@bomberoView.Grado" AllowClear />
                    </FormItem>
                    <FormItem Label="Estado" Class="custom-label">
                        <EnumSelect TEnum="EstadoBombero" @bind-Value="@bomberoView.Estado" AllowClear />
                    </FormItem>
                    <FormItem Label="Sexo" Class="custom-label">
                        <EnumSelect TEnum="TipoSexo" @bind-Value="@bomberoView.Sexo" />
                    </FormItem>
                    @*Carga Contacto-----------------------------------------------------------------------*@
                    <FormItem Label="Telefono Laboral" Class="custom-label">
                        <Input @bind-Value="@bomberoView.TelefonoLaboral" />
                    </FormItem>
                    <FormItem Label="Telefono Celular" Class="custom-label">
                        <Input @bind-Value="@bomberoView.TelefonoCel" />
                    </FormItem>
                    <FormItem Label="Telefono Fijo" Class="custom-label">
                        <Input @bind-Value="@bomberoView.TelefonoFijo" />
                    </FormItem>
                    <FormItem Label="Email" Class="custom-label">
                        <Input @bind-Value="@bomberoView.Email" />
                    </FormItem>
                    @*Carga Brigada-----------------------------------------------------------------------*@
                    <FormItem Label="Nombre Brigada" Class="custom-label">
                        <Select TItem="Brigada"
                                TItemValue="int"
                                DataSource="@brigadas"
                                @bind-Value="@bomberoView.BrigadaId"
                                Placeholder="Elegir Brigada"
                                LabelName="@nameof(Brigada.Nombre)"
                                ValueName="@nameof(Brigada.BrigadaId)"
                                OnSelectedItemChanged="OnSelectedItemChangedHandler">
                        </Select>
                    </FormItem>
                    <FormItem WrapperColOffset="20" WrapperColSpan="16">
                        <Button Class="boton_p" HtmlType="submit" OnClick="CrearBombero">
                            Agregar Numerario
                        </Button>
                    </FormItem>
                    <FormItem WrapperColOffset="18" WrapperColSpan="16">
                        <a @onclick="@(() => { navigationManager.NavigateTo("/Bomberos"); })" style="border-radius: 10px;">
                            <Button Class="boton_p">
                                Volver
                            </Button>
                        </a>
                    </FormItem>
                </div>
            </Form>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public int? BomberoId { get; set; }

    private class BomberosViewModel
    {
        public DateTime? FechaNacimiento { get; set; }
        public DateTime? FechaAceptacion { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public EstadoBombero Estado { get; set; }
        [Required]
        public int NumeroLegajo { get; set; }
        public EscalafonJerarquico Grado { get; set; }
        public TipoDotaciones Dotacion { get; set; }
        public TipoGrupoSanguineo GrupoSanguineo { get; set; }
        public int? Altura { get; set; }
        public int? Peso { get; set; }
        public Brigada? Brigada { get; set; }
        public bool Chofer { get; set; }
        public DateTime? VencimientoRegistro { get; set; }
        public TipoSexo Sexo { get; set; }
        [StringLength(255)]
        public string? Direccion { get; set; }
        [StringLength(255)]
        public string? LugarNacimiento { get; set; }
        [StringLength(255)]
        public string? Documento { get; set; }
        [StringLength(255)]
        public string? Observaciones { get; set; }
        [StringLength(255)]
        public string? Profesion { get; set; }
        [StringLength(255)]
        public string? NivelEstudios { get; set; }
        [StringLength(255)]
        public string? NumeroIoma { get; set; }
        [StringLength(255)]
        //Contacto-------------------------------
        public string? TelefonoCel { get; set; }
        [StringLength(255)]
        public string? TelefonoLaboral { get; set; }
        [StringLength(255)]
        public string? TelefonoFijo { get; set; }
        [StringLength(255)]
        public string? Email { get; set; }
        //Imagen-------------------------------
        public string? Base64 { get; set; }
        [StringLength(255)]
        public string? TipoImagen { get; set; }
        [StringLength(255)]
        public string? NombreImagen { get; set; }
        //Brigada-------------------------------
        public int BrigadaId { get; set; }
    }

    BomberosViewModel bomberoView { get; set; } = new();
    public Bombero[]? bomberos;
    public Brigada[]? brigadas;
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();
        brigadas = await db.Brigadas.ToArrayAsync();
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        bomberoView.Base64 = imagenBase64;
        bomberoView.TipoImagen = e.File.ContentType;
        bomberoView.NombreImagen = e.File.Name;
    }

    private async Task AgregarFotoPorDefecto(string rutaArchivo)
    {
        using var fileStream = File.OpenRead(rutaArchivo);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        string imagenBase64 = Convert.ToBase64String(memoryStream.ToArray());
        string tipoImagen = "image/png"; // Asumiendo que es un archivo PNG
        string nombreImagen = Path.GetFileName(rutaArchivo);

        bomberoView.Base64 = imagenBase64;
        bomberoView.TipoImagen = tipoImagen;
        bomberoView.NombreImagen = nombreImagen;
    }

    public async Task CrearBombero()
    {
        try
        {
            //Validacion Numero de Legajo
            Bombero? NumeroLegajo = await DbFactory.CreateDbContext().Bomberos.Where(b => b.NumeroLegajo == bomberoView.NumeroLegajo).SingleOrDefaultAsync();
            if (NumeroLegajo != null)
            {
                message.Warning("Numero de legajo ya existente.");
                return;
            }

            if (string.IsNullOrEmpty(bomberoView.Base64))
            {
                await AgregarFotoPorDefecto("wwwroot/imagenes/FotoPorDefecto.png");
            }

            Bombero bombero = new Bombero()
                {
                    FechaNacimiento = bomberoView.FechaNacimiento,
                    Sexo = bomberoView.Sexo,
                    Nombre = bomberoView.Nombre,
                    Apellido = bomberoView.Apellido,
                    Documento = bomberoView.Documento,
                    NumeroLegajo = bomberoView.NumeroLegajo,
                    NumeroIoma = bomberoView.NumeroIoma,
                    LugarNacimiento = bomberoView.LugarNacimiento,
                    Grado = bomberoView.Grado,
                    Imagen = new()
                    {
                        NombreImagen = bomberoView.NombreImagen,
                        TipoImagen = bomberoView.TipoImagen,
                        Base64Imagen = bomberoView.Base64
                    },
                    Dotacion = bomberoView.Dotacion,
                    GrupoSanguineo = bomberoView.GrupoSanguineo,
                    BrigadaId = bomberoView.BrigadaId != 0 ? bomberoView.BrigadaId : null,
                    Altura = bomberoView.Altura,
                    Peso = bomberoView.Peso,
                    Estado = bomberoView.Estado,
                    Chofer = bomberoView.Chofer,
                    VencimientoRegistro = bomberoView.VencimientoRegistro,
                    Direccion = bomberoView.Direccion,
                    Observaciones = bomberoView.Observaciones,
                    Profesion = bomberoView.Profesion,
                    NivelEstudios = bomberoView.NivelEstudios,
                    FechaAceptacion = bomberoView.FechaAceptacion,
                    Contacto = new Contacto
                    {
                        TelefonoCel = bomberoView.TelefonoCel,
                        TelefonoFijo = bomberoView.TelefonoFijo,
                        TelefonoLaboral = bomberoView.TelefonoLaboral,
                        Email = bomberoView.Email
                    }
                };
            await BomberoService.CrearBombero(bombero);
            message.Success("Se agrego el bombero.");
            bomberoView = new BomberosViewModel();
            StateHasChanged();
            navigationManager.NavigateTo($"/bomberos", true);
        }
        catch (Exception ex)
        {
            // Manejo de excepciones (puedes mostrar un mensaje al usuario o registrar el error)
            message.Error(ex.Message);
            Console.WriteLine($"Error: {ex.Message}");
        }
    }


    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(bomberoView)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(bomberoView)}");
    }

    private void OnSelectedItemChangedHandler(Brigada value)
    {
        Console.WriteLine($"selected: ${value?.Nombre}");
    }
}