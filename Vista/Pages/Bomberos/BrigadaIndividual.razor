@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@using Vista.Data.Models.Grupos.Brigadas
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@page "/brigadas/{BrigadaId:int?}"

<h1 class="text-center">Brigada Nº @BrigadaId</h1>

<br>
<h4 class="text-decoration-underline text-center">@brigadaView.Nombre</h4>
<br>
<div class="container-fluid">
    <div class="row container">

        @if (bomberos is not null)
        {
            <div>
                <table style="margin: 0 auto;" id="tabla1">
                    <thead>
                        <tr>
                            <th>Bomberos</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Bombero b in bomberos)
                        {
                            <tr>
                                <td>
                                    <div>
                                        @b.Nombre  @b.Apellido
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

    </div>
</div>
<button @onclick="@(() => { navigationManager.NavigateTo("/brigadas"); })"> Volver </button>


@code {
    [Parameter]
    public int? BrigadaId { get; set; }

    //crea un viewModel para brigada
    public class BrigadaViewModel
    {
        public string Nombre { get; set; }
    }

    //declara los arreglos que se van a mostrar en vista y los ViewModel
    public BrigadaViewModel brigadaView { get; set; } = new();
    public Bombero[]? bomberos;



    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        // Obtener los IDs de los bomberos en la brigada
        var bomberoIds = await db.bombero_brigada
        .Where(bb => bb.BrigadaId == BrigadaId)
        .Select(bb => bb.PersonaId)
        .ToListAsync();

        // Cargar todos los bomberos basados en los IDs obtenidos
        bomberos = await db.Bomberos
            .Where(b => bomberoIds.Contains(b.NumeroLegajo))
            .ToArrayAsync();


        Brigada? b = await db.Brigadas.Where(b => b.BrigadaId == BrigadaId).SingleOrDefaultAsync();

        if (b is not null)
        {
            brigadaView.Nombre = b.NombreBrigada;
        }
        else
        {
            Console.WriteLine("Brigada no encontrada.");
        }
    }   
      
}

}
