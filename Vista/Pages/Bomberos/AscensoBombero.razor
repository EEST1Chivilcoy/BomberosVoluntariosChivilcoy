@implements IDisposable
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }
</style>

<Form Model="AscensoVM"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;">
    <FormItem Label="Personal Afectado">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@BomberoTodos"
        @bind-Value="@Bombero"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione Bombero Encargado"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    <FormItem Label="Fecha de emision">
        <DatePicker @bind-Value="AscensoVM.FechaEmision" />
    </FormItem>
    <FormItem Label="Descripción">
        <Input @bind-Value="AscensoVM.Descripcion" />
    </FormItem>
    <FormItem Label="Grado antiguo">
        @foreach (var item in BomberoTodos)
        {
            if (item.NumeroLegajo == Bombero)
            {
                AscensoVM.GradoAntiguo = item.Grado;
                break;
            }
        }
        <Input @bind-Value="AscensoVM.GradoAntiguo" Disabled />
    </FormItem>
    <FormItem Label="Grado ascenso">
        <EnumSelect TEnum="@EscalafonJerarquico" @bind-Value="@AscensoVM.GradoAscenso" />
    </FormItem>
    <FormItem Style="width: 100% !important;
            display: flex !important;
            justify-content: flex-end !important;
            align-items: flex-end !important; height:100% !important; margin-bottom: -32px;" WrapperColOffset="8" WrapperColSpan="16">
        <Button Class="boton_p" HtmlType="submit" Style="margin-right: 60px;">
            Ascender Bombero
        </Button>
    </FormItem>
</Form>

@code {
    [Parameter]
    public int? BomberoId { get; set; }

    [Parameter]
    public int? AscensoId { get; set; }

    public Bombero[]? bomberos;
    public int Bombero { get; set; }
    BomberosDbContext Context { get; set; }

    public class AscensoViewModel
    {
        public Bombero PersonalAfectado { get; set; }
        public DateTime FechaEmision { get; set; }
        public string Descripcion { get; set; }
        public EscalafonJerarquico GradoAntiguo { get; set; }
        public EscalafonJerarquico GradoAscenso { get; set; }
    }

    AscensoViewModel AscensoVM { get; set; } = new AscensoViewModel();

    protected override async Task OnInitializedAsync ()
    {
        await Init();
    }

    private async Task Init ()
    {
        AscensoVM = new();

        Context = DbFactory.CreateDbContext();

        await CargarBomberosView();
    }

    void handleChange (EscalafonJerarquico escalafon)
    {
        Console.WriteLine(escalafon);
    }
    List<BomberoViweModel> BomberoTodos = new List<BomberoViweModel>();
    public async Task CargarBomberosView ()
    {
        BomberoTodos = new();
        var bomberos = await Context.Bomberos.ToListAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    Dotacion = b.Dotacion,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                };
            BomberoTodos.Add(bombero);
        }
    }

    public async Task EstadoBombero ()
    {
        Bombero? BomberoAfectado = await Context.Bomberos.Where(b => b.NumeroLegajo == Bombero).SingleOrDefaultAsync();


        if (BomberoAfectado is not null)
        {
            BomberoAfectado.Grado = AscensoVM.GradoAscenso;
        }

       
        await Context.SaveChangesAsync();

    }

    private async void OnFinish (EditContext editContext)
    {
        try
        {
            Bombero? BomberoAfectado = await Context.Bomberos.Where(b => b.NumeroLegajo == Bombero).SingleOrDefaultAsync();


            Vista.Data.Models.Salidas.Componentes.AscensoBombero Bombasck = new()
                {

                    FechaEmision = AscensoVM.FechaEmision,
                    Descripcion = AscensoVM.Descripcion,
                    GradoAntiguo = AscensoVM.GradoAntiguo,
                    GradoAscenso = AscensoVM.GradoAscenso,
                    PersonalAfectado = BomberoAfectado
                };
            Context.AscensoBomberos.Add(Bombasck);
            await Context.SaveChangesAsync();
            await EstadoBombero();
            await Init();
            StateHasChanged();
            await message.Success("Bombero Ascendido");
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);

        }
    }
    private void OnFinishFailed (EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(AscensoVM)}");
    }

    private bool mostrarDatos = false;

    private void MostrarDatos()
    {
        mostrarDatos = true;
    }

    private void ShowModalAgregar()
    {
        mostrarDatos = true;
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

}
