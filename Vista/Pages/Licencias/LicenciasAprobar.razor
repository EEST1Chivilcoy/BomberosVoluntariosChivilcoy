@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/Licencias-Aprobar"

<style>

    .ant-table-row > td {
        color: black;
        background-color: white;
    }

    .ant-table-row:hover > td {
        background-color: white !important;

    }

    .delete
    {
        text-align:right;
    }
</style>
<div>
    <Table DataSource="LicenciasActivasVM" Bordered Responsive Size="TableSize.Small">
        <PropertyColumn Property="c=>c.NombreYApellido"></PropertyColumn>
        <PropertyColumn Property="c=>c.Desde"></PropertyColumn>
        <PropertyColumn Property="c=>c.Hasta"></PropertyColumn>
        <PropertyColumn Property="c=>c.TipoLicencia"></PropertyColumn>
        <PropertyColumn Property="c=>c.EstadoLicencia"></PropertyColumn>
        <ActionColumn Title="Acciones" Style="display:flex;justify-content:space-around;">
            <Popconfirm Title="¿Quiere aprobar esta licencia?"
                OnConfirm="()=> AprobarLicencia(context.LicenciaId)"
                OkText="Si"
                CancelText="No">
                    <i class="fa-solid fa-check" style="color: #40c011;cursor: pointer;"></i>  
            </Popconfirm>
            <Popconfirm Title="Desea Rechazar Licencia?"
                        OnConfirm="()=> EliminarLicencia(context.LicenciaId)"
                        OkText="Si"
                        CancelText="No">
                    <i class="fa-solid fa-trash" style="color: red ;cursor: pointer;"></i>
            </Popconfirm>
        </ActionColumn>
    </Table>
</div>

@code {
    public class LicencasVm
    {
        public int LicenciaId { get; set; }
        [Required]
        public TipoLicencia TipoLicencia { get; set; }
        public string Descripcion { get; set; }
        public DateTime Desde { get; set; }
        public DateTime Hasta { get; set; }
        public TipoEstadoLicencia EstadoLicencia { get; set; }
        public int PersonaId { get; set; }
        public Bombero? PersonalAfectado { get; set; }
        public string? NombreYApellido { get; set; }
    }


    BomberosDbContext Context { get; set; }
    public LicencasVm LicencasVM = new();
    List<LicencasVm> LicenciasActivasVM = new();
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        LicencasVM = new();
        Context = DbFactory.CreateDbContext();
        await LicenciasPendientes();
    }

    private async Task LicenciasPendientes()
    {
        LicenciasActivasVM = new();
        var Licencias = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Pendiente).Include(b => b.PersonalAfectado).ToListAsync();
        foreach (var l in Licencias)
        {

            LicencasVm LicVm = new()
                {
                    LicenciaId = l.LicenciaId,
                    TipoLicencia = l.TipoLicencia,
                    Descripcion = l.Descripcion,
                    Desde = l.Desde,
                    Hasta = l.Hasta,
                    EstadoLicencia = l.EstadoLicencia,
                    NombreYApellido = l.PersonalAfectado.Nombre + "," + l.PersonalAfectado.Apellido


                };
            LicenciasActivasVM.Add(LicVm);
        }
    }
    private async Task AprobarLicencia(int IdLicencia)
    {
        var LicenciaAprobar = await Context.Licencias.SingleOrDefaultAsync(l => l.LicenciaId == IdLicencia);
        if (LicenciaAprobar is not null)
        {
            LicenciaAprobar.EstadoLicencia = TipoEstadoLicencia.Aprobada;
        }
        await Context.SaveChangesAsync();

        await Init();
        StateHasChanged();
        await message.Success("Licencia Aprobada!");
    }
    public void Dispose()
    {
        Context?.Dispose();
    }

    //Elimina la licencia que esta en pendiente 
    private async Task EliminarLicencia(int IdLicencia)
    {
        var licenciaAEliminar = await Context.Licencias.FirstOrDefaultAsync(l => l.LicenciaId == IdLicencia && l.EstadoLicencia == TipoEstadoLicencia.Pendiente);
        if (licenciaAEliminar != null)
        {
            Context.Licencias.Remove(licenciaAEliminar);
            await Context.SaveChangesAsync();
            await Init();
            StateHasChanged();
            await message.Success("Licencia Rechazada!");
            StateHasChanged();
        }
    }
}