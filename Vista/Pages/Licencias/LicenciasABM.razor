@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Mappers;

@*Servicios utilizados*@

@using Vista.Services;
@inject ILicenciaService LicenciaService
@inject IMessageService MessageService
@inject IBomberoService BomberoService

@page "/licencias"

<link rel="stylesheet" href="css/Licencias.css" />

<div class="template">
    <Table DataSource="LicenciasVM"
           PageSize="20"
           Responsive
           TItem="LicenciaViewModel"
           RowClassName="@(c => c.Data.EstadoLicencia.ToString())">

        <TitleTemplate>
            <div style="background-color: #A63333; color: white; padding: 16px; border-radius: 8px;">
                <div class="filters-container">
                    <div class="date-filter-container">
                        <div class="filter-group">
                            <label class="filter-label">Desde:</label>
                            <DatePicker TValue="DateTime"
                                        DefaultValue="@DateTime.Now.AddDays(-14)"
                                        @bind-Value="@FechaBuscarI"
                                        Size="InputSize.Large"
                                        Style="min-width: 150px;" />
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Hasta:</label>
                            <DatePicker TValue="DateTime"
                                        DefaultValue="@DateTime.Now"
                                        @bind-Value="@FechaBuscarF"
                                        Size="InputSize.Large"
                                        Style="min-width: 150px;" />
                        </div>
                        <Button Type="ButtonType.Primary"
                                Icon="search"
                                Size="ButtonSize.Large"
                                Style="margin-bottom: 0;">
                            Filtrar
                        </Button>
                    </div>

                    <div class="actions-container">
                        <div class="search-container">
                            <Search Placeholder="Buscar licencias..."
                                    AllowClear
                                    EnterButton="true"
                                    Size="InputSize.Large"
                                    @bind-Value="Busqueda" />
                        </div>

                        <div style="display: flex; align-items: center;">
                            <Button Class="add-button"
                                    OnClick="@(() => _modalAñadirVisible = true)"
                                    Icon="plus">
                                Nueva Licencia
                            </Button>

                            <Dropdown Trigger="@(new Trigger[] { Trigger.Click })"
                                      Placement="Placement.BottomRight"
                                      Arrow
                                      Class="notification-badge">
                                <Overlay>
                                    <Menu Style="min-width:520px; max-width:1000px;">
                                        <LicenciasAprobar />
                                    </Menu>
                                </Overlay>
                                <ChildContent>
                                    <Badge Count="LicenciasVM_PendientesDeAprobacion.Count" Style="font-size: 14px;">
                                        <Button Shape="ButtonShape.Circle" Icon="bell" Size="ButtonSize.Large" />
                                    </Badge>
                                </ChildContent>
                            </Dropdown>
                        </div>
                    </div>
                </div>
            </div>
        </TitleTemplate>

        <ColumnDefinitions Context="licencia">
            <PropertyColumn Title="Apellido y Nombre"
                            Property="c => c.ApellidoYNombre"
                            Sortable
                            Width="250px" />

            <PropertyColumn Title="Desde"
                            Property="c => c.Desde"
                            Format="dd/MM/yyyy"
                            Sortable
                            Width="130px" />

            <PropertyColumn Title="Hasta"
                            Property="c => c.Hasta"
                            Format="dd/MM/yyyy"
                            Sortable
                            Width="130px" />

            <PropertyColumn Title="Duración"
                            Property="c => c.DuracionEnDias"
                            Sortable
                            Width="120px">
                <Template>
                    @{
                        string bgColor;
                        string textColor;

                        if (licencia.EstadoLicencia == TipoEstadoLicencia.Rechazada)
                        {
                            bgColor = "#FFEBEE";
                            textColor = "#C62828";
                        }
                        else if (licencia.EstadoLicencia == TipoEstadoLicencia.Aprobada)
                        {
                            bgColor = "#E6F7E9";
                            textColor = "#2E7D32";
                        }
                        else
                        {
                            bgColor = "#FFF8E1";
                            textColor = "#F57F17";
                        }
                    }
                    <span class="duration-badge" style="background-color:@bgColor; color:@textColor;">
                        @licencia.DuracionEnDias días
                    </span>
                </Template>
            </PropertyColumn>

            <PropertyColumn Title="Tipo"
                            Property="@(c => c.TipoLicencia.GetDisplayName())"
                            Sortable="true"
                            Width="200px" />

            <PropertyColumn Title="Estado"
                            Property="c => c.EstadoLicencia"
                            Sortable
                            Filterable
                            Width="150px">
                <Template>
                    @{
                        string statusClass = licencia.EstadoLicencia switch
                        {
                            TipoEstadoLicencia.Rechazada => "status-rejected",
                            TipoEstadoLicencia.Aprobada => "status-approved",
                            _ => "status-pending"
                        };
                    }
                    <span class="status-badge @statusClass">
                        @licencia.EstadoLicencia.ToString()
                    </span>
                </Template>
            </PropertyColumn>
        </ColumnDefinitions>
    </Table>
</div>

@*Modal para el añadir Licencia*@
<Modal @bind-Visible="_modalAñadirVisible" Title="Añadir Licencia" OkText="@("Cargar")" CancelText="@("Cancelar")" OnOk="@AddLicencia">
    <Form Model="nuevaLicencia">
        <FormItem Label="Nombre del Bombero">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@BomberosVM"
                    @bind-Value="@nuevaLicencia.NumeroLegajo"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.Id)"
                    Placeholder="Seleccione el bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </FormItem>

        <FormItem Label="Numero Legajo">
            <AntDesign.InputNumber @bind-Value="nuevaLicencia.NumeroLegajo" Disabled />
        </FormItem>

        <FormItem Label="Tipo Licencia">
            <EnumSelect TEnum="TipoLicencia?"
                        @bind-Value="@nuevaLicencia.TipoLicencia"
                        AllowClear
                        Placeholder="Seleccione el tipo de licencia" />
        </FormItem>

        @if (nuevaLicencia.TipoLicencia == TipoLicencia.RazonesDeSalud)
        {
            <FormItem Label="Adjuntar Certificado Médico">
                <InputFile />
            </FormItem>
        }

        <FormItem Label="Descripcion">
            <TextArea @bind-Value="@nuevaLicencia.Descripcion"
                      Placeholder="Ingrese una descripción"
                      Rows="4" />
        </FormItem>

        <FormItem Label="Fecha inicio">
            <DatePicker TValue="DateTime"
                        DefaultValue="DateTime.Now"
                        @bind-Value="@nuevaLicencia.Desde"
                        DisabledDate="@(date => date < DateTime.Today)"
                        Placeholder="@("Seleccione la fecha de inicio")" />
        </FormItem>

        <FormItem Label="Fecha finalizacion">
            <DatePicker TValue="DateTime"
                        DefaultValue="DateTime.Now"
                        @bind-Value="@nuevaLicencia.Hasta"
                        DisabledDate="@(date => date < nuevaLicencia.Desde)"
                        Placeholder="@("Seleccione la fecha de finalización")" />
        </FormItem>

        <FormItem Label="Duración en días">
            <Input Value="@nuevaLicencia.DuracionEnDias.ToString()" ReadOnly />
        </FormItem>
    </Form>

</Modal>

@*Modal para el Historial de la Licencia*@

@code {
    /// <summary>
    /// ViewModel para la gestión de licencias (alta, baja, modificación y listado).
    /// </summary>
    public class LicenciaViewModel
    {
        /// <summary>
        /// Tipo de licencia.
        /// </summary>
        [Required(ErrorMessage = "El tipo de licencia es obligatorio.")]
        public TipoLicencia? TipoLicencia { get; set; }

        /// <summary>
        /// Numero de legajo del bombero afectado por la licencia.
        /// </summary>
        public int NumeroLegajo { get; set; }

        /// <summary>
        /// Id del bombero afectado por la licencia.
        /// </summary>
        public int PersonaId { get; set; }

        /// <summary>
        /// Bombero afectado por la licencia.
        /// </summary>
        public BomberoViweModel? PersonalAfectado { get; set; }

        /// <summary>
        /// Apellido y nombre del bombero afectado por la licencia.
        /// </summary>
        public string? ApellidoYNombre { get; set; }

        /// <summary>
        /// Descripción de la licencia.
        /// </summary>
        public string? Descripcion { get; set; }

        /// <summary>
        /// Fecha de inicio de la licencia.
        /// Esta fecha debe ser mayor o igual a la fecha actual.
        /// Es obligatoria.
        /// </summary>
        [Required(ErrorMessage = "La fecha de inicio es obligatoria.")]
        public DateTime Desde { get; set; }

        /// <summary>
        /// Fecha de finalización de la licencia.
        /// Esta fecha debe ser mayor o igual a la fecha de inicio.
        /// Es obligatoria.
        /// </summary>
        [Required(ErrorMessage = "La fecha de fin es obligatoria.")]
        public DateTime Hasta { get; set; }

        /// <summary>
        /// Estado de la licencia. (Aprobada, Rechazada, Pendiente)
        /// La licencia se encuentra en estado pendiente hasta que se aprueba o rechaza.
        /// </summary>
        public TipoEstadoLicencia EstadoLicencia { get; set; }

        /// <summary>
        /// Duración de la licencia en días (inclusive).
        /// </summary>
        public int DuracionEnDias => (Hasta - Desde).Days + 1;

        /// <summary>
        /// Indica si las fechas cumplen con la lógica de validación.
        /// </summary>
        public bool FechasValidas => Desde >= DateTime.Today && Hasta >= Desde;
    }

    // Variables para la búsqueda de licencias
    DateTime FechaBuscarI;
    DateTime FechaBuscarF;
    string? Busqueda;

    // Lista de licencias
    List<LicenciaViewModel> LicenciasVM = new();
    List<LicenciaViewModel> LicenciasVM_SinFiltro = new();
    List<LicenciaViewModel> LicenciasVM_PendientesDeAprobacion = new();

    // Lista de bomberos para el select
    List<BomberoViweModel> BomberosVM = new();

    // Variables para el modal de añadir licencia
    private bool _modalAñadirVisible = false;
    private LicenciaViewModel nuevaLicencia = new LicenciaViewModel();

    // Funciones para el inicio de la página y la inicialización de datos
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        // Obtener todas las licencias y bomberos de la base de datos mediante los servicios
        var licencias = await LicenciaService.ObtenerTodasLasLicencias();
        var bomberos = await BomberoService.ObtenerTodosLosBomberosAsync();

        // Mapeo de licencias a ViewModel
        LicenciasVM_SinFiltro = LicenciasToViewModel(licencias).ToList();

        // Mapeo de bomberos a ViewModel
        BomberosVM = bomberos.ToBomberoViewModelList();

        // Copia de la lista de licencias sin filtro a la lista de licencias con filtro para luego aplicar filtros
        LicenciasVM = LicenciasVM_SinFiltro.ToList();
    }

    private List<LicenciaViewModel> LicenciasToViewModel(List<Licencia> licencias)
    {
        var licenciasVM = new List<LicenciaViewModel>();

        foreach (var l in licencias)
        {
            var licVm = new LicenciaViewModel
            {
                TipoLicencia = l.TipoLicencia,
                NumeroLegajo = l.BomberoAfectado?.NumeroLegajo ?? 0,
                PersonaId = l.PersonalId,
                PersonalAfectado = l.BomberoAfectado.ToBomberoViewModel(),
                ApellidoYNombre = l.BomberoAfectado != null
                    ? $"{l.BomberoAfectado.Apellido}, {l.BomberoAfectado.Nombre}"
                    : string.Empty,
                Descripcion = l.Descripcion,
                Desde = l.Desde,
                Hasta = l.Hasta,
                EstadoLicencia = l.EstadoLicencia
            };

            licenciasVM.Add(licVm);
        }

        return licenciasVM;
    }


    private async Task AddLicencia()
    {

    }
}