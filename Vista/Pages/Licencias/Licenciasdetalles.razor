@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/Licencias-Detalles"
<h5>Detalles de las Licencias</h5>
<style>

    .ant-table-row > td {
        color: white;
        background-color: black;
    }

    .ant-table-row:hover > td {
        background-color: black !important;
    }

    .notificacion {
        display: flex;
        justify-content: flex-end;
        width: 100%;
    }

    .ant-badge {
        padding: 0 5px !important;
    }
</style>

<div>
    <div class="notificacion">
        <a style="color:darkred;" href="/Licencias-Aprobar">
            <p style="display:inline-block;">
                Tienes licencias pendientes

            </p>

            <Badge Count="LicenciasPendientes.Count">
                <span class="head-example" />
            </Badge>


        </a>
    </div>

    <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@FechaBuscarI" />


    <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@FechaBuscarF" />


    <Button OnClick="@LicenciasBUscar"></Button>

    <GridRow>
        <GridCol Style="width: 100% !important;flex: none !important;display: flex; justify-content: space-between; max-width:none;" Span="4">
            <Button Type="primary" OnClick="()=>ShowModalAgregar()">Agrega Licencia</Button>
        </GridCol>
    </GridRow>
    <Table DataSource="LicenciasActivasVM" Bordered>

        <PropertyColumn Property="c=>c.NombreYApellido" Sortable></PropertyColumn>
        <PropertyColumn Property="c=>c.Desde" Sortable></PropertyColumn>
        <PropertyColumn Property="c=>c.Hasta" Sortable></PropertyColumn>
        <PropertyColumn Property="c=>c.TipoLicencia" Sortable></PropertyColumn>
        <PropertyColumn Property="c=>c.EstadoLicencia" Sortable></PropertyColumn>

    </Table>
</div>
<Modal Footer="null" Title="@("Agregar la licencia")"
       Visible="@_visibleAgregar"
       OnOk="@HandleOkAgregar"
       OnCancel="@HandleCancelAgregar">
    <LicenciasAlta />
    <Button Style="margin-right: 100px !important;" Type="@ButtonType.Primary" OnClick="@HandleCancelAgregar">
        Volver
    </Button>
</Modal>
@code {
    public class LicencasVm
    {
        [Required]
        public TipoLicencia TipoLicencia { get; set; }
        public string Descripcion { get; set; }
        public DateTime Desde { get; set; }
        public DateTime Hasta { get; set; }
        public TipoEstadoLicencia EstadoLicencia { get; set; }
        public int PersonaId { get; set; }
        public Bombero? PersonalAfectado { get; set; }
        public string? NombreYApellido { get; set; }

    }

    DateTime FechaBuscarI;
    DateTime FechaBuscarF;
    BomberosDbContext Context { get; set; }
    public LicencasVm LicencasVM = new();
    List<LicencasVm> LicenciasActivasVM = new();
    List<Licencia> LicenciasPendientes = new();
    public bool _visibleAgregar = false;
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        LicencasVM = new();
        Context = DbFactory.CreateDbContext();
        await LicenciasActivas();
        await LicenciasPendiente();
    }

    private async Task LicenciasActivas()
    {
        LicenciasActivasVM = new();
        var Licencias = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Aprobada).Include(b => b.PersonalAfectado).ToListAsync();
        foreach (var l in Licencias)
        {

            LicencasVm LicVm = new()
                {
                    TipoLicencia = l.TipoLicencia,
                    Descripcion = l.Descripcion,
                    Desde = l.Desde,
                    Hasta = l.Hasta,
                    EstadoLicencia = l.EstadoLicencia,
                    NombreYApellido = l.PersonalAfectado.Nombre + "," + l.PersonalAfectado.Apellido,
                };
            LicenciasActivasVM.Add(LicVm);
        }
    }
    private async Task LicenciasPendiente()
    {
        LicenciasPendientes = new();
        LicenciasPendientes = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Pendiente).ToListAsync();

    }
    private async Task LicenciasBUscar()
    {
        LicenciasActivasVM.Clear();
        foreach (var l in LicenciasActivasVM)
        {
            var Licencias = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Aprobada).Include(b => b.PersonalAfectado).ToListAsync();
            if (l.Desde >= FechaBuscarI & l.Hasta <= FechaBuscarF)
            {
                LicencasVm LicVm = new()
                    {
                        TipoLicencia = l.TipoLicencia,
                        Descripcion = l.Descripcion,
                        Desde = l.Desde,
                        Hasta = l.Hasta,
                        EstadoLicencia = l.EstadoLicencia,
                        NombreYApellido = l.PersonalAfectado.Nombre + "," + l.PersonalAfectado.Apellido,
                    };
                LicenciasActivasVM.Add(LicVm);

            }
        }
        await Init();
    }
    private async void HandleOkAgregar(MouseEventArgs e)
    {
        _visibleAgregar = false;
    }
    public async void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregar = false;
        await Init();
    }
    private async void ShowModalAgregar()
    {
        _visibleAgregar = true;
        await Init();
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}
