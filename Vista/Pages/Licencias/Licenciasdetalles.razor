@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/Licencias-Detalles"

<style>
    .ant-table-row > td {
        color: black;
        background-color: white;
    }

    .ant-table-row:hover > td {
        background-color: white !important;
    }

    .notificacion {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        /* width: 100%;  */
    }

    .ant-badge {
        padding: 0 5px !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .inpt-cont {
        min-width: 170px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        align-items: flex-end;
        gap: 1em;
        overflow: hidden !important;
        height: 100%;
    }

    .botonesCont {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
    }

    .ant-table-title {
        height: 6.5em !important;
    }

    .ant-badge {
        margin: 20px 10px 0 0 !important;
    }

    @@media (max-width: 960px) {
        .ant-table-row, .ant-table-row-level-0 {
            display: flex !important;
            flex-direction: column !important;
        }

        .ant-table.ant-table-bordered > .ant-table-title {
            height: 15em !important;
        }

        .buton-cont {
            width: 100% !important;
        }

        #ant-blazor-df7d6d62-e78b-479a-b209-8325c3889500 {
            width: 100% !important;
        }

        .notif-cont {
            align-items: flex-start !important;
        }

        .notificacion {
            margin-top: 15px !important;
        }

        .inpt-cont-inline {
            flex-direction: column !important;
            gap: 0 !important;
        }
    }
</style>

<div style="margin-top: 2em; width: 80%; ">
    @*dataSource= Contenido que contiene mi tabla *@
    <Table DataSource="LicenciasActivasVM" Bordered Responsive Style="min-width: 320px!important;">
            <TitleTemplate>
                <div class="botonesCont">
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Desde: </label>
                            <DatePicker TValue="DateTime"  OnChange="OnChange" @bind-Value="@FechaBuscarI" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Hasta: </label>
                            <DatePicker TValue="DateTime"  OnChange="OnChange" @bind-Value="@FechaBuscarF" />
                        </div>
                        <div class="buton-cont">
                            <Button OnClick="@LicenciasBUscar" Style="margin-bottom: 5px;">
                                <Icon Type="search" Theme="outline" />
                            </Button>

                        </div>
                    </div>



                    @*Parte del encuadre de texto del buscador  de licencias*@
                    <div class="inpt-cont-inline">
                        <div style="display: flex; margin-bottom:  5px;" class="buton-cont">
                            <Input Placeholder="Buscar Licenciado" @bind-Value="@Busqueda" OnPress="BuscarLicenciado" />
                            <Button OnClick="@BuscarLicenciado" Style="margin-bottom:  5px;">
                                <Icon Type="search" Theme="outline" />
                            </Button>
                        </div>
                    </div>


                    <div>
                        <Dropdown Class="notif-cont" Trigger="@(new Trigger[] { Trigger.Click })" Placement="Placement.BottomRight" Arrow Style="display: flex;width: fit-content;align-items: center;">
                        <Overlay>
                            <Menu Style="min-width:320px;max-width:600px;">
                                <LicenciasAprobar />
                            </Menu>
                        </Overlay>
                        <ChildContent>
                            <div class="notificacion">
                                <Badge Count="5">
                                    <i style="cursor: pointer;" class="fa-sharp fa-regular fa-bell"></i>
                                </Badge>
                            </div>
                        </ChildContent>
                    </Dropdown>
                </div>
            </div>


        </TitleTemplate>
        <ColumnDefinitions Context="muestra">
            <PropertyColumn Property="c=>c.NombreYApellido" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Desde" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.Hasta" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.TipoLicencia" Sortable></PropertyColumn>
            <PropertyColumn Property="c=>c.EstadoLicencia"
                                    Sortable
                            Filters="FiltroEstado">
            </PropertyColumn>
        </ColumnDefinitions>
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
        <Button OnClick="()=>ShowModalAgregar()">Agrega Licencia</Button>
    </div>
</div>
<Modal Footer="null" Title="@("Agregar la licencia")"
       Visible="@_visibleAgregar"
       OnOk="@HandleOkAgregar"
       OnCancel="@HandleCancelAgregar">
    <LicenciasAlta />
    <Button Style="margin-right: 100px !important; border: 1px solid black !important" OnClick="@HandleCancelAgregar">
        Volver
    </Button>
</Modal>



@code 
{
    public class LicencasVm
    {
        [Required]
        public TipoLicencia TipoLicencia { get; set; }
        public string Descripcion { get; set; }
        public DateTime Desde { get; set; }
        public DateTime Hasta { get; set; }
        public TipoEstadoLicencia EstadoLicencia { get; set; }
        public int PersonaId { get; set; }
        public Bombero? PersonalAfectado { get; set; }
        public string? NombreYApellido { get; set; }
    }

    //variables Locales
    DateTime FechaBuscarI;
    DateTime FechaBuscarF;
    BomberosDbContext Context { get; set; }
    public LicencasVm LicencasVM = new();
    List<LicencasVm> LicenciasActivasVM = new();
    List<Licencia> LicenciasPendientes = new();
    public bool _visibleAgregar = false;
    string? Busqueda;




    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        LicencasVM = new();
        Context = DbFactory.CreateDbContext();
        await LicenciasActivas();
        await LicenciasPendiente();
    }

    public TableFilter<TipoEstadoLicencia>[] FiltroEstado;


    private async Task LicenciasActivas()
    {
        LicenciasActivasVM = new();
        var Licencias = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Aprobada).Include(b => b.PersonalAfectado).ToListAsync();
        foreach (var l in Licencias)
        {
            LicencasVm LicVm = new()
                {
                    TipoLicencia = l.TipoLicencia,
                    Descripcion = l.Descripcion,
                    Desde = l.Desde,
                    Hasta = l.Hasta,
                    EstadoLicencia = l.EstadoLicencia,
                    NombreYApellido = l.PersonalAfectado.Nombre + "," + l.PersonalAfectado.Apellido,
                };
            LicenciasActivasVM.Add(LicVm);
        }
    }
    private async Task LicenciasPendiente()
    {
        LicenciasPendientes = new();
        LicenciasPendientes = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Pendiente).ToListAsync();
    }


    // licencias a buscar por fecha y hora
    private async Task LicenciasBUscar()
    {
        LicenciasActivasVM.Clear();
        var licencias = await Context.Licencias
            .Where(l => l.Desde >= FechaBuscarI && l.Hasta <= FechaBuscarF)
            .Where(l => l.EstadoLicencia == TipoEstadoLicencia.Aprobada)
            .Include(b => b.PersonalAfectado).ToListAsync();
        foreach (var licencia in licencias)
        {
            LicencasVm LicVm = new()
                {
                    TipoLicencia = licencia.TipoLicencia,
                    Descripcion = licencia.Descripcion,
                    Desde = licencia.Desde,
                    Hasta = licencia.Hasta,
                    EstadoLicencia = licencia.EstadoLicencia,
                    NombreYApellido = licencia.PersonalAfectado?.Nombre + "," + licencia.PersonalAfectado?.Apellido,
                };
            LicenciasActivasVM.Add(LicVm);
        }
    }





    // BuscarLicenciados
    private async Task BuscarLicenciado()
    {
        LicenciasActivasVM.Clear();
        var licencias = await Context.Licencias
        .Where(l => l.EstadoLicencia == TipoEstadoLicencia.Aprobada)
        .Where(l => l.PersonalAfectado.Nombre.ToLower().Contains(Busqueda.ToLower()) || l.PersonalAfectado.Apellido.ToLower().Contains(Busqueda.ToLower()))
        .Include(b => b.PersonalAfectado).ToListAsync();
        foreach (var l in licencias)
        {
            LicencasVm LicVm = new()
                {
                    TipoLicencia = l.TipoLicencia,
                    Descripcion = l.Descripcion,
                    Desde = l.Desde,
                    Hasta = l.Hasta,
                    EstadoLicencia = l.EstadoLicencia,
                    NombreYApellido = l.PersonalAfectado?.Nombre + "," + l.PersonalAfectado?.Apellido,
                };
            LicenciasActivasVM.Add(LicVm);
        }
    }






    private async void HandleOkAgregar(MouseEventArgs e)
    {
        _visibleAgregar = false;
    }
    public async void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregar = false;
        await Init();
    }
    private async void ShowModalAgregar()
    {
        _visibleAgregar = true;
        await Init();
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}