@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/Licencias-Detalles"
<h5>Detalles de las Licencias</h5>
<style>

    .ant-table-row > td {
        color: white;
        background-color: black;
    }

    .ant-table-row:hover > td {
        background-color: black !important;
    }

    .notificacion {
        display: flex;
        justify-content: flex-end;
        width: 100%;
    }

    .ant-badge {
        padding: 0 5px !important;
    }
</style>

<div>
    <div class="notificacion">
        <a style="color:darkred;" href="/Licencias-Aprobar">
            <p style="display:inline-block;">
                Tienes licencias pendientes

            </p>

            <Badge Count="LicenciasPendientes.Count">
                <span class="head-example" />
            </Badge>
            

        </a>
    </div>
    <GridRow>
        <GridCol Style="width: 100% !important;flex: none !important;display: flex; justify-content: space-between; max-width:none;" Span="4">
            <Button Type="primary" OnClick="()=>ShowModalAgregar()">Agrega Licencia</Button>
        </GridCol>
    </GridRow>
    <Table DataSource="LicenciasActivasVM" Bordered>
        
        <PropertyColumn Property="c=>c.NombreYApellido"></PropertyColumn>
        <PropertyColumn Property="c=>c.Desde"></PropertyColumn>
        <PropertyColumn Property="c=>c.Hasta"></PropertyColumn>
        <PropertyColumn Property="c=>c.TipoLicencia"></PropertyColumn>
        <PropertyColumn Property="c=>c.EstadoLicencia"></PropertyColumn>

    </Table>
</div>
<Modal Footer="null" Title="@("Licencia")"
       Visible="@_visibleAgregar"
       OnOk="@HandleOkAgregar"
       OnCancel="@HandleCancelAgregar">
       <LicenciasAlta/>
       <Button Style="margin-right: 100px !important;" Type="@ButtonType.Primary" OnClick="@HandleCancelAgregar">
            Volver
       </Button>
</Modal>
@code {
    public class LicencasVm
    {
        [Required]
        public TipoLicencia TipoLicencia { get; set; }
        public string Descripcion { get; set; }
        public DateTime Desde { get; set; }
        public DateTime Hasta { get; set; }
        public TipoEstadoLicencia EstadoLicencia { get; set; }
        public int PersonaId { get; set; }
        public Bombero? PersonalAfectado { get; set; }
        public string? NombreYApellido { get; set; }

    }


    BomberosDbContext Context { get; set; }
    public LicencasVm LicencasVM = new();
    List<LicencasVm> LicenciasActivasVM = new();
    List<Licencia> LicenciasPendientes = new();
    public bool _visibleAgregar = false;
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        LicencasVM = new();
        Context = DbFactory.CreateDbContext();
        await LicenciasActivas();
        await LicenciasPendiente();
    }

    private async Task LicenciasActivas()
    {
        LicenciasActivasVM = new();
        var Licencias = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Aprobada).ToListAsync();
        foreach (var l in Licencias)
        {
            var bombero = await Context.Bomberos.SingleOrDefaultAsync(b => b.PersonaId == l.PersonaId);
            LicencasVm LicVm = new()
                {
                    TipoLicencia = l.TipoLicencia,
                    Descripcion = l.Descripcion,
                    Desde = l.Desde,
                    Hasta = l.Hasta,
                    EstadoLicencia = l.EstadoLicencia,
                    NombreYApellido = bombero.Nombre + "," + bombero.Apellido,
                    PersonalAfectado = bombero

                };
            LicenciasActivasVM.Add(LicVm);
        }
    }
    private async Task LicenciasPendiente()
    {
        LicenciasPendientes = new();
        LicenciasPendientes = await Context.Licencias.Where(l => l.EstadoLicencia == TipoEstadoLicencia.Pendiente).ToListAsync();

    }
    private async void HandleOkAgregar(MouseEventArgs e)
    {
        _visibleAgregar = false;
    }
    public async void HandleCancelAgregar(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visibleAgregar = false;
        await Init();
    }
    private void ShowModalAgregar()
    {
        _visibleAgregar = true;
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}
