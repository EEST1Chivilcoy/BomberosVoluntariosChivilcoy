@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Mappers

@*Servicios utilizados*@
@using Vista.Services
@inject ILicenciaService LicenciaService
@inject IMessageService message

<style>
    .ant-table-row > td {
        color: black;
        background-color: white;
    }

    .ant-table-row:hover > td {
        background-color: white !important;
    }

    .delete {
        text-align: right;
    }
</style>

<div>
    <Table DataSource="LicenciasVM_PendientesDeAprobacion" Bordered Responsive Size="TableSize.Small">

        <PropertyColumn Title="Apellido y Nombre" Property="c => c.ApellidoYNombre"></PropertyColumn>

        <PropertyColumn Property="c => c.Desde" Format="dd/MM/yyyy"></PropertyColumn>

        <PropertyColumn Property="c => c.Hasta" Format="dd/MM/yyyy"></PropertyColumn>

        <PropertyColumn Title="Duración en Días" Property="c => c.DuracionEnDias"></PropertyColumn>

        <PropertyColumn Title="Tipo"
                        Property="@(c => c.TipoLicencia.GetDisplayName())" />

        <PropertyColumn Title="Estado" Property="c => c.EstadoLicencia"></PropertyColumn>

        <ActionColumn Title="Acciones" Style="display:flex;justify-content:space-around;">
            <Popconfirm Title="¿Quiere aprobar esta licencia?"
                        OnConfirm="()=> AprobarLicencia(context.Id)"
                        OkText="Si"
                        CancelText="No">
                <i class="fa-solid fa-check" style="color: #40c011;cursor: pointer;"></i>
            </Popconfirm>
            <Popconfirm Title="Desea Rechazar Licencia?"
                        OnConfirm="()=> RechazarLicencia(context.Id)"
                        OkText="Si"
                        CancelText="No">
                <i class="fa-solid fa-trash" style="color: red ;cursor: pointer;"></i>
            </Popconfirm>
        </ActionColumn>

    </Table>
</div>

@code {
    [Parameter, EditorRequired] public EventCallback OnCompleted { get; set; } // Evento para notificar que se aprobó o rechazó una licencia (esto es para actualizar la vista padre)

    // Lista para almacenar las licencias pendientes de aprobación
    private List<LicenciaViewModel> LicenciasVM_PendientesDeAprobacion = new();

    // Lista para almacenar todas las licencias sin ningun tipo de filtro (osea todas las licencias)
    private List<LicenciaViewModel> LicenciasVM_SinFiltro = new();

    // Método que se ejecuta al inicializar el componente
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    // Carga inicial de datos
    private async Task Init()
    {
        // Cargamos todas las licencias de la base de datos mediante el servicio
        var licencias = await LicenciaService.ObtenerTodasLasLicencias();

        // Mapeo de licencias a ViewModel
        LicenciasVM_SinFiltro = LicenciasToViewModel(licencias).ToList();

        // Filtramos las licencias que están pendientes de aprobación
        LicenciasVM_PendientesDeAprobacion = CargarLicenciasPendientes(LicenciasVM_SinFiltro);

        StateHasChanged();
    }

    // Mapea las licencias del modelo de datos al ViewModel
    private List<LicenciaViewModel> LicenciasToViewModel(List<Licencia> licencias)
    {
        var licenciasVM = new List<LicenciaViewModel>();

        foreach (var l in licencias)
        {
            var licVm = new LicenciaViewModel
            {
                Id = l.LicenciaId,
                TipoLicencia = l.TipoLicencia,
                NumeroLegajo = l.BomberoAfectado?.NumeroLegajo ?? 0,
                PersonaId = l.PersonalId,
                PersonalAfectado = l.BomberoAfectado.ToBomberoViewModel(),
                ApellidoYNombre = l.BomberoAfectado != null
                    ? $"{l.BomberoAfectado.Apellido}, {l.BomberoAfectado.Nombre}"
                    : string.Empty,
                Descripcion = l.Descripcion,
                Desde = l.Desde,
                Hasta = l.Hasta,
                EstadoLicencia = l.EstadoLicencia
            };

            licenciasVM.Add(licVm);
        }

        return licenciasVM;
    }

    // Filtra las licencias que están en estado pendiente
    private List<LicenciaViewModel> CargarLicenciasPendientes(List<LicenciaViewModel> licencias)
    {
        return licencias
            .Where(l => l.EstadoLicencia == TipoEstadoLicencia.Pendiente)
            .ToList();
    }

    // Aprueba la licencia que esta en pendiente
    private async Task AprobarLicencia(int IdLicencia)
    {
        // Llamamos al servicio para aprobar la licencia
        await LicenciaService.CambiarEstadoLicencia(IdLicencia, TipoEstadoLicencia.Aprobada);

        await Init();
        await message.SuccessAsync("Licencia Aprobada!");
        await OnCompleted.InvokeAsync(); // Notificamos que se completó la acción
    }

    // Elimina la licencia que esta en pendiente
    private async Task RechazarLicencia(int IdLicencia)
    {
        // Llamamos al servicio para rechazar la licencia
        await LicenciaService.CambiarEstadoLicencia(IdLicencia, TipoEstadoLicencia.Rechazada);

        await Init();
        await message.SuccessAsync("Licencia Rechazada!");
        await OnCompleted.InvokeAsync(); // Notificamos que se completó la acción
    }
}