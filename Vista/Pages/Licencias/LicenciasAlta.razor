@using Vista.Data.Models.Personales.Componentes

@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }
</style>


<Form Model="@NuevaLicencia"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;">

    <FormItem Label="Nombre del Bombero">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@ListabomberosVM"
                @bind-Value="@NuevaLicencia.NumeroLegajo"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Selecione el bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>

    <FormItem Label="Numero Legajo">
        <AntDesign.InputNumber @bind-Value="NuevaLicencia.NumeroLegajo" Disabled />
    </FormItem>

    <FormItem Label="Tipo Licencia">
        <EnumSelect TEnum="TipoLicencia" @bind-Value="@NuevaLicencia.TipoLicencia" />
    </FormItem>

    @if (NuevaLicencia.TipoLicencia == TipoLicencia.RazonesDeSalud)
    {
        <FormItem Label="Adjuntar Certificado Médico">
            <InputFile />
        </FormItem>
    }

    <FormItem Label="Descripcion">
        <Input @bind-Value="@NuevaLicencia.Descripcion" />
    </FormItem>

    <FormItem Label="Fecha inicio">
        <DatePicker TValue="DateTime" DefaultValue="DateTime.Now" @bind-Value="@NuevaLicencia.Desde"
                    DisabledDate="@(date => date < DateTime.Today)" />
    </FormItem>

    <FormItem Label="Fecha finalizacion">
        <DatePicker TValue="DateTime" DefaultValue="DateTime.Now" @bind-Value="@NuevaLicencia.Hasta"
                    DisabledDate="@(date => date < NuevaLicencia.Desde)" />
    </FormItem>

    <FormItem Label="Duración en días">
        <span>@NuevaLicencia.DuracionEnDias</span>
    </FormItem>

    <FormItem Label="Tipo estado licencia">
        <EnumSelect TEnum="TipoEstadoLicencia" @bind-Value="@NuevaLicencia.EstadoLicencia" Disabled />
    </FormItem>

    <FormItem Style="width: 100% !important;
            display: flex !important;
            justify-content: flex-end !important;
            align-items: flex-end !important; height:100% !important; margin-bottom: -32px;" WrapperColOffset="8" WrapperColSpan="16">
        <Button Class="boton_p" HtmlType="submit" Style="margin-right: 60px;">
            Cargar licencia
        </Button>
    </FormItem>

</Form>



@code {
    BomberosDbContext Context { get; set; }

    List<BomberoViweModel> ListabomberosVM = new();
    LicenciaAltaViewModel NuevaLicencia = null!;

    // ViewModel para el Alta de la Licencia
    public class LicenciaAltaViewModel
    {
        [Required]
        public TipoLicencia TipoLicencia { get; set; }

        public int NumeroLegajo { get; set; }

        public string? Descripcion { get; set; }

        [Required]
        public DateTime Desde { get; set; }

        [Required]
        public DateTime Hasta { get; set; }

        public TipoEstadoLicencia EstadoLicencia { get; set; }

        public Bombero? PersonalAfectado { get; set; }

        public int DuracionEnDias => (Hasta - Desde).Days + 1;

        public bool FechasValidas => Desde >= DateTime.Today && Hasta >= Desde;
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        NuevaLicencia = new();
        NuevaLicencia.EstadoLicencia = TipoEstadoLicencia.Pendiente;
        Context = DbFactory.CreateDbContext();
        await CargarBomberosView();
    }

    private async void OnFinish(EditContext editContext)
    {
        if (NuevaLicencia.FechasValidas)
        {
            try
            {
                Bombero? personalAfectado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == NuevaLicencia.NumeroLegajo);
                Licencia licencia = new()
                    {
                        TipoLicencia = NuevaLicencia.TipoLicencia,
                        Descripcion = NuevaLicencia.Descripcion,
                        Desde = NuevaLicencia.Desde,
                        Hasta = NuevaLicencia.Hasta,
                        EstadoLicencia = NuevaLicencia.EstadoLicencia,
                        PersonalAfectado = personalAfectado

                    };

                Context.Licencias.Add(licencia);
                await Context.SaveChangesAsync();

                await Init();
                StateHasChanged();
                await message.Success("Licencia cargada correctamente");
            }
            catch (Exception e)
            {
                await Init();
                StateHasChanged();
                if (e.InnerException != null)
                    await message.Error(e.InnerException.Message, 5);
                else
                    await message.Error(e.Message, 5);
            }
        }
        else
            await message.Error("Error: La fecha de inicio no puede ser anterior a la fecha de hoy y la fecha de finalización no puede ser anterior a la fecha de inicio.");
    }

    private async Task CargarBomberosView()
    {
        ListabomberosVM = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bom = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo
                };
            ListabomberosVM.Add(bom);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(NuevaLicencia)}");
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
