@inject IMessageService message
@inject NavigationManager navigationManager
@page "/salidas/serviciosCapacitacion"

@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Enums

@*Servicios Utilizados*@
@using Vista.Data.ViewModels.Servicios
@using Vista.Services
@inject ISalidaService SalidaService
@inject IBomberoService BomberoService

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General
@using Vista.Data.Models.Salidas.Planillas.Servicios

<head>
    <link href="css/salida.css" rel="stylesheet" />
</head>

<Form Model="@modelServicioCapacitacion"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">

    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">

        <div style="text-align: center; margin-bottom: 20px;">
            <h2>SERVICIO DE CAPACITACION</h2>
        </div>

        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>

        <Flex Justify="center">
            <div class="steps-content" style="padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
                @if (current == 0)
                {
                    @*General*@
                    <DatosGenerales Model="@modelServicioCapacitacion"
                                    animationClass="@animationClass" />
                }
                else if (current == 1)
                {
                    @*Solicitante | Receptor | Damnificado*@
                    <Participantes Model="@modelServicioCapacitacion"
                                   animationClass="@animationClass" />
                }
                else if (current == 2)
                {
                    @*Chofer y Moviles*@
                    <Vehiculos Model="@modelServicioCapacitacion"
                               animationClass="@animationClass" />
                }
                else if (current == 3)
                {
                    @*Bomberos*@
                    <Personal Model="@modelServicioCapacitacion"
                              animationClass="@animationClass" />
                }
                else if (current == 4)
                {
                    @*Propio de la salida de Servicio Prevención*@

                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo de Capacitacion</label>
                        <EnumSelect TEnum="TipoCapacitacion" @bind-Value="@modelServicioCapacitacion.TipoCapacitacion" />
                    </div>
                    <div class="inpt-cont">
                        @if (modelServicioCapacitacion.TipoCapacitacion == TipoCapacitacion.Otro)
                        {
                            <label class="inpt-cont--lbl">Descripción</label>
                            <select @bind="@modelServicioCapacitacion.TipoCapacitacionOtra" />
                            <!--!-->
                            <!--!-->
                            <textarea class="ant-input" placeholder="Descripcion" id="ant-blazor-b6465f2c-86ae-4512-ae23-1434fb9259f7" rows="2" name="Model.Descripcion" _bl_35968b19-a5b4-486f-9ea7-dca1d2d9f3aa="">
                                            </textarea>
                        }
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Nivel</label>
                        <EnumSelect TEnum="TipoNivelCapacitacion" @bind-Value="@modelServicioCapacitacion.NivelDeCapacitacion" />
                    </div>
                    @if (modelServicioCapacitacion.NivelDeCapacitacion == TipoNivelCapacitacion.Otro)
                    {
                        <label class="inpt-cont--lbl">Descripción</label>
                        <select @bind="@modelServicioCapacitacion.NivelDeCapacitacionOtro" />
                        <!--!-->
                        <!--!-->
                        <textarea class="ant-input" placeholder="Descripcion" id="ant-blazor-b6465f2c-86ae-4512-ae23-1434fb9259f7" rows="2" name="Model.Descripcion" _bl_35968b19-a5b4-486f-9ea7-dca1d2d9f3aa="">
                                                    </textarea>
                    }
                }
            </div>
        </Flex>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {
    private ServicioEspecialCapacitacionViewModel modelServicioCapacitacion = new();

    @*Steps*@

    public int current { get; set; } = 0;//Ubicacion del Step
    private string animationClass = "";

    public class StepItem
    {
        public string? Title { get; set; }
        public string? Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Solicitante / Receptor / Damnificado */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}  /* Datos de Capacitacion */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    @*Carga de Salida*@

    private async void OnFinish(EditContext editContext)
    {

        try
        {
            Bombero? bomberoEncargado = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(modelServicioCapacitacion.LegajoEncargado);
            Bombero? BomberoLlenoPlanilla = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(modelServicioCapacitacion.LegajoLLenoPlanilla);

            var numeroParteRescate = await SalidaService.ObtenerSalidaPorNumeroParteAsync<ServicioEspecialCapacitacion>(
               modelServicioCapacitacion.NumeroParte,
                m => m.NumeroParte == modelServicioCapacitacion.NumeroParte
            );

            if (numeroParteRescate != null)
            {
                await message.Warning("Numero parte ya existente.");
                return;
            }

            ServicioEspecialCapacitacion Capacitacion = new()
                {
                    NumeroParte = modelServicioCapacitacion.NumeroParte,
                    AnioNumeroParte = modelServicioCapacitacion.AnioNumeroParte,
                    HoraSalida = modelServicioCapacitacion.HoraSalida,
                    HoraLlegada = modelServicioCapacitacion.HoraLLegada,
                    Descripcion = modelServicioCapacitacion.Descripcion,
                    Direccion = modelServicioCapacitacion.CalleORuta,
                    PisoNumero = modelServicioCapacitacion.PisoNumero,
                    Depto = modelServicioCapacitacion.Depto,
                    NombreYApellidoReceptor = modelServicioCapacitacion.NombreYApellidoReceptor,
                    TipoZona = modelServicioCapacitacion.TipoZona,
                    NombreSolicitante = modelServicioCapacitacion.NombreSolicitante,
                    ApellidoSolicitante = modelServicioCapacitacion.ApellidoSolicitante,
                    DniSolicitante = modelServicioCapacitacion.DniSolicitante,
                    TelefonoSolicitante = modelServicioCapacitacion.TelefonoSolicitante,
                    //Propio de Capacitacion
                    NivelDeCapacitacion = modelServicioCapacitacion.NivelDeCapacitacion,
                    TipoCapacitacion = modelServicioCapacitacion.TipoCapacitacion,
                    NivelDeCapacitacionOtro = modelServicioCapacitacion.NivelDeCapacitacionOtro,
                    TipoCapacitacionOtra = modelServicioCapacitacion.TipoCapacitacionOtra,
                    //
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = bomberoEncargado,
                    //Carga propio de rescates

                    //Seguro = new() <-- Consultar si es requerido
                    //{
                    //    CompañiaAseguradora = PersonaViewModel.CompaniaAseguradora,
                    //    NumeroDePoliza = PersonaViewModel.NumeroPoliza,
                    //    FechaDeVencimineto = PersonaViewModel.FechaVencimineto,
                    //},

                    //Iniciación de Listas
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()

                };


            //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
            if (modelServicioCapacitacion.CuerpoParticipante != null && modelServicioCapacitacion.CuerpoParticipante.Any())
            {
                Capacitacion.CuerpoParticipante = modelServicioCapacitacion.CuerpoParticipante.ToList();
            }

            //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
            if (modelServicioCapacitacion.Moviles != null && modelServicioCapacitacion.Moviles.Any())
            {
                Capacitacion.Moviles = modelServicioCapacitacion.Moviles.ToList();
            }

            //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
            if (modelServicioCapacitacion.Damnificados != null && modelServicioCapacitacion.Damnificados.Any())
            {
                Capacitacion.Damnificados = modelServicioCapacitacion.Damnificados.ToList();
            }

            await SalidaService.GuardarSalida(Capacitacion);
            HandleOk1(Capacitacion.AnioNumeroParte, Capacitacion.NumeroParte);
            Init();
            StateHasChanged();
        }
        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
    }

    @*Inicio*@
    protected override void OnInitialized()
    {
        Init();
    }

    private void Init()
    {
        modelServicioCapacitacion = new();
    }

    @*Finish Failed*@
    private void OnFinishFailed(EditContext editContext)
    {
        message.Error("Error al cargar, posible información ausente");
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelServicioCapacitacion)}");
    }

    @*Impresión*@
    bool _visible1;

    public int ImprimirAnio;
    public int ImprimirNumeroParte;
    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }
}