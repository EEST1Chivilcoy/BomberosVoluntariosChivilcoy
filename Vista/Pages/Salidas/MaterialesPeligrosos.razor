@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/materiales-peligrosos"
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using Microsoft.EntityFrameworkCore.Metadata.Internal;
@using Vista.Data.ViewModels.MaterialesPeligrosos;
@using Vista.Data.ViewModels.Personal;
<h2 style="text-align:center; text-decoration:underline;">Materiales Peligrosos</h2>

<Form Model="@modelMateriales"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    @*Datos generales de las salidas*@

    <FormItem Label="Descripcion">
        <Input @bind-Value="@modelMateriales.Descripcion" />
    </FormItem>
    <FormItem Label="Dato Hora salida">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelMateriales.HoraSalida" />
    </FormItem>
    <FormItem Label="Dato Hora llegada">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelMateriales.HoraLLegada" />
    </FormItem>
    <FormItem Label="Kilometro salida">
        <AntDesign.InputNumber @bind-Value="modelMateriales.KmSalida" />
    </FormItem>
    <FormItem Label="Kilometro llegada">
        <AntDesign.InputNumber @bind-Value="modelMateriales.KmLlegada" />
    </FormItem>
    <FormItem Label="Calle/Ruta">
        <Input @bind-Value="@modelMateriales.CalleORuta" />
    </FormItem>
    <FormItem Label="Numero/kilometro">
        <Input @bind-Value="@modelMateriales.NumeroOKilometro" />
    </FormItem>
    <FormItem Label="Entre calles">
        <Input @bind-Value="@modelMateriales.EntreCalles" />
    </FormItem>
    <FormItem Label="PisoNumero">
        <Input @bind-Value="@modelMateriales.PisoNumero" />
    </FormItem>
    <FormItem Label="Depto">
        <Input @bind-Value="@modelMateriales.Depto" />
    </FormItem>
    <FormItem Label="Tipo zona">
        <EnumSelect TEnum="TipoZona" @bind-Value="@modelMateriales.TipoZona" />
    </FormItem>
    @*Solicitante datos*@
    <b><label>Datos de solicitante</label></b>
    <FormItem Label="Nombre del solicitante">
        <Input @bind-Value="@modelMateriales.NombreSolicitante" />
    </FormItem>
    <FormItem Label="Apelldio del solicitante">
        <Input @bind-Value="@modelMateriales.ApellidoSolicitante" />
    </FormItem>
    <FormItem Label="documneto del solicitante">
        <Input @bind-Value="@modelMateriales.DniSolicitante" />
    </FormItem>
    <FormItem Label="Telefono  del solicitante">
        <Input @bind-Value="@modelMateriales.TelefonoSolicitante" />
    </FormItem>
    @*Datos del receptor*@
    <FormItem Label="Nombre y apellido del receptor">
        <Input @bind-Value="@modelMateriales.NombreYApellidoReceptor" />
    </FormItem>
    <FormItem Label="Telefono receptor">
        <Input @bind-Value="@modelMateriales.TelefonoReceptor" />
    </FormItem>

    @*Datos de damnificados*@
    <FormItem Label="¿Ubo damnificados?">
        <Switch @bind-Checked="switchValue" />
    </FormItem>
    @if (switchValue == true)
    {

        <FormItem Label="Nombre">
            <Input @bind-Value="@damnificado.Nombre" />
        </FormItem>
        <FormItem Label="Apellido">
            <Input @bind-Value="@damnificado.Apellido" />
        </FormItem>
        <FormItem Label="Documento">
            <Input @bind-Value="@damnificado.Dni" />
        </FormItem>
        <FormItem Label="Tipo sexo">
            <EnumSelect TEnum="TipoSexo" @bind-Value="@damnificado.Sexo" />
        </FormItem>
        <FormItem Label="Lugar De nacimiento">
            <Input @bind-Value="@damnificado.LugarDeNacimiento" />
        </FormItem>
        <FormItem Label="edad">
            <AntDesign.InputNumber @bind-Value="damnificado.Edad" />
        </FormItem>
        <FormItem Label="Tipo material">
            <EnumSelect TEnum="TipoDamnificado" @bind-Value="@damnificado.Estado" />
        </FormItem>
        <Button OnClick="@AgregarDamnificado">Agregar damnificado</Button>
    }
    @*Datos Del seguro*@
    <FormItem Label="Compania Aseguradora del establecimiento ">
        <Input @bind-Value="@modelMateriales.CompaniaAseguradora" />
    </FormItem>
    <FormItem Label="NumeroPoliza">
        <Input @bind-Value="@modelMateriales.NumeroPoliza" />
    </FormItem>
    <FormItem Label="FechaVencimineto">
        <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelMateriales.FechaVencimineto" />
    </FormItem>
    @*Moviles de salidas*@
    <b><label>Datos de chofer</label></b>
    <br />
    <FormItem Label="" style="display: grid;place-items: center;">
        <Checkbox @bind-Checked="chekM"> Cargo combustible</Checkbox>
        <Button Type="primary" OnClick="@ShowModal">
            Cargo Combustible
        </Button>
    </FormItem>
    <FormItem Label="Elija el chofer">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoChoferes"
        @bind-Value="@chofer"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Selecione a un bombero"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    <FormItem Label="Numero de movil">
        <Select TItem="Movil"
                TItemValue="string"
                DataSource="@Moviles"
                @bind-Value="@NumeroMovil"
                LabelName="@nameof(Movil.NumeroMovil)"
                ValueName="@nameof(Movil.NumeroMovil)"
                Placeholder="Selecione el movil"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>

    </FormItem>
    <br />
    <Button OnClick="@AgregarMovilSalida">Cargar Movil salida</Button>

    @*Cuerpos paraticipantes*@
    <b><label>Cuerpo Participante</label></b>
    <FormItem Label="Elija el bombero">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@BomberoCuerpo"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Selecione el personal"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    <Checkbox @bind-Checked="chekB"> Salio</Checkbox>
    <br />
    <Button OnClick="@AgregarCuerpoParticipante">Cargar cuerpo participante</Button>
    <br />
    <div>
        <Table Context="bomberosSalida1" DataSource="bomberosSalida" Bordered>
            <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
            <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
            <ActionColumn Title="Action">
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>
    <b><label>Elija al encargado</label></b>
    <FormItem Label="Encargado">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@BomberoEncargado"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Select a person"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    <b><label>Quien lleno planilla</label></b>
    <FormItem Label="Bombero que lleno la planilla">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@QuienLLenoPlanilla"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Select a person"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    @*Tipo servicio*@
    <FormItem Label="Tipo Servicio salida">
        <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@modelMateriales.TipoServicio" />
    </FormItem>

    @*propio de la salida de tipo material*@
    <FormItem Label="Tipo material">
        <EnumSelect TEnum="TipoMaterialPeligroso" @bind-Value="@modelMateriales.Tipo" />
    </FormItem>
    <FormItem Label="Sustancias">
        <Input @bind-Value="modelMateriales.Sustancias" />
    </FormItem>
    <b><label>Acciones sobre los materiales</label></b>
    <CheckboxGroup Style="width:100%" ValueChanged="@OnChange">

        <Row>
            <Col Span="8">
            <Checkbox Label="Controlada" @bind-Value="@modelMateriales.Controlada">Controlada</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="Venteo" @bind-Value="@modelMateriales.Venteo">Venteo</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="DilucionDeVapores" @bind-Value="@modelMateriales.DilucionDeVapores">DilucionDeVapores</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="Neutralizacion" @bind-Value="@modelMateriales.Neutralizacion">Neutralizacion</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="Trasvase" @bind-Value="@modelMateriales.Trasvase">Trasvase</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="otro" @bind-Value="@modelMateriales.OtraAccionesMateriales">OtraAccionesMateriales</Checkbox>
            </Col>
        </Row>
    </CheckboxGroup>

    <FormItem Label="Detalles Acciones ">
        <Input @bind-Value="modelMateriales.DetallesAccionesMateriales" />
    </FormItem>
    @*Acciones sobre personas*@
    <FormItem Label="Tipo Evacuacion">
        <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@modelMateriales.Evacuacion" />
    </FormItem>
    <br />
    <b><label>Acciones sobre personas</label></b>
    <CheckboxGroup Style="width:100%" ValueChanged="@OnChange">

        <Row>
            <Col Span="8">
            <Checkbox Label="Confinamiento" @bind-Value="@modelMateriales.Confinamiento">Confinamiento</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="Descontaminacion" @bind-Value="@modelMateriales.Descontaminacion">Descontaminacion</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="SinAccion" @bind-Value="@modelMateriales.SinAccion">SinAccion</Checkbox>
            </Col>
            <Col Span="8">
            <Checkbox Label="OtraAccionesPersonas" @bind-Value="@modelMateriales.OtraAccionesPersonas">OtraAccionesPersonas</Checkbox>
            </Col>
        </Row>
    </CheckboxGroup>

    <FormItem Label="Tipo Superficie">
        <EnumSelect TEnum="TipoSuperficie" @bind-Value="@modelMateriales.TipoSuperficie" />
    </FormItem>
    <FormItem Label="Detalles Surpeficie Afectada ">
        <Input @bind-Value="modelMateriales.DetalleSuperficieAfectada" />
    </FormItem>
    <FormItem Label="Tipo Evacuacion">
        <EnumSelect TEnum="TipoSituacionExplosion" @bind-Value="@modelMateriales.TipoSituacion" />
    </FormItem>



    <FormItem WrapperColOffset="8" WrapperColSpan="16">

        <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="@CargarMaterialPeligroso">
            Cargar salida
        </Button>


    </FormItem>

</Form>

<Modal Title="@("success")"
       Visible="@_visible1"
       OnOk="@HandleOk1"
       OnCancel="@HandleCancel1">
    <Result Status="success"
            Title="Se cargo correctamente la salida"
            SubTitle="">
    </Result>
</Modal>
<Modal Title="@("Datos de la carga de combustible")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@movilSalidaViewModels"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinishModel"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form1">
        <FormItem Label="Numero factura">
            <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
        </FormItem>
        <FormItem Label="Fecha factura">
            <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
        </FormItem>
        <FormItem Label="Tipo Combustible">
            <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
        </FormItem>
        <FormItem Label="Cantidad de Litros">
            <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
        </FormItem>
        <FormItem Label="Quien lleno">
            <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
        </FormItem>
        <FormItem Label="TelefonoQuienLleno">
            <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
        </FormItem>
    </Form>
</Modal>

@code
{

    private DamnificadoViewModels damnificado = new();
    private MaterialPeligrosoViewModels modelMateriales = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    private Form<MovilSalidaViewModels> _form1;
    public List<BomberoViweModel> bomberoChoferes = new();
    Bombero[] TodosBomberos;
    Movil[] Moviles;


    bool switchValue { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }

    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;
    bool _visible1;

    public async void CargarMaterialPeligroso()
    {
        ShowModal1();
        using var db = await DbFactory.CreateDbContextAsync();
        Bombero? bomberoReceptor = await db.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
        Bombero? bomberoEncargado = await db.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();
        Bombero? BomberoLlenoPlanilla = await db.Bomberos.Where(b => b.NumeroLegajo == QuienLLenoPlanilla).SingleOrDefaultAsync();

        MaterialPeligroso materiales = new()
            {

                NumeroParte = modelMateriales.NumeroParte,
                HoraSalida = modelMateriales.HoraSalida,
                HoraLlegada = modelMateriales.HoraLLegada,
                KmSalida = modelMateriales.KmSalida,
                KmLlegada = modelMateriales.KmLlegada,
                Descripcion = modelMateriales.Descripcion,
                CalleORuta = modelMateriales.CalleORuta,
                NumeroOKilometro = modelMateriales.NumeroOKilometro,
                EntreCalles = modelMateriales.EntreCalles,
                PisoNumero = modelMateriales.PisoNumero,
                Depto = modelMateriales.Depto,
                NombreYApellidoReceptor = modelMateriales.NombreYApellidoReceptor,
                TelefonoReceptor = modelMateriales.TelefonoReceptor,
                TipoZona = modelMateriales.TipoZona,
                NombreSolicitante = modelMateriales.NombreSolicitante,
                ApellidoSolicitante = modelMateriales.ApellidoSolicitante,
                DniSolicitante = modelMateriales.DniSolicitante,
                TelefonoSolicitante = modelMateriales.TelefonoSolicitante,
                TipoServicio = modelMateriales.TipoServicio,
                //carga propio de materiales peligrosos
                Tipo = modelMateriales.Tipo,
                Sustancias = modelMateriales.Sustancias,
                Controlada = modelMateriales.Controlada,
                Venteo = modelMateriales.Venteo,
                DilucionDeVapores = modelMateriales.DilucionDeVapores,
                Neutralizacion = modelMateriales.Neutralizacion,
                Trasvase = modelMateriales.Trasvase,
                OtraAccionesMateriales = modelMateriales.OtraAccionesMateriales,
                DetallesAccionesMateriales = modelMateriales.DetallesAccionesMateriales,
                Evacuacion = modelMateriales.Evacuacion,
                Descontaminacion = modelMateriales.Descontaminacion,
                Confinamiento = modelMateriales.Confinamiento,
                SinAccion = modelMateriales.SinAccion,
                OtraAccionesPersonas = modelMateriales.OtraAccionesPersonas,
                TipoSuperficie = modelMateriales.TipoSuperficie,
                DetalleSuperficieAfectada = modelMateriales.DetalleSuperficieAfectada,
                TipoSituacion = modelMateriales.TipoSituacion,
                QuienLleno = BomberoLlenoPlanilla,
                ReceptorBombero = bomberoReceptor,
                Encargado = bomberoEncargado,
                Seguro = new()
                {
                    CompañiaAseguradora = modelMateriales.CompaniaAseguradora,
                    NumeroDePoliza = modelMateriales.NumeroPoliza,
                    FechaDeVencimineto = modelMateriales.FechaVencimineto,
                },
                Damnificados = new(),
                Moviles = new(),
                CuerpoParticipante = new()

            };
        foreach (BomberoSalidaViewModels bom in bomberosSalida)
        {
            Bombero? bomberoSalida = await db.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
            BomberoSalida BomSalida = new()
                {
                    Salio = bom.Salio,
                    Bombero = bomberoSalida
                };
            materiales.CuerpoParticipante.Add(BomSalida);
        }
        foreach (MovilSalidaViewModels m in MovilesSalidasL)
        {
            Bombero? bomberoChofer = await db.Bomberos.Where(b => b.NumeroLegajo == m.Chofer.NumeroLegajo).SingleOrDefaultAsync();
            Movil? Movilsalida = await db.Moviles.Where(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil).SingleOrDefaultAsync();
            MovilSalida movilS = new()
                {
                    CargoCombustible = m.CargoCombustible,
                    NumeroFactura = movilSalidaViewModels.NumeroFactura,
                    FechaFactura = movilSalidaViewModels.FechaFactura,
                    TipoConbustible = movilSalidaViewModels.TipoConbustible,
                    CantidadLitros = movilSalidaViewModels.CantidadLitros,
                    QuienLleno = movilSalidaViewModels.QuienLleno,
                    TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                    Chofer = bomberoChofer,
                    Movil = Movilsalida
                };
            materiales.Moviles.Add(movilS);
        }

        foreach (DamnificadoViewModels d in DamnificadosSalida)
        {

            Damnificado damn = new()
                {
                    Nombre = d.Nombre,
                    Apellido = d.Apellido,
                    Dni = d.Dni,
                    Sexo = d.Sexo,
                    LugarDeNacimiento = d.LugarDeNacimiento,
                    Edad = d.Edad,
                    Estado = d.Estado,
                };
            materiales.Damnificados.Add(damn);


        }

        await db.MaterialesPeligrosos.AddAsync(materiales);
        await db.SaveChangesAsync();



    }
    
    public async void AgregarDamnificado()
    {
        using var db = await DbFactory.CreateDbContextAsync();

        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

            };
        DamnificadosSalida.Add(dp);
        await db.SaveChangesAsync();
    }

    public async void AgregarMovilSalida()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        Bombero? bomberoChofer = await db.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await db.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,
            };
        MovilesSalidasL.Add(m);
        await db.SaveChangesAsync();
        
    }

    public async void AgregarCuerpoParticipante()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        foreach (var bom in TodosBomberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                {
                    Salio = bomberoSalidaView.Salio,
                    Nombre = bom.Nombre,
                    Apellido = bom.Apellido,
                    NumeroLegajo = BomberoCuerpo
                };
                bomberosSalida.Add(b);
                await db.SaveChangesAsync();
            }
        }
        
        
    }
    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        TodosBomberos = await db.Bomberos.ToArrayAsync();
        Moviles = await db.Moviles.ToArrayAsync();
        CargarBomberosView();
   

    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(modelMateriales)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelMateriales)}");
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }
    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }
    // array de las opciones posibles, buscar la opcion y agregarla en la planilla
    public void CargarBomberosView()
    {

        foreach (Bombero b in TodosBomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            bomberoTodos.Add(bombero);
        }
        foreach (Bombero c in TodosBomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        //NombreImagen = b.NombreImagen,
                        //TipoImagen = b.TipoImagen,
                        //Base64Imagen = b.Base64,
                        Dotacion = c.Dotacion,
                        //Nombre = b.NombreBrigada,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                        //TelefonoCel = b.TelefonoCel,
                        //TelefonoFijo = b.TelefonoFijo,
                        //TelefonoLaboral = b.TelefonoLaboral,
                        //Email = b.Email,

                    };
                bomberoChoferes.Add(bomberoChofer);
            }
        }
    }
    //metodos para el modal

    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }
    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    private void ShowModal()
    {
        _visible = true;
    }
    public void ShowModal1()
    {
        _visible1 = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }
    private void OnFinishModel(EditContext editContext)
    {

        _visible = false;
    }
    private void HandleOk(MouseEventArgs e)
    {

        _visible = false;

    }
    private void HandleCancel1(MouseEventArgs e)
    {

        _visible1 = false;
    }
    private void HandleOk1(MouseEventArgs e)
    {
        navigationManager.NavigateTo($"/legajo");
        _visible1 = false;

    }
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
   
}




