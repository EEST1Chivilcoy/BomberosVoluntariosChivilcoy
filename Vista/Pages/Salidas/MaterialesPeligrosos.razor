@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/salidas/materiales-peligrosos"
@using Vista.Data.ViewModels.MaterialesPeligrosos;

<style>
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px){
        .contenedor{
            padding: 0 21px!important;
        }
    }

</style>

<div class="contenedor" style="max-width: 100%;margin-top: 2em;">
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>
    <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
        <Form Model="@modelMateriales"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              Style="width: 100%;height: 100%;overflow: hidden!important;">

            @if (current == 0)
            {
                <div class="slick-contenedor @animationClass">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Descripcion</label>
                        <Input @bind-Value="@modelMateriales.Descripcion" />
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Hora salida</label>
                            <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelMateriales.HoraSalida" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Hora llegada</label>
                            <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelMateriales.HoraLLegada" />
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Calle/Ruta</label>
                            <Input @bind-Value="@modelMateriales.CalleORuta" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Numero/kilometro</label>
                            <Input @bind-Value="@modelMateriales.NumeroOKilometro" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Entre calles</label>
                        <Input @bind-Value="@modelMateriales.EntreCalles" />
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">PisoNumero</label>
                            <Input @bind-Value="@modelMateriales.PisoNumero" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Depto</label>
                            <Input @bind-Value="@modelMateriales.Depto" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo zona</label>
                        <EnumSelect TEnum="TipoZona" @bind-Value="@modelMateriales.TipoZona" />
                    </div>
                </div>
            }
            else if (current == 1)
            {
                <div class="slick-contenedor @animationClass">
                    <h6>Datos del solicitante</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Nombre</label>
                            <Input @bind-Value="@modelMateriales.NombreSolicitante" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Apellido</label>
                            <Input @bind-Value="@modelMateriales.ApellidoSolicitante" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Documento</label>
                        <Input @bind-Value="@modelMateriales.DniSolicitante" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Telefono</label>
                        <Input @bind-Value="@modelMateriales.TelefonoSolicitante" />
                    </div>

                    <h6>Datos del receptor</h6>

                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Nombre y apellido</label>
                        <Input @bind-Value="@modelMateriales.NombreYApellidoReceptor" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Telefono</label>
                        <Input @bind-Value="@modelMateriales.TelefonoReceptor" />
                    </div>

                    <h6>Datos de damnificados</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 80px;">
                            <label class="inpt-cont--lbl">¿Hubo damnificados?</label>
                            <Switch @bind-Checked="switchValue" Style="width: 10px!important;" />
                        </div>
                        @if (switchValue == true)
                        {
                            <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 90px;">
                                <label class="inpt-cont--lbl">Agregar otro</label>
                                <Button OnClick="()=>visibleDamnificados = true">
                                    <i class="fa-solid fa-user-plus"></i>
                                </Button>
                            </div>
                            <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 90px;">
                                <label class="inpt-cont--lbl">Ver damnificados</label>
                                <Button OnClick="()=>visibleVerDamnificados = true">
                                    <i class="fa-solid fa-users-gear"></i>
                                </Button>
                            </div>
                        }
                    </div>

                    <Modal Footer="null" Title="@("Damnificados")"
                           Visible="@visibleVerDamnificados"
                           OnOk="@HandleOkD"
                           OnCancel="@HandleCancelVD">
                        <div class="inpt-cont">
                            <Table Context="Damnificados" DataSource="DamnificadosSalida" Bordered>
                                 <PropertyColumn Property="d=>d.NombreYApellido"></PropertyColumn>
                                 <PropertyColumn Property="d=>d.Edad"></PropertyColumn>
                                 <PropertyColumn Property="d=>d.Estado"></PropertyColumn>
                                 <ActionColumn Title="Acciones">
                                     <Popconfirm Title="¿Quieres borrar este damnificado?"
                                                 OnConfirm="()=> deleteRowDamnificados(Damnificados.Dni)"
                                                 OkText="Si"
                                                 CancelText="No"
                                                 Style="display: flex;justify-content: center;align-items: center;">
                                         <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                     </Popconfirm>
                                 </ActionColumn>
                             </Table>
                         </div>
                     </Modal>

                 @if (switchValue == true)
                    {
                        <Modal Footer="null" Title="@("Datos del damnificado")"
                               Visible="@visibleDamnificados"
                               OnOk="@HandleOkD"
                               OnCancel="@HandleCancelD">
                            <div class="inpt-cont-inline">
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Nombre</label>
                                    <Input @bind-Value="@damnificado.Nombre" />
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Apellido</label>
                                    <Input @bind-Value="@damnificado.Apellido" />
                                </div>
                            </div>
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Documento</label>
                                <Input @bind-Value="@damnificado.Dni" />
                            </div>
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Lugar de nacimiento</label>
                                <Input @bind-Value="@damnificado.LugarDeNacimiento" />
                            </div>
                            <div class="inpt-cont-inline">
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Sexo</label>
                                    <Input @bind-Value="@damnificado.Sexo" />
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Edad</label>
                                    <Input @bind-Value="@damnificado.Edad" />
                                </div>
                            </div>
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Estado</label>
                                <EnumSelect TEnum="TipoDamnificado" @bind-Value="@damnificado.Estado" />
                            </div>
                            <div class="inpt-cont">
                                <Button Type="primary" OnClick="@AgregarDamnificado">Agregar damnificado</Button>
                            </div>
                        </Modal>
                    }
                </div>
            }
            else if (current == 2)
            {
                <h6>Seguro del lugar</h6>

                <div class="slick-contenedor @animationClass">

                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Compania aseguradora del establecimiento</label>
                        <Input @bind-Value="@modelMateriales.CompaniaAseguradora" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Numero de poliza</label>
                        <Input @bind-Value="@modelMateriales.NumeroPoliza" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Fecha de vencimineto</label>
                        <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@modelMateriales.FechaVencimineto" />
                    </div>
                </div>
            }
            else if (current == 3)
            {
                <div class="slick-contenedor @animationClass">
                    <h6>Datos del chofer</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Elija el chofer</label>
                            <Select TItem="BomberoViweModel"
                                    TItemValue="int"
                                    DataSource="@bomberoChoferes"
                            @bind-Value="@chofer"
                                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                    Placeholder="Selecione a un bombero"
                                    DefaultActiveFirstOption="false"
                                    AllowClear="true"
                                                    EnableSearch>
                         </Select>
                     </div>
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">Numero de movil</label>
                         <Select TItem="Movil"
                                 TItemValue="string"
                                 DataSource="@Moviles"
                         @bind-Value="@NumeroMovil"
                                 LabelName="@nameof(Movil.NumeroMovil)"
                                 ValueName="@nameof(Movil.NumeroMovil)"
                                 Placeholder="Selecione el movil"
                                 DefaultActiveFirstOption="false"
                                 AllowClear="true"
                                                    EnableSearch>
                         </Select>
                     </div>
                 </div>
                 @if (NumeroMovil is not null)
                    {
                        foreach (Movil m in Moviles)
                        {
                            if (m.NumeroMovil == NumeroMovil)
                            {
                                if (m.NumeroMovil == NumeroMovil)
                                {
                                    modelMateriales.Kilometraje = m.Kilometraje;
                                    break;
                                }

                                modelMateriales.Kilometraje = m.Kilometraje;
                                break;
                            }
                        }
                    }
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Kilometro de salida</label>
                            <AntDesign.InputNumber @bind-Value="modelMateriales.Kilometraje" Disabled />
                         </div>
                         <div class="inpt-cont">
                             <label class="inpt-cont--lbl">Kilometro de llegada</label>
                             <AntDesign.InputNumber @bind-Value="modelMateriales.KmLlegada" />
                         </div>
                     </div>
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">¿Cargo combustible?</label>
                         <Switch @bind-Checked="switchMoviles" Disabled="@desactivarSwitch" Style="width: 10px!important;" />
                         @if (switchMoviles == true)
                        {
                            <Modal Title="@("Datos de la carga de combustible")"
                                   Visible="@_visible"
                                   OnOk="@HandleOk"
                                   OnCancel="@HandleCancelMovil">
                                <Form Loading="loading" Model="@movilSalidaViewModels"
                                      LabelColSpan="8"
                                      WrapperColSpan="16"
                                      OnFinish="OnFinishModel"
                                      OnFinishFailed="OnFinishFailed"
                                @ref="@_form1" Context="modalMoviles">
                                    <FormItem Label="Numero factura">
                                        <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
                                    </FormItem>
                                    <FormItem Label="Fecha factura">
                                        <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
                                    </FormItem>
                                    <FormItem Label="Tipo Combustible">
                                        <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
                                    </FormItem>
                                    <FormItem Label="Cantidad de Litros">
                                        <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
                                    </FormItem>
                                    <FormItem Label="Quien lleno">
                                        <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
                                    </FormItem>
                                    <FormItem Label="TelefonoQuienLleno">
                                        <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
                                    </FormItem>
                                </Form>
                            </Modal>
                        }
                    </div>
                    <div class="inpt-cont">
                        <Button OnClick="@AgregarMovilSalida">Cargar movil</Button>
                    </div>
                    @if (MovilesSalidasL is not null)
                    {
                        <div>
                            <Table Size="TableSize.Small" PageSize="4" Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
                             <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
                             <PropertyColumn Property="c=>c.ChoferNombreCompleto"></PropertyColumn>
                             <ActionColumn Title="Acciones">
                                 <Popconfirm Title="¿Quieres borrar este movil?"
                                             OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                                             OkText="Si"
                                             CancelText="No">
                                     <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                 </Popconfirm>
                             </ActionColumn>
                         </Table>
                     </div>
                    }
                </div>
            }
            else if (current == 4)
            {
                <div class="slick-contenedor @animationClass">
                    <h6>Cuerpo Participante</h6>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Elija el bombero</label>
                        <Select TItem="BomberoViweModel"
                                TItemValue="int"
                                DataSource="@bomberoTodos"
                        @bind-Value="@BomberoCuerpo"
                                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                Placeholder="Selecione un bombero"
                                DefaultActiveFirstOption="false"
                                AllowClear="true" EnableSearch>
                         </Select>
                    </div>
                    <div class="inpt-cont">
                         <Checkbox @bind-Checked="chekB">¿Salió?</Checkbox>
                    </div>
                    <div class="inpt-cont">
                         <Button OnClick="@AgregarCuerpoParticipante">Cargar al cuerpo participante</Button>
                    </div>
                     <div class="inpt-cont">
                         <Table Context="bomberosSalida1" Size="TableSize.Small" PageSize="4" DataSource="bomberosSalida" Bordered>
                             <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
                             <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
                             <ActionColumn Title="Acciones">
                                 <Popconfirm Title="¿Quieres eliminar este bombero?"
                                             OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                                             OkText="Si"
                                             CancelText="No">
                                 <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                 </Popconfirm>
                             </ActionColumn>
                         </Table>
                     </div>
                     <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Encargado</label>
                             <Select TItem="BomberoViweModel"
                                     TItemValue="int"
                                     DataSource="@bomberoTodos"
                                    @bind-Value="@BomberoEncargado"
                                     LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                     ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                     Placeholder="Seleccione  a un  bombero"
                                     DefaultActiveFirstOption="true"
                                     AllowClear="true" EnableSearch>
                             </Select>
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Lleno la planilla</label>
                            <Select TItem="BomberoViweModel"
                                     TItemValue="int"
                                     DataSource="@bomberoTodos"
                                     @bind-Value="@QuienLLenoPlanilla"
                                     LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                     ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                     Placeholder="Seleccione un bombero"
                                     DefaultActiveFirstOption="false"
                                     AllowClear="true"
                                     EnableSearch>
                            </Select>
                        </div>
                    </div>
                </div>
            }
            else if (current == 5)
            {
                <div class="slick-contenedor @animationClass">
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de servicio</label>
                            <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@modelMateriales.TipoServicio" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de material</label>
                            <EnumSelect TEnum="TipoMaterialPeligroso" @bind-Value="@modelMateriales.Tipo" />
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Sustancias</label>
                            <Input @bind-Value="modelMateriales.Sustancias" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo evacuacion</label>
                            <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@modelMateriales.Evacuacion" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Acciones sobre materiales</label>
                        <Select Mode="tags"
                                Placeholder="Seleccione acciones"
                                @bind-Values="@_selectedValues"
                                TItemValue="string"
                                TItem="string"
                                OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                                EnableSearch>
                            <SelectOptions>
                                @foreach (var item in _items)
                                {
                                    <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                                }
                            </SelectOptions>
                        </Select>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Detalles de acciones</label>
                        <Input @bind-Value="modelMateriales.DetallesAccionesMateriales" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Acciones sobre personas</label>
                        <div class="inpt-cont" style="flex-direction: row;flex-wrap: wrap;">
                            <Select Mode="tags"
                                    Placeholder="Seleccione acciones"
                                    @bind-Values="@_selectedValues2"
                                    TItemValue="string"
                                    TItem="string"
                                    OnSelectedItemsChanged="OnSelectedItemsChangedHandler2"
                                    EnableSearch>
                                <SelectOptions>
                                    @foreach (var item in _items2)
                                    {
                                        <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                                    }
                                </SelectOptions>
                            </Select>
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de superficie</label>
                            <EnumSelect TEnum="TipoSuperficie" @bind-Value="@modelMateriales.TipoSuperficie" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de evacuacion</label>
                            <EnumSelect TEnum="TipoSituacionExplosion" @bind-Value="@modelMateriales.TipoSituacion" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Detalles de surpeficie afectada</label>
                        <Input @bind-Value="modelMateriales.DetalleSuperficieAfectada" />
                    </div>
                </div>
            }
        </Form>
    </div>
    <div class="steps-action">
        @if (current > 0)
        {
            <Button Type="primary" OnClick="OnPreClick">Anterior</Button>
        }
        @if (current < steps.Length - 1)
        {
            <Button Type="primary" OnClick="OnNextClick">Siguiente</Button>
        }
        @if (current == steps.Length - 1)
        {
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Cargar salida
            </Button>
        }
    </div>
</div>

@code
{
    public int current { get; set; } = 0;
    bool loading = false;
    bool _visible { get; set; } = true;
    bool desactivarSwitch { get; set; }
    bool visibleDamnificados = true;
    bool visibleVerDamnificados;
    private string animationClass = "";

    BomberosDbContext Context { get; set; }
    private DamnificadoViewModels damnificado = new();
    private MaterialPeligrosoViewModels modelMateriales = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    private Form<MovilSalidaViewModels>? _form1;
    public List<BomberoViweModel> bomberoChoferes = new();
    Movil[]? Moviles;

    bool switchValue { get; set; }
    bool switchMoviles { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }

    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;

    public async Task AgregarDamnificado()
    {
        visibleDamnificados = false;
        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,
            };
        DamnificadosSalida.Add(dp);
        StateHasChanged();
    }

    public async Task AgregarMovilSalida()
    {
        Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await Context.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                KmLlegada = modelMateriales.KmLlegada,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,
            };
        MovilesSalidasL.Add(m);
        desactivarSwitch = false;
        switchMoviles = false;
        StateHasChanged();
    }

    public async Task AgregarCuerpoParticipante()
    {
        var boberos = await Context.Bomberos.ToArrayAsync();
        foreach (var bom in boberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                    {
                        Salio = bomberoSalidaView.Salio,
                        Nombre = bom.Nombre,
                        Apellido = bom.Apellido,
                        NumeroLegajo = BomberoCuerpo
                    };
                bomberosSalida.Add(b);
            }
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        _model = new MaterialPeligrosoViewModels();
        _items = new List<string>();
        _items2 = new List<string>();


        var properties = typeof(MaterialPeligrosoViewModels).GetProperties();
        var propertiesToShow = new List<string> { "Controlada", "Venteo", "DilucionDeVapores", "Neutralizacion", "Trasvase", "OtraAccionesMateriales" };//En caso que se agrege nuevos datos a la lista, se debera agregar el guardado de la variable, lo mismo con la lista de la siguiente linea
        var propertiesToShow2 = new List<string> { "Descontaminacion", "Confinamiento", "SinAccion", "OtraAccionesPersonas" };

        foreach (var prop in properties)
        {
            if (propertiesToShow.Contains(prop.Name))
            {
                _items.Add(prop.Name);
            }
            if (propertiesToShow2.Contains(prop.Name))
            {
                _items2.Add(prop.Name);
            }
        }
        modelMateriales = new();
        Context = DbFactory.CreateDbContext();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }

    public async Task Cargarmaterial()
    {
        
    }

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == BomberoReceptor);
            Bombero? bomberoEncargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == BomberoEncargado);
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == QuienLLenoPlanilla);

            MaterialPeligroso materiales = new()
                {
                    NumeroParte = modelMateriales.NumeroParte,
                    HoraSalida = modelMateriales.HoraSalida,
                    HoraLlegada = modelMateriales.HoraLLegada,
                    Descripcion = modelMateriales.Descripcion,
                    CalleORuta = modelMateriales.CalleORuta,
                    NumeroOKilometro = modelMateriales.NumeroOKilometro,
                    EntreCalles = modelMateriales.EntreCalles,
                    PisoNumero = modelMateriales.PisoNumero,
                    Depto = modelMateriales.Depto,
                    NombreYApellidoReceptor = modelMateriales.NombreYApellidoReceptor,
                    TelefonoReceptor = modelMateriales.TelefonoReceptor,
                    TipoZona = modelMateriales.TipoZona,
                    NombreSolicitante = modelMateriales.NombreSolicitante,
                    ApellidoSolicitante = modelMateriales.ApellidoSolicitante,
                    DniSolicitante = modelMateriales.DniSolicitante,
                    TelefonoSolicitante = modelMateriales.TelefonoSolicitante,
                    TipoServicio = modelMateriales.TipoServicio,
                    //carga propio de materiales peligrosos
                    Tipo = modelMateriales.Tipo,
                    Sustancias = modelMateriales.Sustancias,
                    Controlada = modelMateriales.Controlada,
                    Venteo = modelMateriales.Venteo,
                    DilucionDeVapores = modelMateriales.DilucionDeVapores,
                    Neutralizacion = modelMateriales.Neutralizacion,
                    Trasvase = modelMateriales.Trasvase,
                    OtraAccionesMateriales = modelMateriales.OtraAccionesMateriales,
                    DetallesAccionesMateriales = modelMateriales.DetallesAccionesMateriales,
                    Evacuacion = modelMateriales.Evacuacion,
                    Descontaminacion = modelMateriales.Descontaminacion,
                    Confinamiento = modelMateriales.Confinamiento,
                    SinAccion = modelMateriales.SinAccion,
                    OtraAccionesPersonas = modelMateriales.OtraAccionesPersonas,
                    TipoSuperficie = modelMateriales.TipoSuperficie,
                    DetalleSuperficieAfectada = modelMateriales.DetalleSuperficieAfectada,
                    TipoSituacion = modelMateriales.TipoSituacion,
                    QuienLleno = BomberoLlenoPlanilla,
                    ReceptorBombero = bomberoReceptor,
                    Encargado = bomberoEncargado,
                    Seguro = new()
                    {
                        CompañiaAseguradora = modelMateriales.CompaniaAseguradora,
                        NumeroDePoliza = modelMateriales.NumeroPoliza,
                        FechaDeVencimineto = modelMateriales.FechaVencimineto,
                    },
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new(),
                };
            var m_items = _selectedValues.ToList();
            var m_items2 = _selectedValues2.ToList();
            for (int i = 0; i < m_items.Count; i++)
            {
                if (m_items[i] == "Controlada")
                {
                    materiales.Controlada = true;
                }
                if (m_items[i] == "Venteo")
                {
                    materiales.Venteo = true;
                }
                if (m_items[i] == "DilucionDeVapores")
                {
                    materiales.DilucionDeVapores = true;
                }
                if (m_items[i] == "Neutralizacion")
                {
                    materiales.Neutralizacion = true;
                }
                if (m_items[i] == "Trasvase")
                {
                    materiales.Trasvase = true;
                }
                if (m_items[i] == "OtraAccionesMateriales")
                {
                    materiales.OtraAccionesMateriales = true;
                }
            }
            for (int i = 0; i < m_items2.Count; i++)
            {
                if (m_items2[i] == "Descontaminacion")
                {
                    materiales.Descontaminacion = true;
                }
                if (m_items2[i] == "Confinamiento")
                {
                    materiales.Confinamiento = true;
                }
                if (m_items2[i] == "SinAccion")
                {
                    materiales.SinAccion = true;
                }
                if (m_items2[i] == "OtraAccionesPersonas")
                {
                    materiales.OtraAccionesPersonas = true;
                }
            }
            foreach (BomberoSalidaViewModels bom in bomberosSalida)
            {
                Bombero? bomberoSalida = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == bom.NumeroLegajo);
                BomberoSalida BomSalida = new()
                    {
                        Salio = bom.Salio,
                        Bombero = bomberoSalida,
                        Grado = bomberoSalida.Grado
                    };
                materiales.CuerpoParticipante.Add(BomSalida);
            }

            foreach (MovilSalidaViewModels m in MovilesSalidasL)
            {
                Bombero? bomberoChofer = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
                Movil? Movilsalida = await Context.Moviles.SingleOrDefaultAsync(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil);

                if (Movilsalida is not null)
                {
                    Movilsalida.Kilometraje = m.KmLlegada;
                }

                MovilSalida movilS = new()
                    {
                        CargoCombustible = m.CargoCombustible,
                        NumeroFactura = movilSalidaViewModels.NumeroFactura,
                        FechaFactura = movilSalidaViewModels.FechaFactura,
                        TipoConbustible = movilSalidaViewModels.TipoConbustible,
                        CantidadLitros = movilSalidaViewModels.CantidadLitros,
                        QuienLleno = movilSalidaViewModels.QuienLleno,
                        TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                        KmLlegada = m.KmLlegada,
                        Chofer = bomberoChofer,
                        Movil = Movilsalida
                    };
                materiales.Moviles.Add(movilS);
            }

            foreach (DamnificadoViewModels d in DamnificadosSalida)
            {
                Damnificado damn = new()
                    {
                        Nombre = d.Nombre,
                        Apellido = d.Apellido,
                        Dni = d.Dni,
                        Sexo = d.Sexo,
                        LugarDeNacimiento = d.LugarDeNacimiento,
                        Edad = d.Edad,
                        Estado = d.Estado
                    };
                materiales.Damnificados.Add(damn);
            }

            Context.MaterialesPeligrosos.Add(materiales);
            await Context.SaveChangesAsync();
            await Init();
            StateHasChanged();
            await message.Success("Salida agregada correctamente");
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelMateriales)}");
    }

    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }

    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }

    // array de las opciones posibles, buscar la opcion y agregarla en la planilla
    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    Dotacion = b.Dotacion,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                };
            bomberoTodos.Add(bombero);
        }

        foreach (Bombero c in bomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        Dotacion = c.Dotacion,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                    };
                bomberoChoferes.Add(bomberoChofer);
            }
        }
    }

    //Steps

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}  /* Materiales */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    //Modal

    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }

    void toggle(bool value) => loading = value;

    // private void ShowModal()
    // {
    //     _visible = true;
    // }
    private void HandleCancelMovil(MouseEventArgs e)
    {
        switchMoviles = false;
        desactivarSwitch = false;
    }

    private void HandleOk(MouseEventArgs e)
    {
        _visible = false;
        desactivarSwitch = true;
    }
    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
        desactivarSwitch = true;
    }

    private void HandleOkD(MouseEventArgs e)
    {
        visibleDamnificados = false;
    }
    private void HandleCancelD(MouseEventArgs e)
    {
        visibleDamnificados = false;
    }

    private void HandleCancelVD(MouseEventArgs e)
    {
        visibleVerDamnificados = false;
    }

    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }

    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }

    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

    //probando selects multiples para reemplazar los checkboxs
    MaterialPeligrosoViewModels _model;

    List<string> _items;
    List<string> _items2;
    IEnumerable<string> _selectedValues = Enumerable.Empty<string>();
    IEnumerable<string> _selectedValues2 = Enumerable.Empty<string>();

    private async void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }

    private async void OnSelectedItemsChangedHandler2(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }


}