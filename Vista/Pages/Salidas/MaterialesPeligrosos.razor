@implements IDisposable
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@page "/salidas/materiales-peligrosos"
@using Vista.Data.ViewModels.MaterialesPeligrosos;

@*Servicio Utilizados*@
@using Vista.Services;
@inject IBomberoService BomberoService
@inject ISalidaService SalidaService;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    /* Oculta los puntos de navegación del carrusel */
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    /* Elimina el padding en los elementos del formulario */
    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    /* Establece un diseño de flex para el segundo elemento de la fila del formulario */
    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    /* Ajusta el ancho del input number */
    .ant-input-number {
        width: auto !important;
    }

    /* Estilo para el contenedor de pasos */
    .steps-content {
        margin-top: 10px !important;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    /* Estilo para la acción de pasos */
    .steps-action {
        margin-top: 10px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }



    /* Estilo para el contenedor de entrada */
    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    /* Estilo para el contenedor de entrada en línea */
    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    /* Estilo para la etiqueta de entrada */
    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    /* Alinea el texto en el centro de las celdas de la tabla */
    .ant-table-cell {
        text-align: center !important;
    }

    /* Estilos responsivos para pantallas pequeñas */
    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflow: auto !important;
        }
    }

    /* Estilo para el botón */
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border-radius: 5px 5px !important;
    }

    .ant-btn:hover, .ant-btn:focus, .ant-btn:active {
        text-decoration: none;
        background: #40a9ff !important;
    }

    .ant-btn:hover, .ant-btn:focus {
        color: white !important;
        border-color: #40a9ff !important;
        background: #40a9ff !important;
    }

    .ant-checkbox-input:checked + .ant-checkbox-inner {
        background-color: #4CAF50 !important;
        border-color: #4CAF50 !important;
    }

</style>

<Form Model="@modelMateriales"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">


            @if (current == 0)
            {
                @*General*@
                <DatosGenerales Model="@modelMateriales"
                                animationClass="@animationClass" />
            }
            else if (current == 1)
            {
                @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@modelMateriales"
                               animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                @*Seguro*@
                <Seguro Model="@modelMateriales"
                        animationClass="@animationClass"
                        EsObligatorio="false" />
            }
            else if (current == 3)
            {
                @*Chofer y Moviles*@
                <Vehiculos Model="@modelMateriales"
                           animationClass="@animationClass" />
            }
            else if (current == 4)
            {
                @*Bomberos*@
                <Personal Model="@modelMateriales"
                          animationClass="@animationClass" />
            }
            else if (current == 5)
            {
                <h6>Datos Generales</h6>
                <br>
                <div class="slick-contenedor @animationClass">
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de servicio</label>
                            <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@modelMateriales.TipoServicio" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de material</label>
                            <EnumSelect TEnum="TipoMaterialPeligroso" @bind-Value="@modelMateriales.Tipo" />
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Sustancias</label>
                            <Input @bind-Value="modelMateriales.Sustancias" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo evacuación</label>
                            <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@modelMateriales.Evacuacion" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Acciones sobre materiales</label>
                        <Select Mode="tags"
                                Placeholder="Seleccione acciones"
                                @bind-Values="@_selectedValues"
                                TItemValue="string"
                                TItem="string"
                                OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                                EnableSearch>
                            <SelectOptions>
                                @foreach (var item in _items)
                                {
                                    <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                                }
                            </SelectOptions>
                        </Select>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Detalles de acciones</label>
                        <Input @bind-Value="modelMateriales.DetallesAccionesMateriales" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Acciones sobre personas</label>
                        <div class="inpt-cont" style="flex-direction: row;flex-wrap: wrap;">
                            <Select Mode="tags"
                                    Placeholder="Seleccione acciones"
                                    @bind-Values="@_selectedValues2"
                                    TItemValue="string"
                                    TItem="string"
                                    OnSelectedItemsChanged="OnSelectedItemsChangedHandler2"
                                    EnableSearch>
                                <SelectOptions>
                                    @foreach (var item in _items2)
                                    {
                                        <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                                    }
                                </SelectOptions>
                            </Select>
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de superficie</label>
                            <EnumSelect TEnum="TipoSuperficie" @bind-Value="@modelMateriales.TipoSuperficie" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Tipo de evacuación</label>
                            <EnumSelect TEnum="TipoSituacionExplosion" @bind-Value="@modelMateriales.TipoSituacion" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Detalles de surpeficie afectada</label>
                        <Input @bind-Value="modelMateriales.DetalleSuperficieAfectada" />
                    </div>
                </div>
            }
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code
{
    //Variables de la Impresion
    private bool _visible1;
    private int ImprimirNumeroParte;


    public int current { get; set; } = 0;
    bool loading = false;

    bool desactivarSwitch { get; set; }
    bool visibleDamnificados = true;
    bool visibleVerDamnificados;
    private string animationClass = "";

    BomberosDbContext Context { get; set; }
    private DamnificadoViewModels damnificado = new();
    private MaterialPeligrosoViewModels modelMateriales = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    private Form<MovilSalidaViewModels>? _form1;
    public List<BomberoViweModel> bomberoChoferes = new();
    Movil[]? Moviles;

    bool switchValue { get; set; }
    bool switchMoviles { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }

    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;


    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        _model = new MaterialPeligrosoViewModels();
        _items = new List<string>();
        _items2 = new List<string>();


        var properties = typeof(MaterialPeligrosoViewModels).GetProperties();
        var propertiesToShow = new List<string> { "Controlada", "Venteo", "DilucionDeVapores", "Neutralizacion", "Trasvase", "OtraAccionesMateriales" };//En caso que se agrege nuevos datos a la lista, se debera agregar el guardado de la variable, lo mismo con la lista de la siguiente linea
        var propertiesToShow2 = new List<string> { "Descontaminacion", "Confinamiento", "SinAccion", "OtraAccionesPersonas" };

        foreach (var prop in properties)
        {
            if (propertiesToShow.Contains(prop.Name))
            {
                _items.Add(prop.Name);
            }
            if (propertiesToShow2.Contains(prop.Name))
            {
                _items2.Add(prop.Name);
            }
        }
        modelMateriales = new();
        Context = DbFactory.CreateDbContext();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
    }

    //Metodos Nuevos Relacionados a la Impresion:
    void HandleOk1(int _numeroParte)
    {
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoEncargado = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(modelMateriales.LegajoEncargado);
            Bombero? BomberoLlenoPlanilla = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(modelMateriales.LegajoLLenoPlanilla);
            Vista.Data.Models.Salidas.Planillas.MaterialPeligroso? numeroParte = await Context.MaterialesPeligrosos.Where(m => m.NumeroParte == modelMateriales.NumeroParte).SingleOrDefaultAsync();
            if (numeroParte != null)
            {
                message.Warning("Numero parte ya existente.");
                return;
            }

            MaterialPeligroso materiales = new()
                {
                    //Datos generales de las Salidas
                    NumeroParte = modelMateriales.NumeroParte,
                    AnioNumeroParte = modelMateriales.AnioNumeroParte,
                    HoraSalida = modelMateriales.HoraSalida,
                    HoraLlegada = modelMateriales.HoraLLegada,
                    Descripcion = modelMateriales.Descripcion,
                    CalleORuta = modelMateriales.CalleORuta,
                    NumeroOKilometro = modelMateriales.NumeroOKilometro,
                    EntreCalles = modelMateriales.EntreCalles,
                    PisoNumero = modelMateriales.PisoNumero,
                    Depto = modelMateriales.Depto,
                    NombreYApellidoReceptor = modelMateriales.NombreYApellidoReceptor,
                    TipoZona = modelMateriales.TipoZona,
                    NombreSolicitante = modelMateriales.NombreSolicitante,
                    ApellidoSolicitante = modelMateriales.ApellidoSolicitante,
                    DniSolicitante = modelMateriales.DniSolicitante,
                    TelefonoSolicitante = modelMateriales.TelefonoSolicitante,
                    TipoServicio = modelMateriales.TipoServicio,
                    //Carga de datos propios de la salida materiales peligrosos
                    Tipo = modelMateriales.Tipo,
                    Sustancias = modelMateriales.Sustancias,
                    Controlada = modelMateriales.Controlada,
                    Venteo = modelMateriales.Venteo,
                    DilucionDeVapores = modelMateriales.DilucionDeVapores,
                    Neutralizacion = modelMateriales.Neutralizacion,
                    Trasvase = modelMateriales.Trasvase,
                    OtraAccionesMateriales = modelMateriales.OtraAccionesMateriales,
                    DetallesAccionesMateriales = modelMateriales.DetallesAccionesMateriales,
                    Evacuacion = modelMateriales.Evacuacion,
                    Descontaminacion = modelMateriales.Descontaminacion,
                    Confinamiento = modelMateriales.Confinamiento,
                    SinAccion = modelMateriales.SinAccion,
                    OtraAccionesPersonas = modelMateriales.OtraAccionesPersonas,
                    TipoSuperficie = modelMateriales.TipoSuperficie,
                    DetalleSuperficieAfectada = modelMateriales.DetalleSuperficieAfectada,
                    TipoSituacion = modelMateriales.TipoSituacion,
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = bomberoEncargado,
                    Seguro = new()
                    {
                        CompañiaAseguradora = modelMateriales.CompaniaAseguradora,
                        NumeroDePoliza = modelMateriales.NumeroPoliza,
                        FechaDeVencimineto = modelMateriales.FechaVencimineto,
                    },
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new(),
                };
            var m_items = _selectedValues.ToList();
            var m_items2 = _selectedValues2.ToList();
            for (int i = 0; i < m_items.Count; i++)
            {
                if (m_items[i] == "Controlada")
                {
                    materiales.Controlada = true;
                }
                if (m_items[i] == "Venteo")
                {
                    materiales.Venteo = true;
                }
                if (m_items[i] == "DilucionDeVapores")
                {
                    materiales.DilucionDeVapores = true;
                }
                if (m_items[i] == "Neutralizacion")
                {
                    materiales.Neutralizacion = true;
                }
                if (m_items[i] == "Trasvase")
                {
                    materiales.Trasvase = true;
                }
                if (m_items[i] == "OtraAccionesMateriales")
                {
                    materiales.OtraAccionesMateriales = true;
                }
            }
            for (int i = 0; i < m_items2.Count; i++)
            {
                if (m_items2[i] == "Descontaminacion")
                {
                    materiales.Descontaminacion = true;
                }
                if (m_items2[i] == "Confinamiento")
                {
                    materiales.Confinamiento = true;
                }
                if (m_items2[i] == "SinAccion")
                {
                    materiales.SinAccion = true;
                }
                if (m_items2[i] == "OtraAccionesPersonas")
                {
                    materiales.OtraAccionesPersonas = true;
                }
            }

            //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
            if (modelMateriales.CuerpoParticipante != null && modelMateriales.CuerpoParticipante.Any())
            {
                materiales.CuerpoParticipante = modelMateriales.CuerpoParticipante.ToList();
            }

            //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
            if (modelMateriales.Moviles != null && modelMateriales.Moviles.Any())
            {
                materiales.Moviles = modelMateriales.Moviles.ToList();
            }

            //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
            if (modelMateriales.Damnificados != null && modelMateriales.Damnificados.Any())
            {
                materiales.Damnificados = modelMateriales.Damnificados.ToList();
            }

            await SalidaService.CargarSalida(materiales);
            HandleOk1(materiales.NumeroParte);
            await Init();
            StateHasChanged();
        }
        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
        Console.WriteLine($"Success:{JsonSerializer.Serialize(modelMateriales)}");
    }


    // OnFinishFailed

    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }


    private void OnFinishFailed(EditContext editContext)
    {
        message.Error("Error al cargar, posible información ausente");
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelMateriales)}");
    }

    @*"Delete" y Dispose*@

    public void Dispose()
    {
        Context?.Dispose();
    }

    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }

    //Steps

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}  /* Materiales */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }


    MaterialPeligrosoViewModels _model;

    List<string> _items;
    List<string> _items2;
    IEnumerable<string> _selectedValues = Enumerable.Empty<string>();
    IEnumerable<string> _selectedValues2 = Enumerable.Empty<string>();

    private async void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }

    private async void OnSelectedItemsChangedHandler2(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }
}