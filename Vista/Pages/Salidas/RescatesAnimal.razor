@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/rescates-animal"

@using Vista.Data.ViewModels.Personal;
@using Vista.Data.ViewModels.Rescates;

@*Servicios Utilizados*@
@using Vista.Services;
@inject ISalidaService SalidaService
@inject IBomberoService BomberoService

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border-radius: 5px 5px !important;
    }

    .steps-action {
        margin-top: 10px !important;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
        margin-left: 254px;
    }

    .ant-btn:hover, .ant-btn:focus, .ant-btn:active {
        text-decoration: none;
        background: #40a9ff !important;
    }

    .ant-btn:hover, .ant-btn:focus {
        color: white !important;
        border-color: #40a9ff !important;
        background: #40a9ff !important;
    }

    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflow: auto !important;
        }
    }

    .ant-checkbox-input:checked + .ant-checkbox-inner {
        background-color: #4CAF50 !important;
        border-color: #4CAF50 !important;
    }
</style>

<Form Model="@AnimalViewModel"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">

    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">

        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>

        <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
            @if (current == 0)
            {
                @*General*@
                <DatosGenerales Model="@AnimalViewModel"
                                animationClass="@animationClass" />
            }
            else if (current == 1)
            {
                @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@AnimalViewModel"
                               animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                @*Chofer y Moviles*@
                <Vehiculos Model="@AnimalViewModel"
                           animationClass="@animationClass" />
            }
            else if (current == 3)
            {
                @*Bomberos*@
                <Personal Model="@AnimalViewModel"
                          animationClass="@animationClass" />
            }
            else if (current == 4)
            {
                @*Tipo servicio*@
                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Tipo Servicio Salida</label>
                    <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@AnimalViewModel.TipoServicio" />
                </div>

                @*Propio de rescates*@
                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Tipo Lugar de Rescate</label>
                    <EnumSelect TEnum="TipoRescateAnimal" @bind-Value="@AnimalViewModel.TipoRescateAnimal" />
                </div>
            }
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {
    BomberosDbContext? Context;
    private RescateAnimaViewModels AnimalViewModel = new();

    @*Steps*@

    public int current { get; set; } = 0;//Ubicacion del Step
    private string animationClass = "";

    public class StepItem
    {
        public string? Title { get; set; }
        public string? Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Solicitante / Receptor / Damnificado */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}  /* Salida */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    @*Carga de Salida*@

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoEncargado = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(AnimalViewModel.LegajoEncargado);
            Bombero? BomberoLlenoPlanilla = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(AnimalViewModel.LegajoLLenoPlanilla);

            // Utiliza el null-conditional operator para evitar warnings
            Vista.Data.Models.Salidas.Planillas.RescateAnimal? numeroParte = await (Context?.RescateAnimales
                .Where(m => m.NumeroParte == AnimalViewModel.NumeroParte)
                .SingleOrDefaultAsync() ?? Task.FromResult<Vista.Data.Models.Salidas.Planillas.RescateAnimal?>(null));

            if (numeroParte != null)
            {
                await message.Warning("Numero parte ya existente.");
                return;
            }

            RescateAnimal Rescates = new()
                {

                    NumeroParte = AnimalViewModel.NumeroParte,
                    AnioNumeroParte = AnimalViewModel.AnioNumeroParte,
                    HoraSalida = AnimalViewModel.HoraSalida,
                    HoraLlegada = AnimalViewModel.HoraLLegada,
                    Descripcion = AnimalViewModel.Descripcion,
                    CalleORuta = AnimalViewModel.CalleORuta,
                    NumeroOKilometro = AnimalViewModel.NumeroOKilometro,
                    EntreCalles = AnimalViewModel.EntreCalles,
                    PisoNumero = AnimalViewModel.PisoNumero,
                    Depto = AnimalViewModel.Depto,
                    NombreYApellidoReceptor = AnimalViewModel.NombreYApellidoReceptor,
                    TipoZona = AnimalViewModel.TipoZona,
                    NombreSolicitante = AnimalViewModel.NombreSolicitante,
                    ApellidoSolicitante = AnimalViewModel.ApellidoSolicitante,
                    DniSolicitante = AnimalViewModel.DniSolicitante,
                    TelefonoSolicitante = AnimalViewModel.TelefonoSolicitante,
                    TipoServicio = AnimalViewModel.TipoServicio,
                    TipoRescateAnimal = AnimalViewModel.TipoRescateAnimal,
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = bomberoEncargado,

                    //Seguro = new() <--- Averiguar si hay que implementar la opción de seguro en esta Salida
                    //{
                    //    CompañiaAseguradora = AnimalViewModel.CompaniaAseguradora,
                    //    NumeroDePoliza = AnimalViewModel.NumeroPoliza,
                    //    FechaDeVencimineto = AnimalViewModel.FechaVencimineto,
                    //},

                    //Iniciación de Listas
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()

                };

            //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
            if (AnimalViewModel.CuerpoParticipante != null && AnimalViewModel.CuerpoParticipante.Any())
            {
                Rescates.CuerpoParticipante = AnimalViewModel.CuerpoParticipante.ToList();
            }

            //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
            if (AnimalViewModel.Moviles != null && AnimalViewModel.Moviles.Any())
            {
                Rescates.Moviles = AnimalViewModel.Moviles.ToList();
            }

            //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
            if (AnimalViewModel.Damnificados != null && AnimalViewModel.Damnificados.Any())
            {
                Rescates.Damnificados = AnimalViewModel.Damnificados.ToList();
            }

            await SalidaService.CargarSalida(Rescates);
            HandleOk1(Rescates.AnioNumeroParte, Rescates.NumeroParte);
            Init();
            StateHasChanged();
        }
        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }

        Console.WriteLine($"Success:{JsonSerializer.Serialize(AnimalViewModel)}");
    }

    @*Inicio*@
    protected override void OnInitialized()
    {
        Init();
    }

    private void Init()
    {
        AnimalViewModel = new();
        Context = DbFactory.CreateDbContext();
    }

    @*Finish Failed*@
    private void OnFinishFailed(EditContext editContext)
    {
        message.Error("Error al cargar, posible información ausente");
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(AnimalViewModel)}");
    }

    @*Impresión*@
    bool _visible1;

    public int ImprimirAnio;
    public int ImprimirNumeroParte;
    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    @*Dispose*@
    public void Dispose()
    {
        Context?.Dispose();
    }
}
