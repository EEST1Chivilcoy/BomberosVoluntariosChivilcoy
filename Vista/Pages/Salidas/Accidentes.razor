@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/accidentes"
@using Vista.Data.ViewModels.Accidente;
@using Vista.Pages.PlanillasIntervencion;

@*Componentes Generales*@
@using Vista.Pages.Salidas.ComponentesSalida;

<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }
</style>

<div class="contenedor" style="max-width: 100%;margin-top: 2em;">
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>

    <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
        <Form Model="@accidenteViewModels"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              Style="width: 100%;height: 100%;overflow: hidden!important;">
            @if (current == 0)
            {
                @*General*@

                <DatosGenerales Model="@accidenteViewModels"
                                OnChange="@OnChange"
                                animationClass="@animationClass" />
            }
            else if (current == 1)
            {// Solicitante - Receptor . Damnificado
                <div class="slick-contenedor @animationClass">
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Nombre del Solicitante</label>
                            <Input @bind-Value="@accidenteViewModels.NombreSolicitante" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Apellido del Solicitante</label>
                            <Input @bind-Value="@accidenteViewModels.ApellidoSolicitante" />
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">DNI del Solicitante</label>
                            <Input @bind-Value="@accidenteViewModels.DniSolicitante" />
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Teléfono del Solicitante</label>
                            <Input @bind-Value="@accidenteViewModels.TelefonoSolicitante" />
                        </div>
                    </div>
                    @*Datos del receptor*@
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Nombre y Apellido del Receptor</label>
                            <Input @bind-Value="@accidenteViewModels.NombreYApellidoReceptor" />
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Teléfono del Receptor</label>
                            <Input @bind-Value="@accidenteViewModels.TelefonoReceptor" />
                        </div>
                    </div>
                    <h6>Datos de damnificados</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 80px;">
                            <label class="inpt-cont--lbl">¿Hubo damnificados?</label>
                            <Switch @bind-Checked="switchValue" Style="width: 10px!important;" />
                        </div>
                        @if (switchValue == true)
                        {
                            <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 90px;">
                                <label class="inpt-cont--lbl">Agregar otro</label>
                                <Button OnClick="()=>visibleDamnificados = true">
                                    <i class="fa-solid fa-user-plus"></i>
                                </Button>
                            </div>
                            <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 90px;">
                                <label class="inpt-cont--lbl">Ver damnificados</label>
                                <Button OnClick="()=>visibleVerDamnificados = true">
                                    <i class="fa-solid fa-users-gear"></i>
                                </Button>
                            </div>
                        }
                    </div>

                    <Modal Footer="null" Title="@("Damnificados")"
                           Visible="@visibleVerDamnificados"
                           OnOk="@HandleOkD"
                           OnCancel="@HandleCancelVD">
                        <div class="inpt-cont">
                            <Table Context="Damnificados" DataSource="DamnificadosSalida" Bordered>
                                <PropertyColumn Property="d=>d.NombreYApellido"></PropertyColumn>
                                <PropertyColumn Property="d=>d.Edad"></PropertyColumn>
                                <PropertyColumn Property="d=>d.Estado"></PropertyColumn>
                                <ActionColumn Title="Acciones">
                                    <Popconfirm Title="¿Quieres borrar este damnificado?"
                                                OnConfirm="()=> deleteRowDamnificados(Damnificados.Dni)"
                                                OkText="Si"
                                                CancelText="No"
                                                Style="display: flex;justify-content: center;align-items: center;">
                                        <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                    </Popconfirm>
                                </ActionColumn>
                            </Table>
                        </div>
                    </Modal>
                    <div>
                        @if (switchValue == true)
                        {
                            <Modal Footer="null" Title="@("Datos del damnificado")"
                                   Visible="@visibleDamnificados"
                                   OnOk="@HandleOkD"
                                   OnCancel="@HandleCancelD">
                                <div class="inpt-cont-inline">
                                    <div class="inpt-cont">
                                        <label class="inpt-cont--lbl">Marca</label>
                                        <Input @bind-Value="@vehiculo.Marca" />
                                    </div>
                                    <div class="inpt-cont">
                                        <label class="inpt-cont--lbl">Modelo</label>
                                        <Input @bind-Value="@vehiculo.Modelo" />
                                    </div>
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Año</label>
                                    <Input @bind-Value="@vehiculo.Año" />
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Patente</label>
                                    <Input @bind-Value="@vehiculo.Patente" />
                                </div>
                                <div class="inpt-cont-inline">
                                    <div class="inpt-cont">
                                        <label class="inpt-cont--lbl">Tipo</label>
                                        <Input @bind-Value="@vehiculo.Tipo" />
                                    </div>
                                    <div class="inpt-cont">
                                        <label class="inpt-cont--lbl">Color</label>
                                        <Input @bind-Value="@vehiculo.Color" />
                                    </div>
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Compañía Aseguradora</label>
                                    <Input @bind-Value="@vehiculo.CompañiaAseguradora" />
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Numero de Poliza</label>
                                    <Input @bind-Value="@vehiculo.NumeroDePoliza" />
                                </div>
                                <div class="inpt-cont">
                                    <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@vehiculo.FechaDeVencimineto" />
                                    <Checkbox @bind-Checked="chek"> Airbag</Checkbox>
                                </div>
                                <div class="inpt-cont">
                                    <Button Class="boton_p" OnClick="@AgregarDamnificado">Agregar damnificado</Button>
                                </div>
                            </Modal>
                        }
                    </div>

                </div>
            }
            else if (current == 2)
            {//Chofer y Movil
                <div class="slick-contenedor @animationClass">
                    <h6>Datos del chofer</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Elija el chofer</label>
                            <Select TItem="BomberoViweModel"
                                    TItemValue="int"
                                    DataSource="@bomberoChoferes"
                                    @bind-Value="@chofer"
                                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                    Placeholder="Selecione a un bombero"
                                    DefaultActiveFirstOption="false"
                                    AllowClear="true"
                                    EnableSearch>
                            </Select>
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Numero de movil</label>
                            <Select TItem="Movil"
                                    TItemValue="string"
                                    DataSource="@Moviles"
                                    @bind-Value="@NumeroMovil"
                                    LabelName="@nameof(Movil.NumeroMovil)"
                                    ValueName="@nameof(Movil.NumeroMovil)"
                                    Placeholder="Selecione el movil"
                                    DefaultActiveFirstOption="false"
                                    AllowClear="true"
                                    EnableSearch>
                            </Select>
                        </div>
                    </div>
                    @if (NumeroMovil is not null)
                    {
                        foreach (Movil m in Moviles)
                        {
                            if (m.NumeroMovil == NumeroMovil)
                            {
                                if (m.NumeroMovil == NumeroMovil)
                                {
                                    accidenteViewModels.Kilometraje = m.Kilometraje;
                                    break;
                                }

                                accidenteViewModels.Kilometraje = m.Kilometraje;
                                break;
                            }
                        }
                    }
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Kilometro de salida</label>
                            <AntDesign.InputNumber @bind-Value="accidenteViewModels.Kilometraje" Disabled />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Kilometro de llegada</label>
                            <AntDesign.InputNumber @bind-Value="accidenteViewModels.KmLlegada" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">¿Cargo combustible?</label>
                        <Switch @bind-Checked="switchMoviles" Disabled="@desactivarSwitch" Style="width: 10px!important;" />
                        @if (switchMoviles == true)
                        {
                            <Modal Title="@("Datos de la carga de combustible")"
                                   Visible="@_visible"
                                   OnOk="@HandleOk"
                                   OnCancel="@HandleCancelMovil">
                                <Form Loading="loading" Model="@movilSalidaViewModels"
                                      LabelColSpan="8"
                                      WrapperColSpan="16"
                                      OnFinish="OnFinishModel"
                                      OnFinishFailed="OnFinishFailed"
                                      @ref="@_form1" Context="modalMoviles">
                                    <FormItem Label="Numero factura">
                                        <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
                                    </FormItem>
                                    <FormItem Label="Fecha factura">
                                        <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
                                    </FormItem>
                                    <FormItem Label="Tipo Combustible">
                                        <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
                                    </FormItem>
                                    <FormItem Label="Cantidad de Litros">
                                        <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
                                    </FormItem>
                                    <FormItem Label="Quien lleno">
                                        <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
                                    </FormItem>
                                    <FormItem Label="TelefonoQuienLleno">
                                        <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
                                    </FormItem>
                                </Form>
                            </Modal>
                        }
                    </div>
                    <div class="inpt-cont">
                        <Button OnClick="@AgregarMovilSalida">Cargar movil</Button>
                    </div>
                    @if (MovilesSalidasL is not null)
                    {
                        <div>
                            <Table Size="TableSize.Small" PageSize="4" Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
                                <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
                                <PropertyColumn Property="c=>c.ChoferNombreCompleto"></PropertyColumn>
                                <ActionColumn Title="Acciones">
                                    <Popconfirm Title="¿Quieres borrar este movil?"
                                                OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                                                OkText="Si"
                                                CancelText="No">
                                        <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                    </Popconfirm>
                                </ActionColumn>
                            </Table>
                        </div>
                    }
                </div>
            }
            else if (current == 3)
            {//Bomberos
                <div class="slick-contenedor @animationClass">
                    <h6>Cuerpo Participante</h6>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Elija el bombero</label>
                        <Select TItem="BomberoViweModel"
                                TItemValue="int"
                                DataSource="@bomberoTodos"
                                @bind-Value="@BomberoCuerpo"
                                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                Placeholder="Selecione un bombero"
                                DefaultActiveFirstOption="false"
                                AllowClear="true" EnableSearch>
                        </Select>
                    </div>
                    <div class="inpt-cont">
                        <Checkbox @bind-Checked="chekB">¿Salió?</Checkbox>
                    </div>
                    <div class="inpt-cont">
                        <Button OnClick="@AgregarCuerpoParticipante">Cargar al cuerpo participante</Button>
                    </div>
                    <div class="inpt-cont">
                        <Table Context="bomberosSalida1" Size="TableSize.Small" PageSize="4" DataSource="bomberosSalida" Bordered>
                            <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
                            <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
                            <ActionColumn Title="Acciones">
                                <Popconfirm Title="¿Quieres eliminar este bombero?"
                                            OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                                            OkText="Si"
                                            CancelText="No">
                                    <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                </Popconfirm>
                            </ActionColumn>
                        </Table>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Encargado</label>
                            <Select TItem="BomberoViweModel"
                                    TItemValue="int"
                                    DataSource="@bomberoTodos"
                                    @bind-Value="@BomberoEncargado"
                                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                    Placeholder="Seleccione  a un  bombero"
                                    DefaultActiveFirstOption="true"
                                    AllowClear="true" EnableSearch>
                            </Select>
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Lleno la planilla</label>
                            <Select TItem="BomberoViweModel"
                                    TItemValue="int"
                                    DataSource="@bomberoTodos"
                                    @bind-Value="@QuienLLenoPlanilla"
                                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                    Placeholder="Seleccione un bombero"
                                    DefaultActiveFirstOption="false"
                                    AllowClear="true"
                                    EnableSearch>
                            </Select>
                        </div>
                    </div>
                </div>
            }
            @* else if (current == 4)
            {
            <div class="slick-contenedor @animationClass">
            <div class="inpt-cont-inline">
            <div class="inpt-cont">
            <label class="inpt-cont--lbl">Tipo de servicio</label>
            <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@accidenteViewModels.TipoServicio" />
            </div>
            </div>
            <div class="inpt-cont">
            <label class="inpt-cont--lbl">Acciones sobre materiales</label>
            <Select Mode="tags"
            Placeholder="Seleccione acciones"
            @bind-Values="@_selectedValues"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
            EnableSearch>
            <SelectOptions>
            @foreach (var item in _items)
            {
            <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
            </SelectOptions>
            </Select>
            </div>
            <div class="inpt-cont">
            <label class="inpt-cont--lbl">Acciones sobre personas</label>
            <div class="inpt-cont" style="flex-direction: row;flex-wrap: wrap;">
            <Select Mode="tags"
            Placeholder="Seleccione acciones"
            @bind-Values="@_selectedValues2"
            TItemValue="string"
            TItem="string"
            OnSelectedItemsChanged="OnSelectedItemsChangedHandler2"
            EnableSearch>
            <SelectOptions>
            @foreach (var item in _items2)
            {
            <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
            }
            </SelectOptions>
            </Select>
            </div>
            </div>
            </div>
            } *@
        </Form>
    </div>
</div>
@*Cuerpos paraticipantes*@
@* <b><label>Cuerpo Participante</label></b>
        <FormItem Label="Tipo Escalafon">
            <EnumSelect TEnum="EscalafonJerarquico" @bind-Value="@bomberoSalidaView.Grado" />
        </FormItem>
        <FormItem Label="Elija el bombero">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoTodos"
                    @bind-Value="@BomberoCuerpo"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Seleccione el bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </FormItem>
        <Checkbox @bind-Checked="chekB"> Salio</Checkbox>
        <br />
        <Button OnClick="@AgregarCuerpoParticipante">Cargar cuerpo participante</Button>
        <br />
        <div>
            <Table Context="bomberosSalida1" DataSource="bomberosSalida" Bordered>
                <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
                <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
                <PropertyColumn Property="c=>c.NumeroLegajo"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                                OkText="Yes"
                                CancelText="No">
                        <a>Delete</a>
                    </Popconfirm>
                </ActionColumn>
            </Table>
        </div>
        <b><label>Elija al encargado</label></b>
        <FormItem Label="Encargado">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoTodos"
                    @bind-Value="@BomberoEncargado"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Seleccione un encargado"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </FormItem>
        <b><label>Quien lleno planilla</label></b>
        <FormItem Label="Bombero que lleno la planilla">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoTodos"
                    @bind-Value="@QuienLLenoPlanilla"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Seleccione un encargado"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </FormItem>
        @*Tipo servicio*@
@*  <FormItem Label="Tipo Servicio salida">
            <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@accidenteViewModels.TipoServicio" />
        </FormItem> *@
@*salidas rescates*@
@*  <FormItem Label="Tipo Accidente">
            <EnumSelect TEnum="TipoAccidente" @bind-Value="@accidenteViewModels.Tipo" />
        </FormItem>

        <FormItem Label="Cantidad de vheiculo">
            <AntDesign.InputNumber @bind-Value="accidenteViewModels.CantidadVheiculo" />
        </FormItem>
        <FormItem Label="Tipo Condiciones Climaticas">
            <EnumSelect TEnum="TipoCondicionesClimaticas" @bind-Value="@accidenteViewModels.CondicionesClimaticas" />
            @if (accidenteViewModels.CondicionesClimaticas == TipoCondicionesClimaticas.Otro)
            {
                <FormItem Label="Otro Abertura">
                    <Input @bind-Value="@accidenteViewModels.OtroCondicion" />
                </FormItem>
            }
        </FormItem>

        <FormItem Label="Otra condicion">
            <Input @bind-Value="@accidenteViewModels.OtroCondicion" />
        </FormItem>
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Class="boton_p" HtmlType="submit" OnClick="@CargarAccidente">
                Cargar salida
            </Button>
        </FormItem>
    </Form>
</div>
<Modal Title="@("Datos de la carga de combustible")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@movilSalidaViewModels"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinishModel"
          OnFinishFailed="OnFinishFailed"
    @ref="@_form1">
        <FormItem Label="Numero factura">
            <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
        </FormItem>
        <FormItem Label="Fecha factura">
            <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
        </FormItem>
        <FormItem Label="Tipo Combustible">
            <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
        </FormItem>
        <FormItem Label="Cantidad de Litros">
            <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
        </FormItem>
        <FormItem Label="Quien lleno">
            <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
        </FormItem>
        <FormItem Label="TelefonoQuienLleno">
            <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
        </FormItem>
    </Form>
</Modal>
*@


<div class="steps-action">
    @if (current > 0)
    {
        <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
    }
    @if (current < steps.Length - 1)
    {
        <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
    }
    @if (current == steps.Length - 1)
    {
        <Button Class="boton_p" HtmlType="submit" OnClick="ShowModal1">
            Cargar salida
        </Button>
    }
</div>

@*Despues de la Carga*@
<Modal Title="@("Success")"
       Visible="@_visible1"
       OnOk="@HandleOk1"
       OnCancel="@HandleCancel1">
    <Result Status="success"
            Title="Se cargo correctamente la salida"
            SubTitle="">
    </Result>
</Modal>

<Modal Title="@("Datos de la carga de accidente")"
       Visible="@imprimirmodal"
       OnOk="@HandleOkIMP"
       OnCancel="@HandleCancelIMP">
    <p>Imprimir con croquis</p>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{accidenteViewModels.NumeroParte}/{true}", true); })">Si</button>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{accidenteViewModels.NumeroParte}/{false}", true); })">No</button>
</Modal>

@code {

    @*Context y ViewModels*@
    BomberosDbContext Context { get; set; }
    private DamnificadoViewModels damnificado = new();
    private AccidenteViewModels accidenteViewModels = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<AccidenteViewModels> VehiculosAfectdosAcci = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    private Form<MovilSalidaViewModels> _form1;
    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();

    Bombero[] TodosBomberos;
    Movil[] Moviles;
    AccidenteViewModels _model;

    @*Sin uso*@
    //bool switchValueS { get; set; }
    //bool switchValueV { get; set; }



    List<string> _items;
    List<string> _items2;
    IEnumerable<string> _selectedValues = Enumerable.Empty<string>();
    IEnumerable<string> _selectedValues2 = Enumerable.Empty<string>();


    @*Sucess y Imprimir*@
    bool _visible1;//Modal Success
    bool imprimirmodal;//Modal Imprimir Croquis [Si/No]

    public void ShowModal1()
    {
        _visible1 = true;
    }

    private void HandleOk1(MouseEventArgs e)
    {
        _visible1 = false;
        imprimirmodal = true;
        @* navigationManager.NavigateTo($"/legajo");//Error *@
    }

    private void HandleCancel1(MouseEventArgs e)
    {
        _visible1 = false;
    }


    private void HandleOkIMP(MouseEventArgs e)
    {
        imprimirmodal = false;
    }

    private void HandleCancelIMP(MouseEventArgs e)
    {
        imprimirmodal = false;
    }

    @*Damnificados | Bomberos | Moviles y Chofer | Info-Salida | Steps *@

    @*Damnificados*@
    bool switchValue { get; set; }// Cargar Damnificado [Si/No]
    bool visibleDamnificados = true;// Modal [Carga de Datos]
    bool visibleVerDamnificados;// Modal Ver Damnificados ya Cargados


    private void HandleOkD(MouseEventArgs e)
    {
        visibleDamnificados = false;
    }
    private void HandleCancelD(MouseEventArgs e)
    {
        visibleDamnificados = false;
    }

    private void HandleCancelVD(MouseEventArgs e)
    {
        visibleVerDamnificados = false;
    }

    public async Task AgregarDamnificado()
    {

        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

            };
        DamnificadosSalida.Add(dp);
        StateHasChanged();
    }


    @*Bomberos*@
    bool chekB { get; set; }// Bombero Salio [Si/No]
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;
    int BomberoReceptor;// Falta info..


    @*Metodos*@
    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            bomberoTodos.Add(bombero);
        }
        foreach (Bombero c in bomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        //NombreImagen = b.NombreImagen,
                        //TipoImagen = b.TipoImagen,
                        //Base64Imagen = b.Base64,
                        Dotacion = c.Dotacion,
                        //Nombre = b.NombreBrigada,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                        //TelefonoCel = b.TelefonoCel,
                        //TelefonoFijo = b.TelefonoFijo,
                        //TelefonoLaboral = b.TelefonoLaboral,
                        //Email = b.Email,

                    };
                bomberoChoferes.Add(bomberoChofer);
            }
        }
    }

    public async Task AgregarCuerpoParticipante()
    {
        var boberos = await Context.Bomberos.ToArrayAsync();
        foreach (var bom in boberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                    {
                        Salio = bomberoSalidaView.Salio,
                        Nombre = bom.Nombre,
                        Apellido = bom.Apellido,
                        NumeroLegajo = BomberoCuerpo
                    };
                bomberosSalida.Add(b);

            }
        }
        StateHasChanged();

    }



    @*Chofer y Moviles*@
    int chofer;
    string NumeroMovil;
    bool switchMoviles { get; set; }// Carga de Combustible [Si/No]
    bool desactivarSwitch { get; set; }// Disable del Anterior Switch
    bool _visible = false;// Modal de Carga de Combustible
    bool chekM { get; set; }// Datos sobre Carga de Combustible [Si/No]

    bool loading = false;

    void toggle(bool value) => loading = value;


    private void ShowModal()
    {
        _visible = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }

    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
    }

    private void HandleOk(MouseEventArgs e)
    {
        _visible = false;
        desactivarSwitch = true;
    }

    private void HandleCancelMovil(MouseEventArgs e)
    {
        switchMoviles = false;
        desactivarSwitch = false;
    }


    @*Metodo*@

    public async Task AgregarMovilSalida()
    {

        Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await Context.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                KmLlegada = accidenteViewModels.KmLlegada,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,

            };
        MovilesSalidasL.Add(m);
        StateHasChanged();

    }


    @*Info-Salida*@

    bool chek { get; set; }//Check de airbag

    public async Task CargarAccidente()
    {

        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == BomberoReceptor);
            Bombero? bomberoEncargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == BomberoEncargado);
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == QuienLLenoPlanilla);

            Accidente accidente = new()
                {

                    NumeroParte = accidenteViewModels.NumeroParte,
                    HoraSalida = accidenteViewModels.HoraSalida,
                    HoraLlegada = accidenteViewModels.HoraLLegada,
                    //KmSalida = accidenteViewModels.KmSalida,
                    //KmLlegada = accidenteViewModels.KmLlegada,
                    Descripcion = accidenteViewModels.Descripcion,
                    CalleORuta = accidenteViewModels.CalleORuta,
                    NumeroOKilometro = accidenteViewModels.NumeroOKilometro,
                    EntreCalles = accidenteViewModels.EntreCalles,
                    PisoNumero = accidenteViewModels.PisoNumero,
                    Depto = accidenteViewModels.Depto,
                    //Enum.GetName(typeof(TipoGrupoSanguineo), bomberoView.GrupoSanguineo)
                    TipoZona = accidenteViewModels.TipoZona,
                    NombreSolicitante = accidenteViewModels.NombreSolicitante,
                    ApellidoSolicitante = accidenteViewModels.ApellidoSolicitante,
                    DniSolicitante = accidenteViewModels.DniSolicitante,
                    TelefonoSolicitante = accidenteViewModels.TelefonoSolicitante,
                    NombreYApellidoReceptor = accidenteViewModels.NombreYApellidoReceptor,
                    TelefonoReceptor = accidenteViewModels.TelefonoReceptor,
                    TipoServicio = accidenteViewModels.TipoServicio,
                    //carga propio de accidentes
                    Tipo = accidenteViewModels.Tipo,
                    CantidadVehiculos = accidenteViewModels.CantidadVheiculo,
                    VehiculosAfectado = accidenteViewModels.VehiculosAfectado,
                    CondicionesClimaticas = accidenteViewModels.CondicionesClimaticas,
                    OtroCondicion = accidenteViewModels.OtroCondicion,
                    QuienLleno = BomberoLlenoPlanilla,
                    ReceptorBombero = bomberoReceptor,
                    Encargado = bomberoEncargado,
                    Seguro = new()
                    {
                        CompañiaAseguradora = accidenteViewModels.CompaniaAseguradora,
                        NumeroDePoliza = accidenteViewModels.NumeroPoliza,
                        FechaDeVencimineto = accidenteViewModels.FechaVencimineto,
                    },
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()

                };

            foreach (BomberoSalidaViewModels bom in bomberosSalida)
            {
                Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                BomberoSalida BomSalida = new()
                    {
                        Salio = bom.Salio,
                        Grado = bom.Grado,
                        Bombero = bomberoSalida
                    };
                accidente.CuerpoParticipante.Add(BomSalida);
            }
            foreach (MovilSalidaViewModels m in MovilesSalidasL)
            {
                Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == m.Chofer.NumeroLegajo).SingleOrDefaultAsync();
                Movil? Movilsalida = await Context.Moviles.Where(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil).SingleOrDefaultAsync();
                if (Movilsalida is not null)
                {
                    Movilsalida.Kilometraje = m.KmLlegada;
                }
                MovilSalida movilS = new()
                    {
                        CargoCombustible = m.CargoCombustible,
                        NumeroFactura = movilSalidaViewModels.NumeroFactura,
                        FechaFactura = movilSalidaViewModels.FechaFactura,
                        TipoConbustible = movilSalidaViewModels.TipoConbustible,
                        CantidadLitros = movilSalidaViewModels.CantidadLitros,
                        QuienLleno = movilSalidaViewModels.QuienLleno,
                        TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                        KmLlegada = m.KmLlegada,
                        Chofer = bomberoChofer,
                        Movil = Movilsalida
                    };
                accidente.Moviles.Add(movilS);
            }

            foreach (DamnificadoViewModels d in DamnificadosSalida)
            {

                Damnificado damn = new()
                    {
                        Nombre = d.Nombre,
                        Apellido = d.Apellido,
                        Dni = d.Dni,
                        Sexo = d.Sexo,
                        LugarDeNacimiento = d.LugarDeNacimiento,
                        Edad = d.Edad,
                        Estado = d.Estado,
                        VehiculoDamnificado = new()
                        {
                            Marca = vehiculo.Marca,
                            Modelo = vehiculo.Modelo,
                            Año = vehiculo.Año,
                            Patente = vehiculo.Patente,
                            Tipo = vehiculo.Tipo,
                            Color = vehiculo.Color,
                            Airbag = chek,
                            Seguro = new()
                            {
                                CompañiaAseguradora = vehiculo.CompañiaAseguradora,
                                NumeroDePoliza = vehiculo.NumeroDePoliza,
                                FechaDeVencimineto = vehiculo.FechaDeVencimineto,
                            },
                        }

                    };
                accidente.Damnificados.Add(damn);


            }
            await Context.Accidentes.AddAsync(accidente);
            await Context.SaveChangesAsync();

            await Init();
            StateHasChanged();
            await message.Success("Salida agregada correctamente");
            imprimirmodal = true;
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
            imprimirmodal = true;
        }

    }


    public async void AgregarVehiculoAfectadoAccidente()
    {

        Accidente? vehiculosAfectadosAcc1 = await Context.Accidentes.Where(vaa => vaa.NumeroParte == accidenteViewModels.NumeroParte)
        .Include(sal => sal.VehiculosAfectado).ThenInclude(vehiculo => vehiculo.Seguro)
        .SingleOrDefaultAsync();

        AccidenteViewModels Accidentes1 = new()
            {
                Tipo = vehiculosAfectadosAcc1.Tipo,
                CantidadVheiculo = vehiculosAfectadosAcc1.CantidadVehiculos,
                VehiculosAfectado = vehiculosAfectadosAcc1.VehiculosAfectado,
                CondicionesClimaticas = vehiculosAfectadosAcc1.CondicionesClimaticas,
                OtroCondicion = vehiculosAfectadosAcc1.OtroCondicion
            };
        VehiculosAfectdosAcci.Add(Accidentes1);
        await Context.SaveChangesAsync();
    }

    //Steps

    //Para moverse entre secciones
    public int current { get; set; } = 0;
    //Animacion de secciones
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
    };
    //Botones de navegacion
    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    //Animaciones
    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }





    @*Init | OnChange y OnFinish*@

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        accidenteViewModels = new();
        Context = DbFactory.CreateDbContext();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }

    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }
    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(accidenteViewModels)}");
    }

    //OnFinishFailed
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(accidenteViewModels)}");
    }


    @*"Delete" y Dispose*@
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }



    private async void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }

    private async void OnSelectedItemsChangedHandler2(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }
}