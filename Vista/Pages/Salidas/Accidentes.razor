@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/accidentes"
@using Vista.Data.ViewModels.Accidente;
@using Vista.Pages.PlanillasIntervencion;

@*Servicios Utilizados*@
@using Vista.Services;
@inject ISalidaService SalidaService;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border-radius: 5px 5px !important;
    }

    .steps-action {
        margin-top: 10px !important;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
        margin-left: 254px;
    }

    .ant-btn:hover, .ant-btn:focus, .ant-btn:active {
        text-decoration: none;
        background: #40a9ff !important;
    }

    .ant-btn:hover, .ant-btn:focus {
        color: white !important;
        border-color: #40a9ff !important;
        background: #40a9ff !important;
    }

    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }

    .ant-checkbox-input:checked + .ant-checkbox-inner {
        background-color: #4CAF50 !important;
        border-color: #4CAF50 !important;
    }

</style>


<Form Model="@accidenteViewModels"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">

    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>

        <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
            @if (current == 0)
            {
                @*General*@
                <DatosGenerales Model="@accidenteViewModels"
                                animationClass="@animationClass"
                                esSoloDireccion="true" />
            }
            else if (current == 1)
            {
                @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@accidenteViewModels"
                               animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                @*Chofer y Moviles*@
                <Vehiculos Model="@accidenteViewModels"
                           animationClass="@animationClass" />
            }
            else if (current == 3)
            {
                @*Bomberos*@
                <Personal Model="@accidenteViewModels"
                          animationClass="@animationClass" />
            }
            else if (current == 4)
            {
                <div class="slick-contenedor @animationClass">
                    @*Tipo servicio*@
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo Servicio salida</label>
                        <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@accidenteViewModels.TipoServicio" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo Accidente</label>
                        <EnumSelect TEnum="TipoAccidente" @bind-Value="@accidenteViewModels.Tipo" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Condiciones Climaticas</label>
                        <EnumSelect TEnum="TipoCondicionesClimaticas" @bind-Value="@accidenteViewModels.CondicionesClimaticas" />
                        @if (accidenteViewModels.CondicionesClimaticas == TipoCondicionesClimaticas.Otro)
                        {
                            <label class="inpt-cont--lbl">Otra</label>
                            <Input @bind-Value="@accidenteViewModels.OtroCondicion" />
                        }
                    </div>
                </div>
            }
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {

    @*Context y ViewModels*@
    BomberosDbContext Context { get; set; }
    private AccidenteViewModels accidenteViewModels = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<AccidenteViewModels> VehiculosAfectdosAcci = new();
    private Form<MovilSalidaViewModels> _form1;

    AccidenteViewModels _model;

    List<string> _items;
    List<string> _items2;
    IEnumerable<string> _selectedValues = Enumerable.Empty<string>();
    IEnumerable<string> _selectedValues2 = Enumerable.Empty<string>();


    @*Sucess y Imprimir*@
    bool _visible1;
    public int ImprimirAnio;
    public int ImprimirNumeroParte;
    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    public void ShowModal1()
    {
        _visible1 = true;
    }

    private void HandleCancel1(MouseEventArgs e)
    {
        _visible1 = false;
    }

    @*Chofer y Moviles*@
    int chofer;
    string NumeroMovil;
    bool switchMoviles { get; set; }// Carga de Combustible [Si/No]
    bool desactivarSwitch { get; set; }// Disable del Anterior Switch
    bool _visible = false;// Modal de Carga de Combustible
    bool chekM { get; set; }// Datos sobre Carga de Combustible [Si/No]

    bool loading = false;

    void toggle(bool value) => loading = value;


    private void ShowModal()
    {
        _visible = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }

    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
    }

    private void HandleOk(MouseEventArgs e)
    {
        _visible = false;
        desactivarSwitch = true;
    }

    private void HandleCancelMovil(MouseEventArgs e)
    {
        switchMoviles = false;
        desactivarSwitch = false;
    }


    @*Info-Salida*@

    bool chek { get; set; }//Check de airbag

    public async Task CargarAccidente()
    {

        try
        {
            Bombero? bomberoEncargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == accidenteViewModels.LegajoEncargado);
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == accidenteViewModels.LegajoLLenoPlanilla);

            Accidente accidente = new()
                {

                    NumeroParte = accidenteViewModels.NumeroParte,
                    HoraSalida = accidenteViewModels.HoraSalida,
                    HoraLlegada = accidenteViewModels.HoraLLegada,
                    Descripcion = accidenteViewModels.Descripcion,
                    CalleORuta = accidenteViewModels.CalleORuta,
                    NumeroOKilometro = accidenteViewModels.NumeroOKilometro,
                    EntreCalles = accidenteViewModels.EntreCalles,
                    PisoNumero = accidenteViewModels.PisoNumero,
                    Depto = accidenteViewModels.Depto,
                    TipoZona = accidenteViewModels.TipoZona,
                    NombreSolicitante = accidenteViewModels.NombreSolicitante,
                    ApellidoSolicitante = accidenteViewModels.ApellidoSolicitante,
                    DniSolicitante = accidenteViewModels.DniSolicitante,
                    TelefonoSolicitante = accidenteViewModels.TelefonoSolicitante,
                    NombreYApellidoReceptor = accidenteViewModels.NombreYApellidoReceptor,
                    TipoServicio = accidenteViewModels.TipoServicio,
                    //carga propio de accidentes
                    Tipo = accidenteViewModels.Tipo,
                    CantidadVehiculos = accidenteViewModels.CantidadVheiculo,
                    VehiculosAfectado = accidenteViewModels.VehiculosAfectado,
                    CondicionesClimaticas = accidenteViewModels.CondicionesClimaticas,
                    OtroCondicion = accidenteViewModels.OtroCondicion,
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = bomberoEncargado,
                    Seguro = new()
                    {
                        CompañiaAseguradora = accidenteViewModels.CompaniaAseguradora,
                        NumeroDePoliza = accidenteViewModels.NumeroPoliza,
                        FechaDeVencimineto = accidenteViewModels.FechaVencimineto,
                    },
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()
                };

            //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
            if (accidenteViewModels.CuerpoParticipante != null && accidenteViewModels.CuerpoParticipante.Any())
            {
                accidente.CuerpoParticipante = accidenteViewModels.CuerpoParticipante.ToList();
            }

            //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
            if (accidenteViewModels.Moviles != null && accidenteViewModels.Moviles.Any())
            {
                accidente.Moviles = accidenteViewModels.Moviles.ToList();
            }

            foreach (var d in accidenteViewModels.Damnificados)
            {

                Damnificado damn = new()
                    {
                        Nombre = d.Nombre,
                        Apellido = d.Apellido,
                        Dni = d.Dni,
                        Sexo = d.Sexo,
                        LugarDeNacimiento = d.LugarDeNacimiento,
                        Edad = d.Edad,
                        Estado = d.Estado,
                        VehiculoDamnificado = new()
                        {
                            Marca = vehiculo.Marca,
                            Modelo = vehiculo.Modelo,
                            Año = vehiculo.Año,
                            Patente = vehiculo.Patente,
                            Tipo = vehiculo.Tipo,
                            Color = vehiculo.Color,
                            Airbag = chek,
                            Seguro = new()
                            {
                                CompañiaAseguradora = vehiculo.CompañiaAseguradora,
                                NumeroDePoliza = vehiculo.NumeroDePoliza,
                                FechaDeVencimineto = vehiculo.FechaDeVencimineto,
                            },
                        }

                    };
                accidente.Damnificados.Add(damn);

            }

            await SalidaService.CargarSalida(accidente);
            HandleOk1(accidente.AnioNumeroParte, accidente.NumeroParte);
            await Init();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }

    }


    public async void AgregarVehiculoAfectadoAccidente()
    {

        Accidente? vehiculosAfectadosAcc1 = await Context.Accidentes.Where(vaa => vaa.NumeroParte == accidenteViewModels.NumeroParte)
        .Include(sal => sal.VehiculosAfectado).ThenInclude(vehiculo => vehiculo.Seguro)
        .SingleOrDefaultAsync();

        AccidenteViewModels Accidentes1 = new()
            {
                Tipo = vehiculosAfectadosAcc1.Tipo,
                CantidadVheiculo = vehiculosAfectadosAcc1.CantidadVehiculos,
                VehiculosAfectado = vehiculosAfectadosAcc1.VehiculosAfectado,
                CondicionesClimaticas = vehiculosAfectadosAcc1.CondicionesClimaticas,
                OtroCondicion = vehiculosAfectadosAcc1.OtroCondicion
            };
        VehiculosAfectdosAcci.Add(Accidentes1);
        await Context.SaveChangesAsync();
    }

    //Steps

    //Para moverse entre secciones
    public int current { get; set; } = 0;
    //Animacion de secciones
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
    };

    //Botones de navegacion
    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    //Animaciones
    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    @*Init | OnChange y OnFinish*@

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        accidenteViewModels = new();
        Context = DbFactory.CreateDbContext();
    }

    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(accidenteViewModels)}");
    }

    //OnFinishFailed
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(accidenteViewModels)}");
    }

    @*"Delete" y Dispose*@
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

    private async void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }

    private async void OnSelectedItemsChangedHandler2(IEnumerable<string> values)
    {
        if (values != null)
        {
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            foreach (var value in values)
            {
                var property = _model.GetType().GetProperty(value);
                if (property != null)
                {
                    property.SetValue(_model, true);
                }
            }
        }
    }
}