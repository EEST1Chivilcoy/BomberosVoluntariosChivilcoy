@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/accidentes"
@using Vista.Data.ViewModels.Accidente;
@using Vista.Pages.PlanillasIntervencion;
<h2 style="text-align:center; text-decoration:underline;">Acciedentes</h2>

<Form Model="@accidenteViewModels"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    @*Datos generales de las salidas*@
    <FormItem Label="Descripcion">
        <Input @bind-Value="@accidenteViewModels.Descripcion" />
    </FormItem>
    <FormItem Label="Dato Hora salida">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@accidenteViewModels.HoraSalida" />
    </FormItem>
    <FormItem Label="Dato Hora llegada">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@accidenteViewModels.HoraLLegada" />
    </FormItem>
    @*<FormItem Label="Kilometro salida">
    <AntDesign.InputNumber @bind-Value="accidenteViewModels.KmSalida" />
    </FormItem>
    <FormItem Label="Kilometro llegada">
    <AntDesign.InputNumber @bind-Value="accidenteViewModels.KmLlegada" />
    </FormItem>*@
    <FormItem Label="Calle/Ruta">
        <Input @bind-Value="@accidenteViewModels.CalleORuta" />
    </FormItem>
    <FormItem Label="Numero/kilometro">
        <Input @bind-Value="@accidenteViewModels.NumeroOKilometro" />
    </FormItem>
    <FormItem Label="Entre calles">
        <Input @bind-Value="@accidenteViewModels.EntreCalles" />
    </FormItem>
    <FormItem Label="PisoNumero">
        <Input @bind-Value="@accidenteViewModels.PisoNumero" />
    </FormItem>
    <FormItem Label="Depto">
        <Input @bind-Value="@accidenteViewModels.Depto" />
    </FormItem>
    <FormItem Label="Tipo zona">
        <EnumSelect TEnum="TipoZona" @bind-Value="@accidenteViewModels.TipoZona" />
    </FormItem>
    @*Solicitante datos*@
    <b><label>Datos de solicitante</label></b>
    <FormItem Label="Nombre del solicitante">
        <Input @bind-Value="@accidenteViewModels.NombreSolicitante" />
    </FormItem>
    <FormItem Label="Apelldio del solicitante">
        <Input @bind-Value="@accidenteViewModels.ApellidoSolicitante" />
    </FormItem>
    <FormItem Label="documneto del solicitante">
        <Input @bind-Value="@accidenteViewModels.DniSolicitante" />
    </FormItem>
    <FormItem Label="Telefono  del solicitante">
        <Input @bind-Value="@accidenteViewModels.TelefonoSolicitante" />
    </FormItem>
    @*Datos del receptor*@
    <FormItem Label="Nombre y apellido del receptor">
        <Input @bind-Value="@accidenteViewModels.NombreYApellidoReceptor" />
    </FormItem>
    <FormItem Label="Telefono receptor">
        <Input @bind-Value="@accidenteViewModels.TelefonoReceptor" />
    </FormItem>
    <div>
        <div>
            <b>
                <FormItem Label="¿Tiene seguro el lugar?">
                    <Switch @bind-Checked="switchValueS" />
                </FormItem>
            </b>
        </div>
        <div>
            @if (switchValueS == true)
            {
                <b><label>Seguro del lugar afectado</label></b>
                <FormItem Label="Compania Aseguradora">
                    <Input @bind-Value="@accidenteViewModels.CompaniaAseguradora" />
                </FormItem>
                <FormItem Label="NumeroPoliza">
                    <Input @bind-Value="@accidenteViewModels.NumeroPoliza" />
                </FormItem>
                <FormItem Label="FechaVencimineto">
                    <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@accidenteViewModels.FechaVencimineto" />
                </FormItem>
            }
        </div>
    </div>
    @*Datos de damnificados*@
    <FormItem Label="¿Hubo damnificados?">
        <Switch @bind-Checked="switchValue" />
    </FormItem>
    @if (switchValue == true)
    {

        <FormItem Label="Nombre">
            <Input @bind-Value="@damnificado.Nombre" />
        </FormItem>
        <FormItem Label="Apellido">
            <Input @bind-Value="@damnificado.Apellido" />
        </FormItem>
        <FormItem Label="Documento">
            <Input @bind-Value="@damnificado.Dni" />
        </FormItem>
        <FormItem Label="Tipo sexo">
            <EnumSelect TEnum="TipoSexo" @bind-Value="@damnificado.Sexo" />
        </FormItem>
        <FormItem Label="Lugar De nacimiento">
            <Input @bind-Value="@damnificado.LugarDeNacimiento" />
        </FormItem>
        <FormItem Label="edad">
            <AntDesign.InputNumber @bind-Value="damnificado.Edad" />
        </FormItem>
        <FormItem Label="Tipo material">
            <EnumSelect TEnum="TipoDamnificado" @bind-Value="@damnificado.Estado" />
        </FormItem>
        <Button OnClick="@AgregarDamnificado">Agregar damnificado</Button>
        <div>
            <Table Context="Damnificados" DataSource="DamnificadosSalida" Bordered>
            <PropertyColumn Property="d=>d.NombreYApellido"></PropertyColumn>
            <PropertyColumn Property="d=>d.Edad"></PropertyColumn>
            <PropertyColumn Property="d=>d.Estado"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> deleteRowDamnificados(Damnificados.Dni)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>
    }
    @*Datos de Vehiculos  damnificados*@
    <FormItem Label="¿Ubo vehiculos damnificados?">
        <Switch @bind-Checked="switchValueV" />
    </FormItem>
    @if (switchValueV == true)
    {
        <FormItem Label="Marca">
            <Input @bind-Value="@vehiculo.Marca" />
        </FormItem>
        <FormItem Label="Modelo">
            <Input @bind-Value="@vehiculo.Modelo" />
        </FormItem>
        <FormItem Label="Año">
            <AntDesign.InputNumber @bind-Value="vehiculo.Año" />
        </FormItem>
        <FormItem Label="Patente">
            <Input @bind-Value="@vehiculo.Patente" />
        </FormItem>
        <FormItem Label="tipo">
            <Input @bind-Value="@vehiculo.Tipo" />
        </FormItem>
        <FormItem Label="Color">
            <Input @bind-Value="@vehiculo.Color" />
        </FormItem>
        <FormItem Label="Compania Aseguradora">
            <Input @bind-Value="@vehiculo.CompañiaAseguradora" />
        </FormItem>
        <FormItem Label="NumeroPoliza">
            <Input @bind-Value="@vehiculo.NumeroDePoliza" />
        </FormItem>
        <FormItem Label="FechaVencimineto">
            <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@vehiculo.FechaDeVencimineto" />
            <Checkbox @bind-Checked="chek"> Airbag</Checkbox>
        </FormItem>
        <Button OnClick="@AgregarDamnificado">Agregar vehiculo damnificado</Button>

    }
    @*Moviles de salidas*@
    @*a la hora de pedir el chofer y movil,
    pedir dato unico para no cargar todo y buscarlo en la base de datos*@
    <b><label>Datos de chofer</label></b>
    <br />
    <FormItem Label="">
        <Checkbox @bind-Checked="chekM"> Cargo combustible</Checkbox>
        <br />
        <Button Type="primary" OnClick="@ShowModal">
            Cargo Combustible
        </Button>
    </FormItem>


    <FormItem Label="Elija el chofer">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoChoferes"
        @bind-Value="@chofer"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione el bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>
    <FormItem Label="Numero de movil">
        <Select TItem="Movil"
                TItemValue="string"
                DataSource="@Moviles"
                @bind-Value="@NumeroMovil"
                LabelName="@nameof(Movil.NumeroMovil)"
                ValueName="@nameof(Movil.NumeroMovil)"
                Placeholder="Seleccione el movil"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>

    </FormItem>
    <br />
    @if (NumeroMovil is not null)
    {
        foreach (Movil m in Moviles)
        {
            if (m.NumeroMovil == NumeroMovil)
            {
                accidenteViewModels.Kilometraje = m.Kilometraje;
                break;
            }
        }
    }
    <FormItem Label="Kilometro salida">
        <AntDesign.InputNumber @bind-Value="accidenteViewModels.Kilometraje" Disabled />
    </FormItem>
    <FormItem Label="Kilometro llegada">
        <AntDesign.InputNumber @bind-Value="accidenteViewModels.KmLlegada" />
    </FormItem>
    <Button OnClick="@AgregarMovilSalida">Cargar Movil salida</Button>
    <br />
    <div>
        <Table Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
            <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
            <PropertyColumn Property="c=>c.ChoferNombreCompleto"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>

    @*Cuerpos paraticipantes*@
    <b><label>Cuerpo Participante</label></b>
    <FormItem Label="Tipo Escalafon">
        <EnumSelect TEnum="EscalafonJerarquico" @bind-Value="@bomberoSalidaView.Grado" />
    </FormItem>
    <FormItem Label="Elija el bombero">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@BomberoCuerpo"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione el bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>
    <Checkbox @bind-Checked="chekB"> Salio</Checkbox>
    <br />
    <Button OnClick="@AgregarCuerpoParticipante">Cargar cuerpo participante</Button>
    <br />
    <div>
        <Table Context="bomberosSalida1" DataSource="bomberosSalida" Bordered>
            <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
            <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
            <PropertyColumn Property="c=>c.NumeroLegajo"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>
    <b><label>Elija al encargado</label></b>
    <FormItem Label="Encargado">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@BomberoEncargado"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione un encargado"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>
    <b><label>Quien lleno planilla</label></b>
    <FormItem Label="Bombero que lleno la planilla">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@QuienLLenoPlanilla"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione un encargado"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>
    @*Tipo servicio*@
    <FormItem Label="Tipo Servicio salida">
        <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@accidenteViewModels.TipoServicio" />
    </FormItem>
    @*salidas rescates*@
    <FormItem Label="Tipo Accidente">
        <EnumSelect TEnum="TipoAccidente" @bind-Value="@accidenteViewModels.Tipo" />
    </FormItem>

    <FormItem Label="Cantidad de vheiculo">
        <AntDesign.InputNumber @bind-Value="accidenteViewModels.CantidadVheiculo" />
    </FormItem>
    <FormItem Label="Tipo Condiciones Climaticas">
        <EnumSelect TEnum="TipoCondicionesClimaticas" @bind-Value="@accidenteViewModels.CondicionesClimaticas" />
        @if (accidenteViewModels.CondicionesClimaticas == TipoCondicionesClimaticas.Otro)
        {
            <FormItem Label="Otro Abertura">
                <Input @bind-Value="@accidenteViewModels.OtroCondicion" />
            </FormItem>
        }
    </FormItem>

    <FormItem Label="Otra condicion">
        <Input @bind-Value="@accidenteViewModels.OtroCondicion" />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="@CargarAccidente">
            Cargar salida
        </Button>
    </FormItem>
</Form>
<Modal Title="@("Datos de la carga de combustible")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@movilSalidaViewModels"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinishModel"
          OnFinishFailed="OnFinishFailed"
    @ref="@_form1">
        <FormItem Label="Numero factura">
            <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
        </FormItem>
        <FormItem Label="Fecha factura">
            <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
        </FormItem>
        <FormItem Label="Tipo Combustible">
            <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
        </FormItem>
        <FormItem Label="Cantidad de Litros">
            <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
        </FormItem>
        <FormItem Label="Quien lleno">
            <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
        </FormItem>
        <FormItem Label="TelefonoQuienLleno">
            <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Datos de la carga de accidente")"
       Visible="@imprimirmodal"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
       <p>Imprimir con croquis</p>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{accidenteViewModels.NumeroParte}/{true}", true); })">Si</button>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{accidenteViewModels.NumeroParte}/{false}", true); })">No</button>
</Modal>

@code {
    BomberosDbContext Context { get; set; }
    private DamnificadoViewModels damnificado = new();
    private AccidenteViewModels accidenteViewModels = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<AccidenteViewModels> VehiculosAfectdosAcci = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    private Form<MovilSalidaViewModels> _form1;
    bool imprimirmodal { get; set; }

    Bombero[] TodosBomberos;
    Movil[] Moviles;

    public List<BomberoViweModel> bomberoChoferes = new();

    public List<BomberoViweModel> bomberoTodos = new();
    bool switchValue { get; set; }
    bool switchValueS { get; set; }
    bool switchValueV { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }

    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        accidenteViewModels = new();
        Context = DbFactory.CreateDbContext();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }

    public async Task CargarAccidente()
    {

        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == BomberoReceptor);
            Bombero? bomberoEncargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == BomberoEncargado);
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == QuienLLenoPlanilla);

            Accidente accidente = new()
                {

                    NumeroParte = accidenteViewModels.NumeroParte,
                    HoraSalida = accidenteViewModels.HoraSalida,
                    HoraLlegada = accidenteViewModels.HoraLLegada,
                    //KmSalida = accidenteViewModels.KmSalida,
                    //KmLlegada = accidenteViewModels.KmLlegada,
                    Descripcion = accidenteViewModels.Descripcion,
                    CalleORuta = accidenteViewModels.CalleORuta,
                    NumeroOKilometro = accidenteViewModels.NumeroOKilometro,
                    EntreCalles = accidenteViewModels.EntreCalles,
                    PisoNumero = accidenteViewModels.PisoNumero,
                    Depto = accidenteViewModels.Depto,
                    //Enum.GetName(typeof(TipoGrupoSanguineo), bomberoView.GrupoSanguineo)
                    TipoZona = accidenteViewModels.TipoZona,
                    NombreSolicitante = accidenteViewModels.NombreSolicitante,
                    ApellidoSolicitante = accidenteViewModels.ApellidoSolicitante,
                    DniSolicitante = accidenteViewModels.DniSolicitante,
                    TelefonoSolicitante = accidenteViewModels.TelefonoSolicitante,
                    NombreYApellidoReceptor = accidenteViewModels.NombreYApellidoReceptor,
                    TelefonoReceptor = accidenteViewModels.TelefonoReceptor,
                    TipoServicio = accidenteViewModels.TipoServicio,
                    //carga propio de accidentes
                    Tipo = accidenteViewModels.Tipo,
                    CantidadVehiculos = accidenteViewModels.CantidadVheiculo,
                    VehiculosAfectado = accidenteViewModels.VehiculosAfectado,
                    CondicionesClimaticas = accidenteViewModels.CondicionesClimaticas,
                    OtroCondicion = accidenteViewModels.OtroCondicion,
                    QuienLleno = BomberoLlenoPlanilla,
                    ReceptorBombero = bomberoReceptor,
                    Encargado = bomberoEncargado,
                    Seguro = new()
                    {
                        CompañiaAseguradora = accidenteViewModels.CompaniaAseguradora,
                        NumeroDePoliza = accidenteViewModels.NumeroPoliza,
                        FechaDeVencimineto = accidenteViewModels.FechaVencimineto,
                    },
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()

                };

            foreach (BomberoSalidaViewModels bom in bomberosSalida)
            {
                Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                BomberoSalida BomSalida = new()
                    {
                        Salio = bom.Salio,
                        Grado = bom.Grado,
                        Bombero = bomberoSalida
                    };
                accidente.CuerpoParticipante.Add(BomSalida);
            }
            foreach (MovilSalidaViewModels m in MovilesSalidasL)
            {
                Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == m.Chofer.NumeroLegajo).SingleOrDefaultAsync();
                Movil? Movilsalida = await Context.Moviles.Where(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil).SingleOrDefaultAsync();
                if (Movilsalida is not null)
                {
                    Movilsalida.Kilometraje = m.KmLlegada;
                }
                MovilSalida movilS = new()
                    {
                        CargoCombustible = m.CargoCombustible,
                        NumeroFactura = movilSalidaViewModels.NumeroFactura,
                        FechaFactura = movilSalidaViewModels.FechaFactura,
                        TipoConbustible = movilSalidaViewModels.TipoConbustible,
                        CantidadLitros = movilSalidaViewModels.CantidadLitros,
                        QuienLleno = movilSalidaViewModels.QuienLleno,
                        TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                        KmLlegada = m.KmLlegada,
                        Chofer = bomberoChofer,
                        Movil = Movilsalida
                    };
                accidente.Moviles.Add(movilS);
            }

            foreach (DamnificadoViewModels d in DamnificadosSalida)
            {

                Damnificado damn = new()
                    {
                        Nombre = d.Nombre,
                        Apellido = d.Apellido,
                        Dni = d.Dni,
                        Sexo = d.Sexo,
                        LugarDeNacimiento = d.LugarDeNacimiento,
                        Edad = d.Edad,
                        Estado = d.Estado,
                        VehiculoDamnificado = new()
                        {
                            Marca = vehiculo.Marca,
                            Modelo = vehiculo.Modelo,
                            Año = vehiculo.Año,
                            Patente = vehiculo.Patente,
                            Tipo = vehiculo.Tipo,
                            Color = vehiculo.Color,
                            Airbag = chek,
                            Seguro = new()
                            {
                                CompañiaAseguradora = vehiculo.CompañiaAseguradora,
                                NumeroDePoliza = vehiculo.NumeroDePoliza,
                                FechaDeVencimineto = vehiculo.FechaDeVencimineto,
                            },
                        }

                    };
                accidente.Damnificados.Add(damn);


            }
            await Context.Accidentes.AddAsync(accidente);
            await Context.SaveChangesAsync();

            await Init();
            StateHasChanged();
            await message.Success("Salida agregada correctamente");
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);

        }
        imprimirmodal = true;
    }
    public async Task AgregarDamnificado()
    {

        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

            };
        DamnificadosSalida.Add(dp);
        StateHasChanged();
    }

    public async Task AgregarMovilSalida()
    {

        Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await Context.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                KmLlegada = accidenteViewModels.KmLlegada,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,

            };
        MovilesSalidasL.Add(m);
        StateHasChanged();

    }

    public async Task AgregarCuerpoParticipante()
    {
        var boberos = await Context.Bomberos.ToArrayAsync();
        foreach (var bom in boberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                    {
                        Salio = bomberoSalidaView.Salio,
                        Nombre = bom.Nombre,
                        Apellido = bom.Apellido,
                        NumeroLegajo = BomberoCuerpo
                    };
                bomberosSalida.Add(b);

            }
        }
        StateHasChanged();

    }
    public async void AgregarVehiculoAfectadoAccidente()
    {
        
        Accidente? vehiculosAfectadosAcc1 = await Context.Accidentes.Where(vaa => vaa.NumeroParte == accidenteViewModels.NumeroParte)
        .Include(sal => sal.VehiculosAfectado).ThenInclude(vehiculo => vehiculo.Seguro)
        .SingleOrDefaultAsync();

        AccidenteViewModels Accidentes1 = new()
            {
                Tipo = vehiculosAfectadosAcc1.Tipo,
                CantidadVheiculo = vehiculosAfectadosAcc1.CantidadVehiculos,
                VehiculosAfectado = vehiculosAfectadosAcc1.VehiculosAfectado,
                CondicionesClimaticas = vehiculosAfectadosAcc1.CondicionesClimaticas,
                OtroCondicion = vehiculosAfectadosAcc1.OtroCondicion
            };
        VehiculosAfectdosAcci.Add(Accidentes1);
        await Context.SaveChangesAsync();
    }



    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(accidenteViewModels)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(accidenteViewModels)}");
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }
    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }

    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            bomberoTodos.Add(bombero);
        }
        foreach (Bombero c in bomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        //NombreImagen = b.NombreImagen,
                        //TipoImagen = b.TipoImagen,
                        //Base64Imagen = b.Base64,
                        Dotacion = c.Dotacion,
                        //Nombre = b.NombreBrigada,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                        //TelefonoCel = b.TelefonoCel,
                        //TelefonoFijo = b.TelefonoFijo,
                        //TelefonoLaboral = b.TelefonoLaboral,
                        //Email = b.Email,

                    };
                bomberoChoferes.Add(bomberoChofer);
            }
        }
    }
    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    private void ShowModal()
    {
        _visible = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }
    private void OnFinishModel(EditContext editContext)
    {

        _visible = false;
    }
    private void HandleOk(MouseEventArgs e)
    {

        _visible = false;

    }
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}