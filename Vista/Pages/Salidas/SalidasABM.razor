@page "/Salidas"
@using Data.Enums.Discriminadores
@using Data.Enums.Salidas

<style>
    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        margin: 1em;
        padding: 10px;
        overflow: auto;
    }

    .ant-table {
        width: 100%;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .ant-table-title {
        background-color: #A63333
    }

    .ant-table-thead .ant-table-cell {
        background-color: #A63333 !important;
        color: white !important;
        font-weight: bold;
    }

    .ant-table-cell {
        padding: 16px !important;
    }

    .title-template-container {
        background-color: #A63333;
        padding: 16px;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-input {
        width: 250px;
    }

        .search-input input {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            border: none;
        }

            .search-input input::placeholder {
                color: rgba(255, 255, 255, 0.7);
            }

    .add-button {
        background-color: #4CAF50 !important;
        border-color: #438E46 !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    @@media (max-width: 960px) {
        .title-template-container {
            flex-direction: column;
            align-items: stretch;
        }
    }

    .ant-form-horizontal .ant-form-item-label {
        flex-grow: 1;
        background: #A63333;
    }

        .ant-form-horizontal .ant-form-item-label > label {
            color: #FFFFFF;
            padding: 2px 4px;
        }

    .ant-form-item {
        box-sizing: border-box;
        margin: 0;
        margin-bottom: 0px;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        margin-bottom: 8px !important;
        vertical-align: top;
        font-weight: bold;
    }

    .ant-modal-content {
        position: relative;
        background-color: #fff;
        background-clip: padding-box;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05);
        pointer-events: auto;
        border: 1px solid red !important;
    }
</style>

@*Servicios Utilizados*@
@using Vista.Services
@inject ISalidaService SalidaService
@inject IMessageService MessageService
@inject NavigationManager NavigationManager

<div class="template">
    <Table TItem="SalidaViewModelTable"
           DataSource="SalidaViewModels"
           @bind-PageIndex="_pageIndex"
           @bind-PageSize="_pageSize"
           Title="Salidas"
           Responsive>
        <TitleTemplate>
            <GridRow>
                <GridCol Span="12">
                    <Title Level="3" Style="color: white;">Salidas</Title>
                </GridCol>
                <GridCol Span="12" Style="text-align: right;">
                    <Button Type="ButtonType.Primary" OnClick="() => VerAñadirSalida()">
                        <Icon Type="plus" /> Nueva
                    </Button>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>

            <PropertyColumn Title="Número Parte" Property="s => s.Numero" Sortable />

            <PropertyColumn Title="Tipo de Salida" Property="s => s.TipoSalida" Sortable />

            <PropertyColumn Title="Dirección" Property="s => s.Direccion" Sortable />

            <ActionColumn Title="Acciones" Align=ColumnAlign.Center>
                <Space>
                    <SpaceItem>
                        <Button OnClick="() => VerUbicacionSalida(context.Longitud, context.Latitud)">
                            <Icon Type="aim" />
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="¿Eliminar esta salida?"
                                    OnConfirm="() => BorrarSalida(context.Id)"
                                    OkText="Si"
                                    CancelText="No">
                            <Button Danger>
                                <Icon Type="delete" />
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="() => VerEditarSalida(context.Id)" Ghost>
                            <Icon Type="edit" />
                        </Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>

        </ColumnDefinitions>
    </Table>
</div>

@*Modal para Crear Salida*@
<Modal @bind-Visible="_modalAñadirVisible" Title="Crear Salida" OkText="@("Crear")" CancelText="@("Cancelar")" OnOk="@AddSalida">
    <Form Model="newSalida">
        <FormItem Label="Nº Parte" Required>
            <Input @bind-Value="@newSalida.NumeroSalida" ReadOnly="true">
            <Suffix>
                / @newSalida.Anio
            </Suffix>
            </Input>
        </FormItem>
        <FormItem Label="Tipo de Emergencia" Required>
            <EnumSelect @bind-Value="@newSalida.Categoria" Placeholder="Seleccione un tipo de emergencia" />
        </FormItem>
        @if (newSalida.Categoria == CategoriaEmergencia.Incendio)
        {
            <FormItem Label="Tipo de Incendio" Required>
                <EnumSelect @bind-Value="@newSalida.TipoIncendio" Placeholder="Seleccione un tipo de incendio" />
            </FormItem>
        }
        @if (newSalida.Categoria == CategoriaEmergencia.Rescate)
        {
            <FormItem Label="Tipo de Rescate" Required>
                <EnumSelect @bind-Value="@newSalida.TipoRescate" Placeholder="Seleccione un tipo de rescate" />
            </FormItem>
        }
        @if (newSalida.Categoria == CategoriaEmergencia.ServicioEspecial)
        {
            <FormItem Label="Tipo de Servicio Especial" Required>
                <EnumSelect @bind-Value="@newSalida.TipoServicioEspecial" Placeholder="Seleccione un tipo de servicio especial" />
            </FormItem>
        }
    </Form>
</Modal>


@code {
    private List<SalidaViewModelTable> SalidaViewModels = new();
    private SalidaCrearViewModel newSalida = new();

    // Variable del Selector del Anio
    int _anioSeleccionado = DateTime.Now.Year;

    // Variables de Tamaño de la Tabla
    int _pageIndex = 1;
    int _pageSize = 5;

    // Variables de Modal
    bool _modalAñadirVisible = false;


    public class SalidaViewModelTable
    {
        public int Id { get; set; }
        public string Numero { get; set; } = null!;
        public string TipoSalida { get; set; } = null!;
        public string Direccion { get; set; } = null!;
        public string Fecha { get; set; } = null!;
        public string Hora { get; set; } = null!;
        public double Latitud { get; set; }
        public double Longitud { get; set; }
    }

    public class SalidaCrearViewModel
    {
        public int NumeroSalida { get; set; }
        public int Anio { get; set; }
        public CategoriaEmergencia Categoria { get; set; }
        public TipoDeEmergencia TipoEmergencia { get; set; }

        // Subtipo de Emergencia (si aplica)
        public IncendioTipo? TipoIncendio { get; set; }
        public RescateTipo? TipoRescate { get; set; }
        public ServicioEspecialTipo? TipoServicioEspecial { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerSalidas(_anioSeleccionado);
    }

    private async Task BorrarSalida(int id)
    {

    }

    private async Task VerUbicacionSalida(double Longitud, double Latitud)
    {

    }

    private async Task VerEditarSalida(int id)
    {

    }

    private async Task VerAñadirSalida()
    {
        _modalAñadirVisible = true;
        newSalida = new();

        newSalida.Anio = DateTime.Now.Year;

        var resultado = await SalidaService.ObtenerUltimoNumeroParteDelAnioAsync(newSalida.Anio);

        newSalida.NumeroSalida = resultado;
    }

    private async Task AddSalida()
    {
        if (string.IsNullOrWhiteSpace(newSalida.Categoria.ToString()))
        {
            await MessageService.ErrorAsync("Debe seleccionar un tipo de emergencia.");
            return;
        }

        if (newSalida.NumeroSalida <= 0)
        {
            await MessageService.ErrorAsync("El número de parte debe ser mayor que cero.");
            return;
        }

        if (newSalida.Anio <= 0)
        {
            await MessageService.ErrorAsync("El año debe ser mayor que cero.");
            return;
        }

        // Validar que se haya seleccionado un tipo de emergencia según la categoría
        if (newSalida.Categoria == CategoriaEmergencia.Incendio && newSalida.TipoIncendio == null)
        {
            await MessageService.ErrorAsync("Debe seleccionar un tipo de incendio.");
            return;
        }
        if (newSalida.Categoria == CategoriaEmergencia.Rescate && newSalida.TipoRescate == null)
        {
            await MessageService.ErrorAsync("Debe seleccionar un tipo de rescate.");
            return;
        }
        if (newSalida.Categoria == CategoriaEmergencia.ServicioEspecial && newSalida.TipoServicioEspecial == null)
        {
            await MessageService.ErrorAsync("Debe seleccionar un tipo de servicio especial.");
            return;
        }

        // Dar valor al tipo de emergencia según la categoría
        switch (newSalida.Categoria)
        {
            case CategoriaEmergencia.Incendio:
                newSalida.TipoEmergencia = newSalida.TipoIncendio switch
                {
                    IncendioTipo.Vivienda => TipoDeEmergencia.IncendioVivienda,
                    IncendioTipo.Comercio => TipoDeEmergencia.IncendioComercio,
                    IncendioTipo.EstablecimientoEducativo => TipoDeEmergencia.IncendioEstablecimientoEducativo,
                    IncendioTipo.EstablecimientoPublico => TipoDeEmergencia.IncendioEstablecimientoPublico,
                    IncendioTipo.HospitalesYClinicas => TipoDeEmergencia.IncendioHospitalesYClinicas,
                    IncendioTipo.Industria => TipoDeEmergencia.IncendioIndustria,
                    IncendioTipo.Forestal => TipoDeEmergencia.IncendioForestal,
                    IncendioTipo.Aeronaves => TipoDeEmergencia.IncendioAeronaves,
                    IncendioTipo.Otro => TipoDeEmergencia.Incendio,
                    _ => throw new InvalidOperationException("Tipo de incendio no reconocido.")
                };
                break;

            case CategoriaEmergencia.Rescate:
                newSalida.TipoEmergencia = newSalida.TipoRescate switch
                {
                    RescateTipo.Persona => TipoDeEmergencia.RescatePersona,
                    RescateTipo.Animal => TipoDeEmergencia.RescateAnimal,
                    _ => throw new InvalidOperationException("Tipo de rescate no reconocido.")
                };
                break;

            case CategoriaEmergencia.ServicioEspecial:
                newSalida.TipoEmergencia = newSalida.TipoServicioEspecial switch
                {
                    ServicioEspecialTipo.Representacion => TipoDeEmergencia.ServicioEspecialRepresentacion,
                    ServicioEspecialTipo.Prevencion => TipoDeEmergencia.ServicioEspecialPrevencion,
                    ServicioEspecialTipo.Capacitacion => TipoDeEmergencia.ServicioEspecialCapacitacion,
                    ServicioEspecialTipo.ColocacionDriza => TipoDeEmergencia.ServicioEspecialColocacionDriza,
                    ServicioEspecialTipo.SuministroAgua => TipoDeEmergencia.ServicioEspecialSuministroAgua,
                    ServicioEspecialTipo.FalsaAlarma => TipoDeEmergencia.ServicioEspecialFalsaAlarma,
                    ServicioEspecialTipo.RetiradoDeObito => TipoDeEmergencia.ServicioEspecialRetiradoDeObito,
                    ServicioEspecialTipo.ColaboracionFuerzasSeguridad => TipoDeEmergencia.ServicioEspecialColaboracionFuerzasSeguridad,
                    _ => throw new InvalidOperationException("Tipo de servicio especial no reconocido.")
                };
                break;

            case CategoriaEmergencia.Accidente:
                newSalida.TipoEmergencia = TipoDeEmergencia.Accidente;
                break;

            case CategoriaEmergencia.MaterialPeligroso:
                newSalida.TipoEmergencia = TipoDeEmergencia.MaterialPeligroso;
                break;

            case CategoriaEmergencia.FactorClimatico:
                newSalida.TipoEmergencia = TipoDeEmergencia.FactorClimatico;
                break;

            default:
                throw new InvalidOperationException("Categoría no reconocida.");
        }


        if (RutasEmergencia.TryGetValue(newSalida.TipoEmergencia, out var ruta))
        {
            // Convertimos el enum a su valor entero
            var tipoRescateInt = (int)newSalida.TipoRescate;
            ruta += $"/{tipoRescateInt}/{newSalida.Anio}/{newSalida.NumeroSalida}";

            NavigationManager?.NavigateTo(ruta);
        }
        else
        {
            await MessageService.ErrorAsync("Tipo de emergencia no válido.");
        }
    }

    private async Task ObtenerSalidas(int anio)
    {
        var salidas = await SalidaService.ObtenerSalidasPorAnioAsync(anio);

        SalidaViewModels = salidas.Select(s => new SalidaViewModelTable
        {
            Id = s.SalidaId,
            Numero = $"{s.NumeroParte}/{s.HoraSalida.Year}",
            TipoSalida = s.TipoEmergencia.GetDisplayName(),
            Direccion = string.IsNullOrWhiteSpace(s.Direccion) ? "Desconocida" : s.Direccion,
            Fecha = s.HoraSalida.ToString("yyyy-MM-dd"),
            Hora = s.HoraSalida.ToString("HH:mm"),
            Latitud = s.Latitud,
            Longitud = s.Longitud
        }).ToList();

        StateHasChanged();
    }

    // Diccionario de rutas según el tipo de emergencia
    public Dictionary<TipoDeEmergencia, string> RutasEmergencia = new()
    {
            { TipoDeEmergencia.Accidente, "/salidas/accidentes" },
            { TipoDeEmergencia.FactorClimatico, "/salidas/factores-climaticos" },
            { TipoDeEmergencia.MaterialPeligroso, "/salidas/materiales-peligrosos" },
            { TipoDeEmergencia.ServicioEspecialRepresentacion, "/salidas/serviciosRepresentacion" },
            { TipoDeEmergencia.RescateAnimal, "/salidas/rescate" },
            { TipoDeEmergencia.RescatePersona, "/salidas/rescate" },
            { TipoDeEmergencia.IncendioComercio, "/salidas/incendios-comercio" },
            { TipoDeEmergencia.IncendioEstablecimientoEducativo, "/salidas/incendios-establecimientoEducativo" },
            { TipoDeEmergencia.IncendioEstablecimientoPublico, "/salidas/incendios-establecimientoPublico" },
            { TipoDeEmergencia.IncendioForestal, "/salidas/incendios-forestales" },
            { TipoDeEmergencia.IncendioHospitalesYClinicas, "/salidas/incendios-HospitalesClinicas" },
            { TipoDeEmergencia.IncendioIndustria, "/salidas/incendios-industriales" },
            { TipoDeEmergencia.IncendioVivienda, "/salidas/incendios-viviendas" },
            { TipoDeEmergencia.ServicioEspecialPrevencion, "/salidas/serviciosPrevencion" },
            { TipoDeEmergencia.Incendio, "/salidas/incendios-Otro" },
            { TipoDeEmergencia.IncendioAeronaves, "/salidas/incendios-Aereonaves" },
            { TipoDeEmergencia.ServicioEspecialCapacitacion, "/salidas/serviciosCapacitacion" },
            { TipoDeEmergencia.ServicioEspecialColocacionDriza, "/salidas/serviciosColocacionDriza" },
            { TipoDeEmergencia.ServicioEspecialSuministroAgua, "/salidas/serviciosSuministroAgua" },
            { TipoDeEmergencia.ServicioEspecialFalsaAlarma, "/salidas/serviciosFalsaAlarmas" },
            { TipoDeEmergencia.ServicioEspecialRetiradoDeObito, "/salidas/serviciosRetiradoDeObito" },
            { TipoDeEmergencia.ServicioEspecialColaboracionFuerzasSeguridad, "/salidas/serviciosColaboraciónFuerzasSeguridad" }
    };
}