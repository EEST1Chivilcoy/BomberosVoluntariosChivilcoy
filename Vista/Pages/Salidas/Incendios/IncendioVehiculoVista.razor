@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-vehiculares"
@using Vista.Services;
@inject ISalidaService SalidaService;
@using System.ComponentModel.DataAnnotations;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;
@using System.Text.Json;
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 10px !important;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
        margin-right: 78px !important;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border-radius: 5px 5px !important;
    }

    .ant-btn:hover, .ant-btn:focus, .ant-btn:active {
        text-decoration: none;
        background: #40a9ff !important;
    }

    .ant-btn:hover, .ant-btn:focus {
        color: white !important;
        border-color: #40a9ff !important;
        background: #40a9ff !important;
    }

    textarea {
        resize: none !important;
        min-height: 250pxpx !important;
        width: 100% !important;
    }

    .ant-checkbox-input:checked + .ant-checkbox-inner {
        background-color: #4CAF50 !important;
        border-color: #4CAF50 !important;
    }
</style>

<Form Model="@salidaIncendioVehicularView"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <div class="steps-content" style="max-height: 620px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
            @if (current == 0)
            {
                @*General*@
                <DatosGenerales Model="@salidaIncendioVehicularView"
                                animationClass="@animationClass"
                                esSoloDireccion="true" />
            }
            else if (current == 1)
            {
                @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@salidaIncendioVehicularView"
                               animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                @*Seguro*@
                <Seguro Model="@salidaIncendioVehicularView"
                        animationClass="@animationClass" />
            }
            else if (current == 3)
            {
                @*Chofer y Movil*@
                <Vehiculos Model="@salidaIncendioVehicularView"
                           animationClass="@animationClass" />
            }
            else if (current == 4)
            {
                @*Bomberos*@
                <Personal Model="@salidaIncendioVehicularView"
                          animationClass="@animationClass" />
            }
            else if (current == 5)
            {@*Vehiculo*@
                <DatosVehiculoDamnificado Model="@salidaIncendioVehicularView"
                                          animationClass="@animationClass"
                                          vehiculo="@vehiculo"
                                          DamnificadosSalida="@DamnificadosSalida"
                                          damnificadoVehiculoId="@damnificadoVehiculoId"
                                          damnificadoVehiculoCall="@HandleDamnificadoVehiculo" />
            }
            else if (current == 6)
            {@*Info-Salida*@
                <div class="slick-contenedor">
                    <DatosSalida Model="@salidaIncendioVehicularView"
                                 animationClass="@animationClass" />
                </div>
            }
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {
    @*Context y ViewModels*@
    BomberosDbContext Context { get; set; }
    public IncendioViewModels salidaIncendioVehicularView = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public VehiculoDamnificadoViewModels vehiculo = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();
    public string damnificadoVehiculoId;

    Bombero[] TodosBomberos;
    Movil[] Moviles;

    @*Sucess y Imprimir*@
    bool _visible1;

    private void HandleDamnificadoVehiculo(string value)
    {
        damnificadoVehiculoId = value;
        StateHasChanged();
    }

    //Impresion - Planilla

    public int ImprimirNumeroParte;
    public int ImprimirAnio;

    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    @*Damnificados*@
    bool switchValue { get; set; }// Cargar Damnificado [Si/No]

    @*Bomberos*@
    int BomberoCuerpo;
    int BomberoReceptor;// Falta info..

    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in TodosBomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    Dotacion = b.Dotacion,
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                };
            if (b.Chofer == true)
            {
                bomberoChoferes.Add(bombero);
            }
            bomberoTodos.Add(bombero);
        }
    }

    @*Moviles | Chofer*@
    int chofer;
    string NumeroMovil;
    bool _visible = false;// Modal de Carga de Combustible

    bool loading = false;

    void toggle(bool value) => loading = value;

    //Modals
    private void ShowModal()
    {
        _visible = true;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    @*Steps*@
    public int current { get; set; } = 0;
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Solicitante||Damnificado/s */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos Bombero */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}, /* Vehiculo */
        new StepItem {Title = " ", Content = ""} /* Salida */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    @*Init | OnChange y OnFinish*@

    protected override async Task OnInitializedAsync()
    {

        await Init();

    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        salidaIncendioVehicularView = new();
        salidaIncendioVehicularView.Tipo = TipoIncendio.Vehicular; // Establecer valor predeterminado
        TodosBomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }
    private async void OnFinish(EditContext editContext)
    {
        try
        {

            Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == salidaIncendioVehicularView.LegajoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == salidaIncendioVehicularView.LegajoLLenoPlanilla).SingleOrDefaultAsync();

            if (salidaIncendioVehicularView is not null)
            {
                Vista.Data.Models.Salidas.Planillas.Incendio? numeroParte = await Context.Set<Incendio>().Where(m => m.NumeroParte == salidaIncendioVehicularView.NumeroParte).SingleOrDefaultAsync();
                if (numeroParte != null)
                {
                    message.Warning("Numero parte ya existente.");
                    return;
                }
                if (salidaIncendioVehicularView is not null)
                {
                    Vista.Data.Models.Salidas.Planillas.Incendio salidaIncendioVehicular = new()
                        {
                            Tipo = salidaIncendioVehicularView.Tipo,
                            Descripcion = salidaIncendioVehicularView.Descripcion,
                            HoraSalida = salidaIncendioVehicularView.HoraSalida,
                            HoraLlegada = salidaIncendioVehicularView.HoraLLegada,
                            //KmSalida = salidaIncendioVehicularView.KmSalida,
                            //KmLlegada = salidaIncendioVehicularView.KmLlegada,
                            NumeroParte = salidaIncendioVehicularView.NumeroParte,
                            AnioNumeroParte = salidaIncendioVehicularView.AnioNumeroParte,
                            CalleORuta = salidaIncendioVehicularView.CalleORuta,
                            NumeroOKilometro = salidaIncendioVehicularView.NumeroOKilometro,
                            EntreCalles = salidaIncendioVehicularView.EntreCalles,
                            TipoZona = salidaIncendioVehicularView.TipoZona,
                            NombreSolicitante = salidaIncendioVehicularView.NombreSolicitante,
                            ApellidoSolicitante = salidaIncendioVehicularView.ApellidoSolicitante,
                            NombreYApellidoReceptor = salidaIncendioVehicularView.NombreYApellidoReceptor,
                            DniSolicitante = salidaIncendioVehicularView.DniSolicitante,
                            TelefonoSolicitante = salidaIncendioVehicularView.TelefonoSolicitante,
                            DeteccionAutomaticaId = salidaIncendioVehicularView.DeteccionAutomaticaId,
                            TipoServicio = salidaIncendioVehicularView.TipoServicio,
                            Extintor = salidaIncendioVehicularView.Extintor,
                            Hidrante = salidaIncendioVehicularView.Hidrante,
                            TipoEvacuacion = salidaIncendioVehicularView.TipoEvacuacion,
                            TipoSuperficieAfectada = salidaIncendioVehicularView.TipoSuperficieAfectada,
                            DetalleSuperficieAfectadaIncendio = salidaIncendioVehicularView.DetalleSuperficieAfectadaIncendio,
                            SuperficieAfectadaCausa = salidaIncendioVehicularView.SuperficieAfectadaCausa,
                            QuienLleno = BomberoLlenoPlanilla,
                            ReceptorBombero = bomberoReceptor,
                            Encargado = bomberoEncargado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = salidaIncendioVehicularView.CompaniaAseguradora,
                                NumeroDePoliza = salidaIncendioVehicularView.NumeroPoliza,
                                FechaDeVencimineto = salidaIncendioVehicularView.FechaVencimineto,
                            },
                            Damnificados = new(),
                            Moviles = new(),
                            CuerpoParticipante = new()
                        };
                    foreach (BomberoSalidaViewModels bom in bomberosSalida)
                    {
                        Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                        BomberoSalida BomSalida = new()
                            {
                                MovilAsignado = bom.MovilAsignado,
                                Bombero = bomberoSalida
                            };
                        salidaIncendioVehicular.CuerpoParticipante.Add(BomSalida);
                    }

                    // Moviles
                    if (salidaIncendioVehicularView.Moviles != null && salidaIncendioVehicularView.Moviles.Any())
                    {
                        // Crear una lista para los móviles de salida
                        var movilessalida = new List<MovilSalida>();

                        foreach (var m in salidaIncendioVehicularView.Moviles)
                        {
                            // Obtener el bombero chofer y el móvil desde la base de datos
                            var bomberoChofer = await Context.Bomberos
                                .SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
                            var movilsalida = await Context.Moviles
                                .SingleOrDefaultAsync(mob => mob.NumeroMovil == m.Movil.NumeroMovil);

                            // Actualizar el kilometraje del móvil
                            if (movilsalida != null)
                            {
                                movilsalida.Kilometraje = m.KmLlegada;
                            }

                            // Crear una nueva instancia de MovilSalida y agregarla a la lista
                            var movilS = new MovilSalida
                                {
                                    CargoCombustible = m.CargoCombustible,
                                    NumeroFactura = movilSalidaViewModels.NumeroFactura,
                                    FechaFactura = movilSalidaViewModels.FechaFactura,
                                    TipoConbustible = movilSalidaViewModels.TipoConbustible,
                                    CantidadLitros = movilSalidaViewModels.CantidadLitros,
                                    QuienLleno = movilSalidaViewModels.QuienLleno,
                                    TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                                    KmLlegada = m.KmLlegada,
                                    Chofer = bomberoChofer,
                                    Movil = movilsalida
                                };

                            movilessalida.Add(movilS);
                        }

                        // Asignar la lista de móviles a la salida
                        salidaIncendioVehicular.Moviles = movilessalida;
                    }

                    VehiculoDamnificado AgregarVehiculo = new()
                        {
                            Marca = vehiculo.Marca,
                            Patente = vehiculo.Patente,
                            Tipo = vehiculo.Tipo,
                            Año = vehiculo.Año,
                            Modelo = vehiculo.Modelo,
                            Color = vehiculo.Color,
                            Airbag = vehiculo.Airbag
                        };
                    foreach (DamnificadoViewModels d in DamnificadosSalida)
                    {
                        Damnificado damn = new()
                            {
                                Nombre = d.Nombre,
                                Apellido = d.Apellido,
                                Dni = d.Dni,
                                Sexo = d.Sexo,
                                LugarDeNacimiento = d.LugarDeNacimiento,
                                Edad = d.Edad,
                                Estado = d.Estado,
                                VehiculoDamnificado = d.NombreYApellido == damnificadoVehiculoId ? AgregarVehiculo : null
                            };
                        salidaIncendioVehicular.Damnificados.Add(damn);
                    }
                    await SalidaService.CargarSalida(salidaIncendioVehicular);
                    HandleOk1(salidaIncendioVehicular.AnioNumeroParte, salidaIncendioVehicular.NumeroParte);
                    await Init();
                    StateHasChanged();
                    await message.Success("Salida agregada correctamente");
                }
            }
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
    }



    //OnFinishFailed
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(salidaIncendioVehicularView)}");
        message.Error("Error al cargar, posible información ausente");
    }

    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }

    @*"Delete" y Dispose*@

    public void Dispose()
    {
        Context?.Dispose();
    }
}
