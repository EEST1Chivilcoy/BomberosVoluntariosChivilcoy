@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-industriales"
@using System.ComponentModel.DataAnnotations;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;
@using System.Text.Json;

<style>
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    textarea {
        resize: none !important;
        min-height: 250pxpx !important;
        width: 100% !important;
    }
</style>

<div class="contenedor" style="max-width: 100%;margin-top: 2em;">
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>
    <div class="steps-content" style="max-height: 620px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
        <Form Model="@salidaIncendioIndustrialView"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              Style="width: 100%;height: 100%;overflow: hidden!important;">

            @if (current == 0)
            {
                <div class="slick-contenedor @animationClass">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Descripcion</label>
                        <Input @bind-Value="@salidaIncendioIndustrialView.Descripcion" />
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Hora salida</label>
                            <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@salidaIncendioIndustrialView.HoraSalida" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Hora llegada</label>
                            <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@salidaIncendioIndustrialView.HoraLLegada" />
                        </div>
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Calle/Ruta</label>
                            <Input @bind-Value="@salidaIncendioIndustrialView.CalleORuta" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Numero/kilometro</label>
                            <Input @bind-Value="@salidaIncendioIndustrialView.NumeroOKilometro" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Entre calles</label>
                        <Input @bind-Value="@salidaIncendioIndustrialView.EntreCalles" />
                    </div>
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">PisoNumero</label>
                            <Input @bind-Value="@salidaIncendioIndustrialView.PisoNumero" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Depto</label>
                            <Input @bind-Value="@salidaIncendioIndustrialView.Depto" />
                        </div>
                    </div>
                </div>
            }
            else if (current == 1)
            {
                <div class="slick-contenedor @animationClass">
                    <h6>Datos del solicitante</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Nombre</label>
                            <Input @bind-Value="@salidaIncendioIndustrialView.NombreSolicitante" />
                        </div>
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Apellido</label>
                            <Input @bind-Value="@salidaIncendioIndustrialView.ApellidoSolicitante" />
                        </div>
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Documento</label>
                        <Input @bind-Value="@salidaIncendioIndustrialView.DniSolicitante" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Telefono</label>
                        <Input @bind-Value="@salidaIncendioIndustrialView.TelefonoSolicitante" />
                    </div>

                    <h6>Datos de damnificados</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 80px;">
                            <label class="inpt-cont--lbl">¿Hubo damnificados?</label>
                            <Switch @bind-Checked="switchValue" Style="width: 10px!important;" />
                        </div>
                        @if (switchValue == true)
                        {
                            <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 90px;">
                                <label class="inpt-cont--lbl">Agregar otro</label>
                                <Button OnClick="()=>visibleDamnificados = true">
                                    <i class="fa-solid fa-user-plus"></i>
                                </Button>
                            </div>
                            <div class="inpt-cont" style="display: flex;flex-direction: column;justify-content: space-around;min-width: 90px;">
                                <label class="inpt-cont--lbl">Ver damnificados</label>
                                <Button OnClick="()=>visibleVerDamnificados = true">
                                    <i class="fa-solid fa-users-gear"></i>
                                </Button>
                            </div>
                        }
                    </div>

                    <Modal Footer="null" Title="@("Damnificados")"
                           Visible="@visibleVerDamnificados"
                           OnOk="@HandleOkD"
                           OnCancel="@HandleCancelVD">
                        <div class="inpt-cont">
                            <Table Context="Damnificados" DataSource="DamnificadosSalida" Bordered>
                             <PropertyColumn Property="d=>d.NombreYApellido"></PropertyColumn>
                             <PropertyColumn Property="d=>d.Edad"></PropertyColumn>
                             <PropertyColumn Property="d=>d.Estado"></PropertyColumn>
                             <ActionColumn Title="Acciones">
                                 <Popconfirm Title="¿Quieres borrar este damnificado?"
                                             OnConfirm="()=> deleteRowDamnificados(Damnificados.Dni)"
                                             OkText="Si"
                                             CancelText="No"
                                             Style="display: flex;justify-content: center;align-items: center;">
                                     <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                 </Popconfirm>
                             </ActionColumn>
                         </Table>
                     </div>
                 </Modal>

                 @if (switchValue == true)
                    {
                        <Modal Footer="null" Title="@("Datos del damnificado")"
                               Visible="@visibleDamnificados"
                               OnOk="@HandleOkD"
                               OnCancel="@HandleCancelD">
                            <div class="inpt-cont-inline">
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Nombre</label>
                                    <Input @bind-Value="@damnificado.Nombre" />
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Apellido</label>
                                    <Input @bind-Value="@damnificado.Apellido" />
                                </div>
                            </div>
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Documento</label>
                                <Input @bind-Value="@damnificado.Dni" />
                            </div>
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Lugar de nacimiento</label>
                                <Input @bind-Value="@damnificado.LugarDeNacimiento" />
                            </div>
                            <div class="inpt-cont-inline">
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Sexo</label>
                                    <Input @bind-Value="@damnificado.Sexo" />
                                </div>
                                <div class="inpt-cont">
                                    <label class="inpt-cont--lbl">Edad</label>
                                    <Input @bind-Value="@damnificado.Edad" />
                                </div>
                            </div>
                            <div class="inpt-cont">
                                <label class="inpt-cont--lbl">Estado</label>
                                <EnumSelect TEnum="TipoDamnificado" @bind-Value="@damnificado.Estado" />
                            </div>
                            <div class="inpt-cont">
                                <Button Class="boton_p" OnClick="@AgregarDamnificado">Agregar damnificado</Button>
                            </div>
                        </Modal>
                    }
                </div>
            }
            else if (current == 2)
            {
                <h6>Seguro del lugar</h6>

                <div class="slick-contenedor @animationClass">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Compania aseguradora del establecimiento</label>
                        <Input @bind-Value="@salidaIncendioIndustrialView.CompaniaAseguradora" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Numero de poliza</label>
                        <Input @bind-Value="@salidaIncendioIndustrialView.NumeroPoliza" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Fecha de vencimineto</label>
                        <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@salidaIncendioIndustrialView.FechaVencimineto" />
                    </div>
                </div>
            }
            else if (current == 3)
            {
                <div class="slick-contenedor @animationClass">
                    <h6>Datos del chofer</h6>

                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Elija el chofer</label>
                            <Select TItem="BomberoViweModel"
                                    TItemValue="int"
                                    DataSource="@bomberoChoferes"
                                    @bind-Value="@chofer"
                                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                    Placeholder="Selecione a un bombero"
                                    DefaultActiveFirstOption="false"
                                    AllowClear="true"
                                                    EnableSearch>
                         </Select>
                     </div>
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">Numero de movil</label>
                         <Select TItem="Movil"
                                 TItemValue="string"
                                 DataSource="@Moviles"
                                 @bind-Value="@NumeroMovil"
                                 LabelName="@nameof(Movil.NumeroMovil)"
                                 ValueName="@nameof(Movil.NumeroMovil)"
                                 Placeholder="Selecione el movil"
                                 DefaultActiveFirstOption="false"
                                 AllowClear="true"
                                 EnableSearch>
                         </Select>
                     </div>
                 </div>
                 @if (NumeroMovil is not null)
                    {
                        foreach (Movil m in Moviles)
                        {
                            if (m.NumeroMovil == NumeroMovil)
                            {
                                if (m.NumeroMovil == NumeroMovil)
                                {
                                    salidaIncendioIndustrialView.Kilometraje = m.Kilometraje;
                                    break;
                                }
                                salidaIncendioIndustrialView.Kilometraje = m.Kilometraje;
                                break;
                            }
                        }
                    }
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Kilometro de salida</label>
                            <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.Kilometraje" Disabled />
                         </div>
                         <div class="inpt-cont">
                             <label class="inpt-cont--lbl">Kilometro de llegada</label>
                             <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.KmLlegada" />
                         </div>
                     </div>
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">¿Cargo combustible?</label>
                         <Switch @bind-Checked="switchMoviles" Disabled="@desactivarSwitch" Style="width: 10px!important;" />
                         @if (switchMoviles == true)
                        {
                            <Modal Title="@("Datos de la carga de combustible")"
                                   Visible="@_visible"
                                   OnOk="@HandleOk"
                                   OnCancel="@HandleCancelMovil">
                                <Form Loading="loading" Model="@movilSalidaViewModels"
                                      LabelColSpan="8"
                                      WrapperColSpan="16"
                                      OnFinish="OnFinishModel"
                                      OnFinishFailed="OnFinishFailed"
                                @ref="@_form1" Context="modalMoviles">
                                    <FormItem Label="Numero factura">
                                        <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
                                    </FormItem>
                                    <FormItem Label="Fecha factura">
                                        <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
                                    </FormItem>
                                    <FormItem Label="Tipo Combustible">
                                        <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
                                    </FormItem>
                                    <FormItem Label="Cantidad de Litros">
                                        <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
                                    </FormItem>
                                    <FormItem Label="Quien lleno">
                                        <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
                                    </FormItem>
                                    <FormItem Label="TelefonoQuienLleno">
                                        <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
                                    </FormItem>
                                </Form>
                            </Modal>
                        }
                    </div>
                    <div class="inpt-cont">
                        <Button OnClick="@AgregarMovilSalida">Cargar movil</Button>
                    </div>
                    @if (MovilesSalidasL is not null)
                    {
                        <div>
                            <Table Size="TableSize.Small" PageSize="4" Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
                             <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
                             <PropertyColumn Property="c=>c.ChoferNombreCompleto"></PropertyColumn>
                             <ActionColumn Title="Acciones">
                                 <Popconfirm Title="¿Quieres borrar este movil?"
                                             OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                                             OkText="Si"
                                             CancelText="No">
                                     <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                                 </Popconfirm>
                             </ActionColumn>
                         </Table>
                     </div>
                    }
                </div>
            }
            else if (current == 4)
            {
                <div class="slick-contenedor @animationClass">
                    <h6>Cuerpo Participante</h6>

                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Elija el bombero</label>
                        <Select TItem="BomberoViweModel"
                                TItemValue="int"
                                DataSource="@bomberoTodos"
                        @bind-Value="@BomberoCuerpo"
                                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                Placeholder="Selecione un bombero"
                                DefaultActiveFirstOption="false"
                                AllowClear="true" EnableSearch>
                     </Select>
                 </div>
                 <div class="inpt-cont">
                     <Checkbox @bind-Checked="chekB">¿Salió?</Checkbox>
                 </div>
                 <div class="inpt-cont">
                     <Button OnClick="@AgregarCuerpoParticipante">Cargar al cuerpo participante</Button>
                 </div>
                 <div class="inpt-cont">
                     <Table Context="bomberosSalida1" Size="TableSize.Small" PageSize="4" DataSource="bomberosSalida" Bordered>
                         <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
                         <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
                         <ActionColumn Title="Acciones">
                             <Popconfirm Title="¿Quieres eliminar este bombero?"
                                         OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                                         OkText="Si"
                                         CancelText="No">
                                 <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                             </Popconfirm>
                         </ActionColumn>
                     </Table>
                 </div>
                 <div class="inpt-cont-inline">
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">Encargado</label>
                         <Select TItem="BomberoViweModel"
                                 TItemValue="int"
                                 DataSource="@bomberoTodos"
                                 @bind-Value="@BomberoEncargado"
                                 LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                 ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                 Placeholder="Seleccione  a un  bombero"
                                 DefaultActiveFirstOption="true"
                                 AllowClear="true" EnableSearch>
                         </Select>
                     </div>
                     <div class="inpt-cont">
                         <label class="inpt-cont--lbl">Lleno la planilla</label>
                         <Select TItem="BomberoViweModel"
                                 TItemValue="int"
                                 DataSource="@bomberoTodos"
                         @bind-Value="@QuienLLenoPlanilla"
                                 LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                                 ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                                 Placeholder="Seleccione un bombero"
                                 DefaultActiveFirstOption="false"
                                 AllowClear="true"
                                                    EnableSearch>
                         </Select>
                     </div>
                 </div>
             </div>
            }
            else if (current == 5)
            {
                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo de Servicio</label>
                        <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@salidaIncendioIndustrialView.TipoServicio" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo de Zona</label>
                        <EnumSelect TEnum="TipoZona" @bind-Value="@salidaIncendioIndustrialView.TipoZona" />
                    </div>
                </div>

                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Nombre del Establecimiento</label>
                    <Input @bind-Value="salidaIncendioIndustrialView.NombreEstablecimiento" />
                </div>
                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Lugar</label>
                        <EnumSelect TEnum="TipoIncendioIndustria" @bind-Value="@salidaIncendioIndustrialView.TipoLugar" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Causa</label>
                        <EnumSelect TEnum="TipoCausaIncendio" @bind-Value="@salidaIncendioIndustrialView.SuperficieAfectadaCausa" />
                    </div>
                </div>

                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Cant.Pisos</label>
                        <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.CantidadPisos" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Pisos Afectados</label>
                        <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.PisoAfectado" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Cant. Ambientes</label>
                        <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.CantidadAmbientes" />
                    </div>
                </div>

                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Dimensiones</label>
                        <EnumSelect TEnum="TipoSuperficie" @bind-Value="@salidaIncendioIndustrialView.TipoSuperficieAfectada" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo de Evacuacion</label>
                        <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@salidaIncendioIndustrialView.TipoEvacuacion" />
                    </div>
                </div>

                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo de Techo</label>
                        <EnumSelect TEnum="TipoIncendioTecho?" @bind-Value="@salidaIncendioIndustrialView.TipoTecho" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Tipo de Abertura</label>
                        <EnumSelect TEnum="TipoIncendioAbertura?" @bind-Value="@salidaIncendioIndustrialView.TipoAbertura" />
                    </div>
                </div>

                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <Checkbox @bind-Checked="salidaIncendioIndustrialView.DeteccionAutomaticaId">Deteccion Automatica</Checkbox>
                    </div>
                    <div class="inpt-cont">
                        <Checkbox @bind-Checked="salidaIncendioIndustrialView.Extintor">Extintor</Checkbox>
                    </div>
                    <div class="inpt-cont">
                        <Checkbox @bind-Checked="salidaIncendioIndustrialView.Hidrante">Hidrante</Checkbox>
                    </div>
                </div>

                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Detalles</label>
                    <TextArea Placeholder="Descripcion" @bind-Value="salidaIncendioIndustrialView.DetalleSuperficieAfectadaIncendio" />
                </div>
            }
        </Form>
    </div>
    <div class="steps-action">
        @if (current > 0)
        {
            <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
        }
        @if (current < steps.Length - 1)
        {
            <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
        }
        @if (current == steps.Length - 1)
        {
            <Button Class="boton_p" HtmlType="submit">
                Cargar salida
            </Button>
        }
    </div>
</div>
@* 

    <b><label>Salida</label></b>
    <FormItem Label="Tipo Servicio salida">
        <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@salidaIncendioIndustrialView.TipoServicio" />
    </FormItem>
    <FormItem Label="Tipo de Zona">
        <EnumSelect TEnum="TipoZona" @bind-Value="@salidaIncendioIndustrialView.TipoZona" />
    </FormItem>
    <FormItem Label="Lugar">
        <EnumSelect TEnum="TipoIncendioIndustria" @bind-Value="@salidaIncendioIndustrialView.TipoLugar" />
        @if (salidaIncendioIndustrialView.TipoLugar == TipoIncendioIndustria.Otro)
        {
            <FormItem Label="OtroLugar">
                <Input @bind-Value="@salidaIncendioIndustrialView.OtroLugar" />
            </FormItem>
        }
    </FormItem>
    <FormItem Label="Superficie Afectada Causa">
        <EnumSelect TEnum="TipoCausaIncendio" @bind-Value="@salidaIncendioIndustrialView.SuperficieAfectadaCausa" />
    </FormItem>
    <FormItem Label="Nombre establecimiento:">
        <Input @bind-Value="salidaIncendioIndustrialView.NombreEstablecimiento" />
        <br>
    </FormItem>
    <FormItem Label="Cantidad pisos:">
        <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.CantidadPisos" />
        <br>
    </FormItem>
    <FormItem Label="Pisos afectados">
        <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.PisoAfectado" />
        <br>
    </FormItem>

    <FormItem Label="Cantidad ambientes:">
        <AntDesign.InputNumber @bind-Value="salidaIncendioIndustrialView.CantidadAmbientes" />
        <br>
    </FormItem>
    <FormItem Label="Tipo Evacuacion">
        <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@salidaIncendioIndustrialView.TipoEvacuacion" />
    </FormItem>
    <FormItem Label="Tipo Superficie">
        <EnumSelect TEnum="TipoSuperficie" @bind-Value="@salidaIncendioIndustrialView.TipoSuperficieAfectada" />
    </FormItem>
    <FormItem Label="Detalles Surpeficie Afectada ">
        <Input @bind-Value="salidaIncendioIndustrialView.DetalleSuperficieAfectadaIncendio" />
    </FormItem>
    <FormItem Label="Tipo Techo">
        <EnumSelect TEnum="TipoIncendioTecho?" @bind-Value="@salidaIncendioIndustrialView.TipoTecho" />
        @if (salidaIncendioIndustrialView.TipoTecho == TipoIncendioTecho.Otro)
        {
            <FormItem Label="Otro Techo">
                <Input @bind-Value="@salidaIncendioIndustrialView.OtroTecho" />
            </FormItem>
        }
    </FormItem>
    <FormItem Label="Tipo Abertura">
        <EnumSelect TEnum="TipoIncendioAbertura?" @bind-Value="@salidaIncendioIndustrialView.TipoAbertura" />
        @if (salidaIncendioIndustrialView.TipoAbertura == TipoIncendioAbertura.Otro)
        {
            <FormItem Label="Otro Abertura">
                <Input @bind-Value="@salidaIncendioIndustrialView.OtraAbertura" />
            </FormItem>
        }
    </FormItem>
    <div>
        <b><label>Hubo deteccion automatica?</label></b>
        <Checkbox @bind-Checked="salidaIncendioIndustrialView.DeteccionAutomaticaId"></Checkbox>
    </div>
    <div>
        <b><label>Habia Extintor?</label></b>
        <Checkbox @bind-Checked="salidaIncendioIndustrialView.Extintor"></Checkbox>
    </div>
    <div>
        <b><label>Habia Hidrante?</label></b>
        <Checkbox @bind-Checked="salidaIncendioIndustrialView.Hidrante"></Checkbox>
    </div>
<Modal Title="@("Datos de la carga de Incendio")"
       Visible="@imprimirmodal"
       OnOk="@HandleOkIMP"
       OnCancel="@HandleCancelIMP">
    <p>Imprimir con croquis</p>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{salidaIncendioIndustrialView.NumeroParte}/{true}", true); })">Si</button>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{salidaIncendioIndustrialView.NumeroParte}/{false}", true); })">No</button>
</Modal>
 *@
@code {
    BomberosDbContext Context { get; set; }
    public IncendioIndustriaViewModels salidaIncendioIndustrialView = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    private Form<MovilSalidaViewModels> _form1;


    Bombero[] TodosBomberos;
    Movil[] Moviles;

    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();
    bool switchValue { get; set; }
    bool switchValueS { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }
    bool imprimirmodal;

    bool switchMoviles { get; set; }
    bool _visible1;
    bool desactivarSwitch { get; set; }
    bool visibleDamnificados = true;
    bool visibleVerDamnificados;
    // Nuevo
    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;

    //Steps
    public int current { get; set; } = 0;
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}  /* Comercio */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    private void HandleOkD(MouseEventArgs e)
    {
        visibleDamnificados = false;
    }

    private void HandleCancelD(MouseEventArgs e)
    {
        visibleDamnificados = false;
    }
    private void HandleCancelVD(MouseEventArgs e)
    {
        visibleVerDamnificados = false;
    }

    private void HandleCancelMovil(MouseEventArgs e)
    {
        switchMoviles = false;
        desactivarSwitch = false;
    }

    public async Task AgregarDamnificado()
    {

        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

            };
        DamnificadosSalida.Add(dp);
        StateHasChanged();
    }

    public async Task AgregarMovilSalida()
    {

        Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await Context.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                KmLlegada = salidaIncendioIndustrialView.KmLlegada,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,

            };
        MovilesSalidasL.Add(m);
        StateHasChanged();

    }

    public async Task AgregarCuerpoParticipante()
    {
        var boberos = await Context.Bomberos.ToArrayAsync();
        foreach (var bom in boberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                    {
                        Salio = bomberoSalidaView.Salio,
                        Nombre = bom.Nombre,
                        Apellido = bom.Apellido,
                        NumeroLegajo = BomberoCuerpo
                    };
                bomberosSalida.Add(b);
            }
        }
        StateHasChanged();

    }
    protected override async Task OnInitializedAsync()
    {

        await Init();

    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        salidaIncendioIndustrialView = new();
        salidaIncendioIndustrialView.Tipo = TipoIncendio.Industria; // Establecer valor predeterminado
        TodosBomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == QuienLLenoPlanilla).SingleOrDefaultAsync();
            if (salidaIncendioIndustrialView is not null)
            {
                IncendioIndustria? numeroParte = await Context.IncendiosIndustrias.Where(m => m.NumeroParte == salidaIncendioIndustrialView.NumeroParte).SingleOrDefaultAsync();
                if (salidaIncendioIndustrialView is not null)
                {
                    IncendioIndustria salidaIncendioIndustria = new()
                        {
                            Tipo = salidaIncendioIndustrialView.Tipo,
                            Descripcion = salidaIncendioIndustrialView.Descripcion,
                            HoraSalida = salidaIncendioIndustrialView.HoraSalida,
                            HoraLlegada = salidaIncendioIndustrialView.HoraLLegada,
                            //KmSalida = salidaIncendioIndustrialView.KmSalida,
                            //KmLlegada = salidaIncendioIndustrialView.KmLlegada,
                            NumeroParte = salidaIncendioIndustrialView.NumeroParte,
                            CalleORuta = salidaIncendioIndustrialView.CalleORuta,
                            NumeroOKilometro = salidaIncendioIndustrialView.NumeroOKilometro,
                            EntreCalles = salidaIncendioIndustrialView.EntreCalles,
                            PisoNumero = salidaIncendioIndustrialView.PisoNumero,
                            Depto = salidaIncendioIndustrialView.Depto,
                            TipoZona = salidaIncendioIndustrialView.TipoZona,
                            NombreSolicitante = salidaIncendioIndustrialView.NombreSolicitante,
                            ApellidoSolicitante = salidaIncendioIndustrialView.ApellidoSolicitante,
                            DniSolicitante = salidaIncendioIndustrialView.DniSolicitante,
                            TelefonoSolicitante = salidaIncendioIndustrialView.TelefonoSolicitante,
                            DeteccionAutomaticaId = salidaIncendioIndustrialView.DeteccionAutomaticaId,
                            Extintor = salidaIncendioIndustrialView.Extintor,
                            Hidrante = salidaIncendioIndustrialView.Hidrante,
                            TipoLugar = salidaIncendioIndustrialView.TipoLugar,
                            TipoEvacuacion = salidaIncendioIndustrialView.TipoEvacuacion,
                            TipoServicio = salidaIncendioIndustrialView.TipoServicio,
                            TipoSuperficieAfectada = salidaIncendioIndustrialView.TipoSuperficieAfectada,
                            DetalleSuperficieAfectadaIncendio = salidaIncendioIndustrialView.DetalleSuperficieAfectadaIncendio,
                            SuperficieAfectadaCausa = salidaIncendioIndustrialView.SuperficieAfectadaCausa,
                            TipoAbertura = salidaIncendioIndustrialView.TipoAbertura,
                            OtraAbertura = salidaIncendioIndustrialView.OtraAbertura,
                            TipoTecho = salidaIncendioIndustrialView.TipoTecho,
                            OtroTecho = salidaIncendioIndustrialView.OtroTecho,
                            OtroLugar = salidaIncendioIndustrialView.OtroLugar,
                            NombreEstablecimiento = salidaIncendioIndustrialView.NombreEstablecimiento,
                            CantidadPisos = salidaIncendioIndustrialView.CantidadPisos,
                            PisoAfectado = salidaIncendioIndustrialView.PisoAfectado,
                            CantidadAmbientes = salidaIncendioIndustrialView.CantidadAmbientes,
                            QuienLleno = BomberoLlenoPlanilla,
                            ReceptorBombero = bomberoReceptor,
                            Encargado = bomberoEncargado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = salidaIncendioIndustrialView.CompaniaAseguradora,
                                NumeroDePoliza = salidaIncendioIndustrialView.NumeroPoliza,
                                FechaDeVencimineto = salidaIncendioIndustrialView.FechaVencimineto,
                            },
                            Damnificados = new(),
                            Moviles = new(),
                            CuerpoParticipante = new()
                        };
                    foreach (BomberoSalidaViewModels bom in bomberosSalida)
                    {
                        Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                        BomberoSalida BomSalida = new()
                            {
                                Salio = bom.Salio,
                                Bombero = bomberoSalida
                            };
                        salidaIncendioIndustria.CuerpoParticipante.Add(BomSalida);
                    }

                    foreach (MovilSalidaViewModels m in MovilesSalidasL)
                    {
                        Bombero? bomberoChofer = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
                        Movil? Movilsalida = await Context.Moviles.SingleOrDefaultAsync(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil);
                        if (Movilsalida is not null)
                        {
                            Movilsalida.Kilometraje = m.KmLlegada;
                        }
                        MovilSalida movilS = new()
                            {
                                CargoCombustible = m.CargoCombustible,
                                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                                FechaFactura = movilSalidaViewModels.FechaFactura,
                                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                                QuienLleno = movilSalidaViewModels.QuienLleno,
                                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                                KmLlegada = m.KmLlegada,
                                Chofer = bomberoChofer,
                                Movil = Movilsalida
                            };
                        salidaIncendioIndustria.Moviles.Add(movilS);
                    }


                    foreach (DamnificadoViewModels d in DamnificadosSalida)
                    {

                        Damnificado damn = new()
                            {
                                Nombre = d.Nombre,
                                Apellido = d.Apellido,
                                Dni = d.Dni,
                                Sexo = d.Sexo,
                                LugarDeNacimiento = d.LugarDeNacimiento,
                                Edad = d.Edad,
                                Estado = d.Estado,
                            };
                        salidaIncendioIndustria.Damnificados.Add(damn);
                    }
                    await Context.IncendiosIndustrias.AddAsync(salidaIncendioIndustria);
                    await Context.SaveChangesAsync();


                    await Init();
                    StateHasChanged();
                    await message.Success("Salida agregada correctamente");
                    imprimirmodal = true;
                }
            }
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
            imprimirmodal = true;
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(salidaIncendioIndustrialView)}");
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }

    public async void SubirIncendioIndustria()
    {

        


    }
    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in TodosBomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            bomberoTodos.Add(bombero);

        }
        foreach (Bombero c in TodosBomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        //NombreImagen = b.NombreImagen,
                        //TipoImagen = b.TipoImagen,
                        //Base64Imagen = b.Base64,
                        Dotacion = c.Dotacion,
                        //Nombre = b.NombreBrigada,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                        //TelefonoCel = b.TelefonoCel,
                        //TelefonoFijo = b.TelefonoFijo,
                        //TelefonoLaboral = b.TelefonoLaboral,
                        //Email = b.Email,
                    };
                bomberoChoferes.Add(bomberoChofer);
            }
        }
    }
    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }
    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    private void ShowModal()
    {
        _visible = true;
    }
    public void ShowModal1()
    {
        _visible1 = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }
    private void HandleCancelIMP(MouseEventArgs e)
    {

        imprimirmodal = false;
    }
    private void OnFinishModel(EditContext editContext)
    {

        _visible = false;
    }
    private void HandleOk(MouseEventArgs e)
    {

        _visible = false;

    }
    private void HandleOkIMP(MouseEventArgs e)
    {

        imprimirmodal = false;

    }
    private void HandleCancel1(MouseEventArgs e)
    {

        _visible1 = false;
    }
    private void HandleOk1(MouseEventArgs e)
    {
        navigationManager.NavigateTo($"/legajo");
        _visible1 = false;

    }
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }

}
