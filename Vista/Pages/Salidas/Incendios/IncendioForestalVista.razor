@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-forestales"
@using Vista.Services;
@inject ISalidaService SalidaService;
@using System.ComponentModel.DataAnnotations;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;
@using System.Text.Json;
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<Form Model="@salidaIncendioForestalView"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%; overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">

        <div style="text-align: center; margin-bottom: 20px;">
            <h2>INCENDIO FORESTAL</h2>
        </div>


        @*Datos*@
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <Flex Justify="center">
            <div class="steps-content" style="max-height: 620px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
            @if (current == 0)
            {
                <DatosGenerales Model="@salidaIncendioForestalView"
                                animationClass="@animationClass"
                                esSoloDireccion="true" />
            }
            else if (current == 1)
            {
                @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@salidaIncendioForestalView"
                               animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                <Seguro Model="@salidaIncendioForestalView"
                        animationClass="@animationClass" />
            }
            else if (current == 3)
            {
                @*Chofer y Moviles*@
                <Vehiculos Model="@salidaIncendioForestalView"
                           animationClass="@animationClass" />
            }
            else if (current == 4)
            {
                @*Bomberos*@
                <Personal Model="@salidaIncendioForestalView"
                          animationClass="@animationClass" />
            }
            else if (current == 5)
            {
                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Lugar</label>
                        <EnumSelect TEnum="TipoIncendioForestal" @bind-Value="@salidaIncendioForestalView.TipoLugar" />
                    </div>
                </div>
                <div class="slick-contenedor">
                    <DatosSalida Model="@salidaIncendioForestalView"
                                 animationClass="@animationClass" />
                </div>
            }
        </div>
        </Flex>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {

    BomberosDbContext Context { get; set; }
    public IncendioForestaViewModels salidaIncendioForestalView = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();

    @*Steps*@
    public int current { get; set; } = 0;
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales*/
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""},/*Seguro*/
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}  /* Salida */
    };

    Bombero[] TodosBomberos;
    Movil[] Moviles;

    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();
    bool damnsihubo { get; set; }
    bool switchValueS { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }
    bool _visible1;
    int BomberoReceptor;
    string NumeroMovil;
    int chofer;

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    public void ShowModal1()
    {
        _visible1 = true;
    }

    public int ImprimirNumeroParte;
    public int ImprimirAnio;

    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    protected override async Task OnInitializedAsync()
    {

        await Init();

    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        salidaIncendioForestalView = new();
        TodosBomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
    }

    //Carga de datos
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == salidaIncendioForestalView.LegajoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == salidaIncendioForestalView.LegajoLLenoPlanilla).SingleOrDefaultAsync();

            if (salidaIncendioForestalView is not null)
            {
                Vista.Data.Models.Salidas.Planillas.IncendioForestal? numeroParte = await Context.IncendiosForestales.Where(m => m.NumeroParte == salidaIncendioForestalView.NumeroParte).SingleOrDefaultAsync();
                if (numeroParte != null)
                {
                    message.Warning("Numero parte ya existente.");
                    return;
                }
                if (salidaIncendioForestalView is not null)
                {
                    //Informacion de salida
                    Vista.Data.Models.Salidas.Planillas.IncendioForestal salidaIncendioForestal = new()
                        {
                            
                            Descripcion = salidaIncendioForestalView.Descripcion,
                            HoraSalida = salidaIncendioForestalView.HoraSalida,
                            HoraLlegada = salidaIncendioForestalView.HoraLLegada,
                            //KmSalida = salidaIncendioViviendaVista.KmSalida,
                            //KmLlegada = salidaIncendioViviendaVista.KmLlegada,
                            NumeroParte = salidaIncendioForestalView.NumeroParte,
                            AnioNumeroParte = salidaIncendioForestalView.AnioNumeroParte,
                            CalleORuta = salidaIncendioForestalView.CalleORuta,
                            NumeroOKilometro = salidaIncendioForestalView.NumeroOKilometro,
                            EntreCalles = salidaIncendioForestalView.EntreCalles,
                            PisoNumero = salidaIncendioForestalView.PisoNumero,
                            Depto = salidaIncendioForestalView.Depto,
                            TipoZona = salidaIncendioForestalView.TipoZona,
                            NombreSolicitante = salidaIncendioForestalView.NombreSolicitante,
                            ApellidoSolicitante = salidaIncendioForestalView.ApellidoSolicitante,
                            DniSolicitante = salidaIncendioForestalView.DniSolicitante,
                            NombreYApellidoReceptor = salidaIncendioForestalView.NombreYApellidoReceptor,
                            TelefonoSolicitante = salidaIncendioForestalView.TelefonoSolicitante,
                            DeteccionAutomaticaId = salidaIncendioForestalView.DeteccionAutomaticaId,
                            Extintor = salidaIncendioForestalView.Extintor,
                            Hidrante = salidaIncendioForestalView.Hidrante,
                            TipoServicio = salidaIncendioForestalView.TipoServicio,
                            TipoLugar = salidaIncendioForestalView.TipoLugar,
                            TipoEvacuacion = salidaIncendioForestalView.TipoEvacuacion,
                            TipoSuperficieAfectada = salidaIncendioForestalView.TipoSuperficieAfectada,
                            DetalleSuperficieAfectadaIncendio = salidaIncendioForestalView.DetalleSuperficieAfectadaIncendio,
                            SuperficieAfectadaCausa = salidaIncendioForestalView.SuperficieAfectadaCausa,
                            TipoAbertura = salidaIncendioForestalView.TipoAbertura,
                            OtraAbertura = salidaIncendioForestalView.OtraAbertura,
                            TipoTecho = salidaIncendioForestalView.TipoTecho,
                            OtroTecho = salidaIncendioForestalView.OtroTecho,
                            OtroLugarIncendio = salidaIncendioForestalView.OtroLugar,
                            NombreEstablecimiento = salidaIncendioForestalView.NombreEstablecimiento,
                            CantidadPisos = salidaIncendioForestalView.CantidadPisos,
                            PisoAfectado = salidaIncendioForestalView.PisoAfectado,
                            CantidadAmbientes = salidaIncendioForestalView.CantidadAmbientes,
                            QuienLleno = BomberoLlenoPlanilla,
                            ReceptorBombero = bomberoReceptor,
                            Encargado = bomberoEncargado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = salidaIncendioForestalView.CompaniaAseguradora,
                                NumeroDePoliza = salidaIncendioForestalView.NumeroPoliza,
                                FechaDeVencimineto = salidaIncendioForestalView.FechaVencimineto,
                            },
                            Damnificados = new(),
                            Moviles = new(),
                            CuerpoParticipante = new()
                        };

                    //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
                    if (salidaIncendioForestalView.CuerpoParticipante != null && salidaIncendioForestalView.CuerpoParticipante.Any())
                    {
                        salidaIncendioForestal.CuerpoParticipante = salidaIncendioForestalView.CuerpoParticipante.ToList();
                    }

                    //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
                    if (salidaIncendioForestalView.Moviles != null && salidaIncendioForestalView.Moviles.Any())
                    {
                        salidaIncendioForestal.Moviles = salidaIncendioForestalView.Moviles.ToList();
                    }

                    //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
                    if (salidaIncendioForestalView.Damnificados != null && salidaIncendioForestalView.Damnificados.Any())
                    {
                        salidaIncendioForestal.Damnificados = salidaIncendioForestalView.Damnificados.ToList();
                    }

                    await SalidaService.GuardarSalida(salidaIncendioForestal);
                    HandleOk1(salidaIncendioForestal.AnioNumeroParte, salidaIncendioForestal.NumeroParte);
                    await Init();
                    StateHasChanged();
                    await message.Success("Salida agregada correctamente");
                }
            }
        }
        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(salidaIncendioForestalView)}");
        message.Error("Error al cargar, posible información ausente");
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
