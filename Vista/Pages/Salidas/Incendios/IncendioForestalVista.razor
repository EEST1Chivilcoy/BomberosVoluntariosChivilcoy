@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-forestales"
@using System.ComponentModel.DataAnnotations;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;
@using System.Text.Json;
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio;

<style>
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    textarea {
        resize: none !important;
        min-height: 250pxpx !important;
        width: 100% !important;
    }
</style>

<Form Model="@salidaIncendioForestalView"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">


            @if (current == 0)
            {@*General*@
                <DatosGenerales Model="@salidaIncendioForestalView" animationClass="@animationClass" OnChange="@OnChange" />
            }
            else if (current == 1)
            {@*Solicitante | Damnificado*@
                <Participantes Model="@salidaIncendioForestalView"
                               OnChange="@OnChange"
                               animationClass="@animationClass"
                               damnificado="@damnificado"
                               DamnificadosSalida="@DamnificadosSalida"
                               switchValue="@switchDamificados"
                               valorswitch="@HandleSwitchChanged" />
            }
            else if (current == 2)
            {@*Seguro*@
                <Seguro Model="@salidaIncendioForestalView"
                        OnChange="@OnChange"
                        animationClass="@animationClass" />
            }
            else if (current == 3)
            {@*Chofer | Movil*@
                <Vehiculos Model="@salidaIncendioForestalView"
                           OnChange="@OnChange"
                           animationClass="@animationClass"
                           bomberoChoferes="@bomberoChoferes"
                           movilSalidaViewModels="@movilSalidaViewModels"
                           chofer="@chofer"
                           Moviles="@Moviles"
                           NumeroMovil="@NumeroMovil"
                           MovilesSalidasL="@MovilesSalidasL" />
            }
            else if (current == 4)
            {@*Bomberos*@
                <Personal Model="@salidaIncendioForestalView"
                          OnChange="@OnChange"
                          animationClass="@animationClass"
                          bomberoTodos="@bomberoTodos"
                          bomberoSalidaView="@bomberoSalidaView"
                          bomberosSalida="@bomberosSalida"
                          BomberoEncargado="@BomberoEncargado"
                          QuienLLenoPlanilla="@QuienLLenoPlanilla"
                          BomberoEncargadoCall="@HandleBomberoEncargadoChanged"
                          QuienLLenoPlanillaCall="@HandleQuienLLenoPlanillaChanged" />
            }
            else if (current == 5)
            {@*Info-Salida*@
                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Lugar</label>
                        <EnumSelect TEnum="TipoIncendioForestal" @bind-Value="@salidaIncendioForestalView.TipoLugar" />
                    </div>
                </div>
                <DatosSalida Model="@salidaIncendioForestalView"
                             OnChange="@OnChange"
                             animationClass="@animationClass" />
            }
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColOffset="8" WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Cargar salida
                    </Button>
                </FormItem>
            }
        </div>
    </div>

    @*Despues de la Carga*@
    <Modal Title="@("Success")"
           Visible="@_visible1"
           OnOk="@HandleOk1"
           OnCancel="@HandleCancel1">
        <Result Status="success"
                Title="Se cargo correctamente la salida"
                SubTitle="">
        </Result>
    </Modal>

    <Modal Title="@("Datos de la carga de Incendio")"
           Visible="@imprimirmodal"
           OnOk="@HandleOkIMP"
           OnCancel="@HandleCancelIMP">
        <p>Imprimir con croquis</p>
        <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{salidaIncendioForestalView.NumeroParte}/{true}", true); })">Si</button>
        <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{salidaIncendioForestalView.NumeroParte}/{false}", true); })">No</button>
    </Modal>
</Form>

@code {
    @*Context y ViewModels*@
    BomberosDbContext Context { get; set; }
    public IncendioForestaViewModels salidaIncendioForestalView = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    public List<BomberoViweModel> bomberoChoferes = new();

    Bombero[] TodosBomberos;
    Movil[] Moviles;

    @*Sin Uso*@
    // bool switchValueS { get; set; }
    // bool chek { get; set; }

    @*Sucess y Imprimir*@
    bool _visible1;
    bool imprimirmodal;

    public void ShowModal1()
    {
        _visible1 = true;
    }

    private void HandleBomberoEncargadoChanged(int value)
    {
        BomberoEncargado = value;
        StateHasChanged();
    }

    private void HandleQuienLLenoPlanillaChanged(int value)
    {
        QuienLLenoPlanilla = value;
        StateHasChanged();
    }

    private void HandleOk1(MouseEventArgs e)
    {
        _visible1 = false;
        imprimirmodal = true;
        @* navigationManager.NavigateTo($"/legajo"); *@
    }

    private void HandleCancel1(MouseEventArgs e)
    {
        _visible1 = false;
    }

    private void HandleSwitchChanged(bool value)
    {
        switchDamificados = value;
        StateHasChanged();
    }

    private void HandleOkIMP(MouseEventArgs e)
    {
        imprimirmodal = false;
    }

    private void HandleCancelIMP(MouseEventArgs e)
    {
        imprimirmodal = false;
    }

    @*Damnificados | Bomberos | Moviles y Chofer | Steps *@

    @*Damnificados*@
    bool switchDamificados { get; set; }

    @*Bomberos*@
    int BomberoEncargado;
    int QuienLLenoPlanilla;
    int BomberoReceptor;// Falta info..

    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in TodosBomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,
                };
            if (b.Chofer == true)
            {
                bomberoChoferes.Add(bombero);
            }
            bomberoTodos.Add(bombero);
        }
    }



    @*Moviles | Chofer*@
    int chofer;
    string NumeroMovil;

    @*Steps*@
    public int current { get; set; } = 0;
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales*/
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""},/*Seguro*/
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}  /* Forestal */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }




    @*Init | OnChange y OnFinish*@

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        salidaIncendioForestalView = new();
        salidaIncendioForestalView.Tipo = TipoIncendio.Forestal; // Establecer valor predeterminad
        TodosBomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == QuienLLenoPlanilla).SingleOrDefaultAsync();
            if (salidaIncendioForestalView is not null)
            {
                //Vista.Data.Models.Salidas.Planillas.IncendioForestal? numeroParte = await Context.IncendiosForestales.Where(m => m.NumeroParte == salidaIncendioForestalView.NumeroParte).SingleOrDefaultAsync();
                if (salidaIncendioForestalView is not null)
                {
                    //Informacion de salida
                    Vista.Data.Models.Salidas.Planillas.IncendioForestal salidaIncendioForestal = new()
                        {
                            Tipo = salidaIncendioForestalView.Tipo,
                            Descripcion = salidaIncendioForestalView.Descripcion,
                            HoraSalida = salidaIncendioForestalView.HoraSalida,
                            HoraLlegada = salidaIncendioForestalView.HoraLLegada,
                            //KmSalida = salidaIncendioForestalView.KmSalida,
                            //KmLlegada = salidaIncendioForestalView.KmLlegada,
                            NumeroParte = salidaIncendioForestalView.NumeroParte,
                            CalleORuta = salidaIncendioForestalView.CalleORuta,
                            NumeroOKilometro = salidaIncendioForestalView.NumeroOKilometro,
                            EntreCalles = salidaIncendioForestalView.EntreCalles,
                            TipoZona = salidaIncendioForestalView.TipoZona,
                            NombreSolicitante = salidaIncendioForestalView.NombreSolicitante,
                            ApellidoSolicitante = salidaIncendioForestalView.ApellidoSolicitante,
                            DniSolicitante = salidaIncendioForestalView.DniSolicitante,
                            TelefonoSolicitante = salidaIncendioForestalView.TelefonoSolicitante,
                            DeteccionAutomaticaId = salidaIncendioForestalView.DeteccionAutomaticaId,
                            Extintor = salidaIncendioForestalView.Extintor,
                            Hidrante = salidaIncendioForestalView.Hidrante,
                            TipoServicio = salidaIncendioForestalView.TipoServicio,
                            TipoLugar = salidaIncendioForestalView.TipoLugar,
                            TipoEvacuacion = salidaIncendioForestalView.TipoEvacuacion,
                            TipoSuperficieAfectada = salidaIncendioForestalView.TipoSuperficieAfectada,
                            DetalleSuperficieAfectadaIncendio = salidaIncendioForestalView.DetalleSuperficieAfectadaIncendio,
                            SuperficieAfectadaCausa = salidaIncendioForestalView.SuperficieAfectadaCausa,
                            TipoAbertura = salidaIncendioForestalView.TipoAbertura,
                            OtraAbertura = salidaIncendioForestalView.OtraAbertura,
                            TipoTecho = salidaIncendioForestalView.TipoTecho,
                            OtroTecho = salidaIncendioForestalView.OtroTecho,
                            OtroLugar = salidaIncendioForestalView.OtroLugar,
                            QuienLleno = BomberoLlenoPlanilla,
                            ReceptorBombero = bomberoReceptor,
                            Encargado = bomberoEncargado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = salidaIncendioForestalView.CompaniaAseguradora,
                                NumeroDePoliza = salidaIncendioForestalView.NumeroPoliza,
                                FechaDeVencimineto = salidaIncendioForestalView.FechaVencimineto,
                            },
                            Damnificados = new(),
                            Moviles = new(),
                            CuerpoParticipante = new()
                        };

                    //Cuerpo participante y chofer
                    foreach (BomberoSalidaViewModels bom in bomberosSalida)
                    {
                        Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                        if (bomberoSalida == null) return;
                        BomberoSalida BomSalida = new()
                            {
                                Salio = bom.Salio,
                                Bombero = bomberoSalida
                            };
                        salidaIncendioForestal.CuerpoParticipante.Add(BomSalida);
                    }

                    //Moviles
                    foreach (MovilSalidaViewModels m in MovilesSalidasL)
                    {
                        Bombero? bomberoChofer = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
                        Movil? Movilsalida = await Context.Moviles.SingleOrDefaultAsync(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil);
                        if (bomberoChofer == null || Movilsalida == null) break;
                        Movilsalida.Kilometraje = m.KmLlegada;
                        MovilSalida movilS = new()
                            {
                                CargoCombustible = m.CargoCombustible,
                                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                                FechaFactura = movilSalidaViewModels.FechaFactura,
                                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                                QuienLleno = movilSalidaViewModels.QuienLleno,
                                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                                KmLlegada = m.KmLlegada,
                                Chofer = bomberoChofer,
                                Movil = Movilsalida
                            };
                        salidaIncendioForestal.Moviles.Add(movilS);
                    }

                    //Damnificados
                    foreach (DamnificadoViewModels d in DamnificadosSalida)
                    {

                        Damnificado damn = new()
                            {
                                Nombre = d.Nombre,
                                Apellido = d.Apellido,
                                Dni = d.Dni,
                                Sexo = d.Sexo,
                                LugarDeNacimiento = d.LugarDeNacimiento,
                                Edad = d.Edad,
                                Estado = d.Estado,
                            };
                        salidaIncendioForestal.Damnificados.Add(damn);
                    }
                    await Context.IncendiosForestales.AddAsync(salidaIncendioForestal);
                    await Context.SaveChangesAsync();


                    await Init();
                    StateHasChanged();
                    await message.Success("Salida agregada correctamente");
                    //ShowModal1(); Arreglar imprimir
                    _visible1 = true;
                    imprimirmodal = true;
                }
            }
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
            imprimirmodal = true;
        }
    }

    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }

    //OnFinishFailed
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(salidaIncendioForestalView)}");
    }

    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }

    @*"Delete" y Dispose*@
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}
