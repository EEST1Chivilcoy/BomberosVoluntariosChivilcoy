@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;

@inject IMessageService message

<div class="slick-contenedor @animationClass">
    <h6>Seguro del Vehiculo</h6>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Compañía aseguradora </label>
        <Input @bind-Value="@vehiculo.CompañiaAseguradora" />
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Número de póliza</label>
        <Input @bind-Value="@vehiculo.NumeroDePoliza" />
    </div>
    @*<div class="inpt-cont">
    <label class="inpt-cont--lbl">Fecha de Venc.</label>
    <DatePicker TValue="DateTime" ShowTime="@true" @bind-Value="@vehiculo.FechaDeVencimineto" />
    </div>*@

<h6>Datos vehículos</h6>
    <div class="inpt-cont" style="display: flex; flex-direction: column; justify-content: space-around; min-width: 90px;">
        <label class="inpt-cont--lbl">Agregar otro</label>
        <Button OnClick="()=>visibleVehiculos = true">
            <i class="fa-solid fa-car"></i> <i class="fa-solid fa-plus"></i>
        </Button>
    </div>
    <div class="inpt-cont" style="display: flex; flex-direction: column; justify-content: space-around; min-width: 90px;">
        <label class="inpt-cont--lbl">Ver vehiculos</label>
        <Button OnClick="()=>visibleVerVehiculos = true">
            <i class="fa-solid fa-car"></i> <i class="fa-solid fa-car"></i> <i class="fa-solid fa-car"></i>
        </Button>
    </div>
@if (DamnificadosSalida != null && DamnificadosSalida.Any())
{
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Elija el damnificado</label>
        <Select TItem="DamnificadoViewModels"
        TItemValue="string"
        DataSource="@DamnificadosSalida"
        Value="@damnificadoVehiculoId"
        ValueChanged="@UpdateDamnificadoVehiculo"
        LabelName="@nameof(DamnificadoViewModels.NombreYApellido)"
        ValueName="@nameof(DamnificadoViewModels.NombreYApellido)"
        Placeholder="Selecione a un damnificado"
        DefaultActiveFirstOption="false"
        AllowClear="true"
        EnableSearch>
        </Select>
    </div>
}

    <Modal Footer="null" Title="@("Vehiculos")"
           Visible="@visibleVerVehiculos"
           OnOk="@HandleOkD"
           OnCancel="@HandleCancelVD">
        <div class="inpt-cont">
            <Table Context="Vehiculos" DataSource="Model.VehiculosAfectadosIncendios" Bordered>
                <PropertyColumn Property="v => v.Patente"></PropertyColumn>
                <PropertyColumn Property="v => v.Marca"></PropertyColumn>
                <PropertyColumn Property="v => v.Modelo"></PropertyColumn>
                <PropertyColumn Property="v => v.Tipo"></PropertyColumn>
                <PropertyColumn Property="v => v.Año"></PropertyColumn>
                <PropertyColumn Property="v => v.Color"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="¿Quieres borrar este vehiculo?"
                                OnConfirm="@(() => deleteRowVehiculos(Vehiculos.Patente))"
                                OkText="Si"
                                CancelText="No"
                                Style="display: flex; justify-content: center; align-items: center;">
                        <i class="fa-solid fa-trash" style="color: #e90c0c; cursor: pointer;"></i>
                    </Popconfirm>
                </ActionColumn>
            </Table>
        </div>
    </Modal>

    <Modal Footer="null" Title="@("Datos del vehiculo")"
           Visible="@visibleVehiculos"
           OnOk="@HandleOkD"
           OnCancel="@HandleCancelD">
        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Patente</label>
                <Input @bind-Value="@vehiculo.Patente" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Marca</label>
                <Input @bind-Value="@vehiculo.Marca" />
            </div>
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Modelo</label>
            <Input @bind-Value="@vehiculo.Modelo" />
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Tipo</label>
            <Input @bind-Value="@vehiculo.Tipo" />
        </div>
        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Año</label>
                <Input @bind-Value="@vehiculo.Año" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Color</label>
                <Input @bind-Value="@vehiculo.Color" />
            </div>
        </div>
        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <Checkbox @bind-Checked="vehiculo.Airbag">Airbag</Checkbox>
            </div>
        </div>
        <div class="inpt-cont">
            <Button Class="boton_p" OnClick="@AgregarVehiculo">Agregar vehiculo</Button>
        </div>
    </Modal>
</div>

@code {
    [Parameter] public IncendioViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }

    [Parameter] public VehiculoDamnificadoViewModels vehiculo { get; set; }
    [Parameter] public string damnificadoVehiculoId { get; set; }
    [Parameter] public EventCallback<string> damnificadoVehiculoCall { get; set; }

    public List<DamnificadoViewModels> DamnificadosSalida { get; set; }

    private bool visibleVehiculos = false;
    private bool visibleVerVehiculos = false;

    private bool switchValue;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Lógica relacionada con VehiculosAfectadosIncendios
        if (Model.VehiculosAfectadosIncendios == null)
        {
            Model.VehiculosAfectadosIncendios = new List<VehiculoAfectadoIncendio>();
        }
        switchValue = Model.VehiculosAfectadosIncendios.Any();

        // Lógica relacionada con Damnificados
        if (Model.Damnificados != null)
        {
            DamnificadosSalida = ConvertToViewModel(Model.Damnificados);
        }
        else
        {
            DamnificadosSalida = new();
        }
    }

    private async Task UpdateDamnificadoVehiculo(string value)
    {
        damnificadoVehiculoId = value;
        await damnificadoVehiculoCall.InvokeAsync(value);
    }

    private List<DamnificadoViewModels> ConvertToViewModel(List<Damnificado> damnificados)
    {
        return damnificados.Select(damnificado => new DamnificadoViewModels
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado
            }).ToList();
    }

    private void HandleOkD(MouseEventArgs e)
    {
        visibleVehiculos = false;
    }

    private void HandleCancelD(MouseEventArgs e)
    {
        visibleVehiculos = false;
    }

    private void HandleCancelVD(MouseEventArgs e)
    {
        visibleVerVehiculos = false;
    }

    private void deleteRowVehiculos(string Patente)
    {
        Model.VehiculosAfectadosIncendios = Model.VehiculosAfectadosIncendios.Where(m => m.Patente != Patente).ToList();
    }

    private void AgregarVehiculo()
    {
        try
        {
            VehiculoAfectadoIncendio vai = new()
                {
                    Patente = vehiculo.Patente,
                    Marca = vehiculo.Marca,
                    Modelo = vehiculo.Modelo,
                    Tipo = vehiculo.Tipo,
                    Año = vehiculo.Año,
                    Color = vehiculo.Color,
                    Airbag = vehiculo.Airbag,
                };
            Model.VehiculosAfectadosIncendios.Add(vai);
            vehiculo = new VehiculoDamnificadoViewModels();
            visibleVehiculos = false;
            StateHasChanged();
            message.Success("Vehiculo agregado correctamente");
        }
        catch (Exception e)
        {
            StateHasChanged();
            if (e.InnerException != null)
                message.Error(e.InnerException.Message, 5);
            else
                message.Error(e.Message, 5);
        }
    }
}