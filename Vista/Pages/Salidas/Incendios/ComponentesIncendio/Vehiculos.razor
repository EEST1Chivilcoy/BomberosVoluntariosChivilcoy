@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

<div class="slick-contenedor @animationClass">
    <h6>Datos del chófer</h6>

    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Elija el chofer</label>
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoChoferes"
                    @bind-Value="@chofer"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Seleccione a un chófer"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Numero de móvil</label>
            <Select TItem="Movil"
                    TItemValue="string"
                    DataSource="@Moviles"
                    @bind-Value="@NumeroMovil"
                    LabelName="@nameof(Movil.NumeroMovil)"
                    ValueName="@nameof(Movil.NumeroMovil)"
                    Placeholder="Seleccione el móvil"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </div>
    </div>
    @if (NumeroMovil is not null)
    {
        foreach (Movil m in Moviles)
        {
            if (m.NumeroMovil == NumeroMovil)
            {
                if (m.NumeroMovil == NumeroMovil)
                {
                    Model.Kilometraje = m.Kilometraje;
                    break;
                }
                Model.Kilometraje = m.Kilometraje;
                break;
            }
        }
    }
    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Kilómetro de salida</label>
            <AntDesign.InputNumber @bind-Value="Model.Kilometraje" Disabled />
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Kilómetro de llegada</label>
            <AntDesign.InputNumber @bind-Value="Model.KmLlegada" />
        </div>
    </div>
    <!-- Cargar combustible actualmente no funciona -->
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">¿Cargó combustible?</label>
        <Switch @bind-Checked="switchMoviles" Style="width: 10px!important;" OnChange="@OnChangeSwitch" />
        <Modal Title="@("Datos de la carga de combustible")"
               Visible="@_visible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancelMovil">
            <Form Loading="loading" Model="@movilSalidaViewModels"
                  LabelColSpan="8"
                  WrapperColSpan="16"
                  OnFinish="OnFinishModel"
                  OnFinishFailed="OnFinishFailed"
                  @ref="@_form1" Context="modalMoviles">
                <FormItem Label="Número factura">
                    <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
                </FormItem>
                <FormItem Label="Fecha factura">
                    <DatePicker TValue="DateTime?" ShowTime="@true" @bind-Value="@movilSalidaViewModels.FechaFactura" />
                </FormItem>
                <FormItem Label="Tipo Combustible">
                    <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
                </FormItem>
                <FormItem Label="Cantidad de Litros">
                    <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
                </FormItem>
                <FormItem Label="Quién llenó">
                    <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
                </FormItem>
                <FormItem Label="Teléfono Quién Llenó">
                    <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
                </FormItem>
            </Form>
        </Modal>
    </div>
    <div class="inpt-cont">
        <Button OnClick="@AgregarMovilSalida">Cargar movil</Button>
    </div>
    @if (MovilesSalidasL is not null)
    {
        <div>
            <Table Size="TableSize.Small" PageSize="4" Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
                <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
                <PropertyColumn Property="c=>c.ChoferNombreCompleto"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="¿Quieres borrar este movil?"
                                OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                                OkText="Si"
                                CancelText="No">
                        <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                    </Popconfirm>
                </ActionColumn>
            </Table>
        </div>
    }
</div>

@code {
    [Parameter] public IncendioViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }
    
    [Parameter] public List<BomberoViweModel> bomberoChoferes { get; set; }
    [Parameter] public MovilSalidaViewModels movilSalidaViewModels { get; set; }
    [Parameter] public int chofer { get; set; }
    [Parameter] public Movil[] Moviles { get; set; }
    [Parameter] public string NumeroMovil { get; set; }
    [Parameter] public List<MovilSalidaViewModels> MovilesSalidasL { get; set; }

    bool switchMoviles { get; set; }// Carga de Combustible [Si/No]
    bool _visible = false;// Modal de Carga de Combustible
    bool chekM { get; set; }// Datos sobre Carga de Combustible [Si/No]
    bool loading = false;
    private Form<MovilSalidaViewModels> _form1;
    void toggle(bool value) => loading = value;
    BomberosDbContext Context { get; set; }

    //Modals
    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
    }
    private void HandleOk(MouseEventArgs e)
    {
        _visible = false;
    }

    private void HandleCancelMovil(MouseEventArgs e)
    {
        _visible = false;
        switchMoviles = false;
    }

    private void OnChangeSwitch()
    {
        _visible = switchMoviles;
    }

    //OnFinishFailed
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    public async Task AgregarMovilSalida()
    {
        try
        {
            Context = DbFactory.CreateDbContext();
            Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
            Movil? Movilsalida = await Context.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
            if (bomberoChofer == null || Movilsalida == null)
            {
                message.Error("No se encontraron los datos ingresados");
                return;
            }
            MovilSalidaViewModels m = new()
                {
                    CargoCombustible = chekM,
                    NumeroFactura = movilSalidaViewModels.NumeroFactura,
                    FechaFactura = movilSalidaViewModels.FechaFactura,
                    TipoConbustible = movilSalidaViewModels.TipoConbustible,
                    CantidadLitros = movilSalidaViewModels.CantidadLitros,
                    QuienLleno = movilSalidaViewModels.QuienLleno,
                    TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                    KmLlegada = Model.KmLlegada,
                    Chofer = bomberoChofer,
                    MovilesSalida = Movilsalida,
                };
            MovilesSalidasL.Add(m);
            StateHasChanged();
            message.Success("Chofer agregado correctamente");
        }
        catch (Exception e)
        {
            StateHasChanged();
            if (e.InnerException != null)
                message.Error(e.InnerException.Message, 5);
            else
                message.Error(e.Message, 5);
        }
    }
}