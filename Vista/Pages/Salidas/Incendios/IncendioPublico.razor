@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-establecimientoPublico"
@using Vista.Services
@inject ISalidaService SalidaService
@using System.ComponentModel.DataAnnotations
@using Vista.Data.ViewModels.Incendios
@using Vista.Data.ViewModels.Personal
@using System.Text.Json
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;
@using Vista.Data.Models.Salidas.Planillas.Incendios;
@using Vista.Data.Models.Vehiculos.Flota;


<head>
    <link href="css/salida.css" rel="stylesheet" />
</head>

<Form Model="@IncendioPublicoModel"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%; overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">

        <div style="text-align: center; margin-bottom: 20px;">
            <h2>INCENDIO ESTABLECIMIENTO</h2>
            <h2>PÚBLICO</h2>
        </div>


        @*Datos*@
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <Flex Justify="FlexJustify.Center">
            <div class="steps-content" style="padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
                @if (current == 0)
                {
                    <DatosGenerales Model="@IncendioPublicoModel"
                                    animationClass="@animationClass" />
                }
                else if (current == 1)
                {
                    @*Solicitante | Receptor | Damnificado*@
                    <Participantes Model="@IncendioPublicoModel"
                                   animationClass="@animationClass" />
                }
                else if (current == 2)
                {
                    <Seguro Model="@IncendioPublicoModel"
                            animationClass="@animationClass" />
                }
                else if (current == 3)
                {
                    <Vehiculos Model="@IncendioPublicoModel"
                               animationClass="@animationClass" />
                }
                else if (current == 4)
                {
                    @*Bomberos*@
                    <Personal Model="@IncendioPublicoModel"
                              animationClass="@animationClass" />
                }
                else if (current == 5)
                {
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Lugar</label>
                        <EnumSelect TEnum="TipoIncendioEstablecimientoPublico" @bind-Value="@IncendioPublicoModel.TipoLugar" />
                        @if (IncendioPublicoModel.TipoLugar == TipoIncendioEstablecimientoPublico.Otro)
                        {
                            <FormItem Label="OtroLugar">
                                <Input @bind-Value="@IncendioPublicoModel.OtroLugar" />
                            </FormItem>
                        }
                    </div>
                    <Establecimiento Model="@IncendioPublicoModel"
                                     animationClass="@animationClass" />
                }
                else if (current == 6)
                {
                    <div class="slick-contenedor">
                        <DatosSalida Model="@IncendioPublicoModel"
                                     animationClass="@animationClass" />
                    </div>
                }
            </div>
        </Flex>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {

    BomberosDbContext Context { get; set; }
    public IncendioEstablecimientoPublicoViewModels IncendioPublicoModel = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();

    @*Steps*@
    public int current { get; set; } = 0;
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales*/
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""},/*Seguro*/
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""},  /* Establecimiento */
        new StepItem {Title = " ", Content = ""}  /* Salida */
    };

    Bombero[] TodosBomberos;
    Movil[] Moviles;

    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();
    bool damnsihubo { get; set; }
    bool switchValueS { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }
    bool _visible1;
    int BomberoReceptor;
    string NumeroMovil;
    int chofer;

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    //Planilla

    public int ImprimirNumeroParte;
    public int ImprimirAnio;

    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    protected override async Task OnInitializedAsync()
    {

        await Init();

    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        IncendioPublicoModel = new();
        TodosBomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }

    //Carga de datos
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == IncendioPublicoModel.LegajoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == IncendioPublicoModel.LegajoLLenoPlanilla).SingleOrDefaultAsync();

            if (IncendioPublicoModel is not null)
            {
                IncendioEstablecimientoPublico? numeroParte = await Context.IncendiosEstablecimientosPublicos.Where(m => m.NumeroParte == IncendioPublicoModel.NumeroParte).SingleOrDefaultAsync();
                if (numeroParte != null)
                {
                    message.Warning("Numero parte ya existente.");
                    return;
                }
                if (IncendioPublicoModel is not null)
                {
                    //Informacion de salida
                    IncendioEstablecimientoPublico salidaIncendioEstabPublico = new()
                        {
                            
                            Descripcion = IncendioPublicoModel.Descripcion,
                            HoraSalida = IncendioPublicoModel.HoraSalida,
                            HoraLlegada = IncendioPublicoModel.HoraLLegada,
                            //KmSalida = IncendioPublicoModel.KmSalida,
                            //KmLlegada = IncendioPublicoModel.KmLlegada,
                            NumeroParte = IncendioPublicoModel.NumeroParte,
                            AnioNumeroParte = IncendioPublicoModel.AnioNumeroParte,
                            Direccion = IncendioPublicoModel.CalleORuta,
                            PisoNumero = IncendioPublicoModel.PisoNumero,
                            Depto = IncendioPublicoModel.Depto,
                            TipoZona = IncendioPublicoModel.TipoZona,
                            NombreSolicitante = IncendioPublicoModel.NombreSolicitante,
                            ApellidoSolicitante = IncendioPublicoModel.ApellidoSolicitante,
                            DniSolicitante = IncendioPublicoModel.DniSolicitante,
                            TelefonoSolicitante = IncendioPublicoModel.TelefonoSolicitante,
                            DeteccionAutomaticaId = IncendioPublicoModel.DeteccionAutomaticaId,
                            NombreYApellidoReceptor = IncendioPublicoModel.NombreYApellidoReceptor,
                            Extintor = IncendioPublicoModel.Extintor,
                            Hidrante = IncendioPublicoModel.Hidrante,
                            TipoLugar = IncendioPublicoModel.TipoLugar,
                            TipoEvacuacion = IncendioPublicoModel.TipoEvacuacion,
                            TipoSuperficieAfectada = IncendioPublicoModel.TipoSuperficieAfectada,
                            DetalleSuperficieAfectadaIncendio = IncendioPublicoModel.DetalleSuperficieAfectadaIncendio,
                            SuperficieAfectadaCausa = IncendioPublicoModel.SuperficieAfectadaCausa,
                            TipoAbertura = IncendioPublicoModel.TipoAbertura,
                            OtraAbertura = IncendioPublicoModel.OtraAbertura,
                            TipoTecho = IncendioPublicoModel.TipoTecho,
                            OtroTecho = IncendioPublicoModel.OtroTecho,
                            OtroLugarIncendio = IncendioPublicoModel.OtroLugar,
                            NombreEstablecimiento = IncendioPublicoModel.NombreEstablecimiento,
                            CantidadPisos = IncendioPublicoModel.CantidadPisos,
                            PisoAfectado = IncendioPublicoModel.PisoAfectado,
                            CantidadAmbientes = IncendioPublicoModel.CantidadAmbientes,
                            QuienLleno = BomberoLlenoPlanilla,
                            Encargado = bomberoEncargado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = IncendioPublicoModel.CompaniaAseguradora,
                                NumeroDePoliza = IncendioPublicoModel.NumeroPoliza,
                                FechaDeVencimineto = IncendioPublicoModel.FechaVencimineto,
                            },
                            Damnificados = new(),
                            Moviles = new(),
                            CuerpoParticipante = new()
                        };

                    //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
                    if (IncendioPublicoModel.CuerpoParticipante != null && IncendioPublicoModel.CuerpoParticipante.Any())
                    {
                        salidaIncendioEstabPublico.CuerpoParticipante = IncendioPublicoModel.CuerpoParticipante.ToList();
                    }

                    //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
                    if (IncendioPublicoModel.Moviles != null && IncendioPublicoModel.Moviles.Any())
                    {
                        salidaIncendioEstabPublico.Moviles = IncendioPublicoModel.Moviles.ToList();
                    }

                    //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
                    if (IncendioPublicoModel.Damnificados != null && IncendioPublicoModel.Damnificados.Any())
                    {
                        salidaIncendioEstabPublico.Damnificados = IncendioPublicoModel.Damnificados.ToList();
                    }

                    await SalidaService.GuardarSalida(salidaIncendioEstabPublico);
                    HandleOk1(salidaIncendioEstabPublico.AnioNumeroParte, salidaIncendioEstabPublico.NumeroParte);
                    await Init();
                    StateHasChanged();
                    await message.SuccessAsync("Salida agregada correctamente");
                }
            }
        }
        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.ErrorAsync(e.InnerException.Message, 5);
            else
                await message.ErrorAsync(e.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(IncendioPublicoModel)}");
        message.Error("Error al cargar, posible información ausente");
    }

    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            if (b.Chofer == true)
            {
                bomberoChoferes.Add(bombero);
            }
            bomberoTodos.Add(bombero);
        }
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
