@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-establecimientoPublico"
@using System.ComponentModel.DataAnnotations;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;
@using System.Text.Json;
<h2 style="text-align:center; text-decoration:underline;">Incendio Establecimiento Publico</h2>

<Form Model="@IncendioPublicoModel"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    @*Datos generales de las salidas*@
    <FormItem Label="Numero de parte">
        <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.NumeroParte" Disabled />
    </FormItem>
    <FormItem Label="Descripcion">
        <Input @bind-Value="@IncendioPublicoModel.Descripcion" />
    </FormItem>
    <FormItem Label="Dato Hora salida">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@IncendioPublicoModel.HoraSalida" />
    </FormItem>
    <FormItem Label="Dato Hora llegada">
        <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@IncendioPublicoModel.HoraLLegada" />
    </FormItem>
    @*<FormItem Label="Kilometro salida">
    <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.KmSalida" />
    </FormItem>
    <FormItem Label="Kilometro llegada">
    <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.KmLlegada" />
    </FormItem>*@
    <FormItem Label="Calle/Ruta">
        <Input @bind-Value="@IncendioPublicoModel.CalleORuta" />
    </FormItem>
    <FormItem Label="Numero/kilometro">
        <Input @bind-Value="@IncendioPublicoModel.NumeroOKilometro" />
    </FormItem>
    <FormItem Label="Entre calles">
        <Input @bind-Value="@IncendioPublicoModel.EntreCalles" />
    </FormItem>
    <FormItem Label="PisoNumero">
        <Input @bind-Value="@IncendioPublicoModel.PisoNumero" />
    </FormItem>
    <FormItem Label="Depto">
        <Input @bind-Value="@IncendioPublicoModel.Depto" />
    </FormItem>
    @*Solicitante datos*@
    <b><label>Datos de solicitante</label></b>
    <FormItem Label="Nombre del solicitante">
        <Input @bind-Value="@IncendioPublicoModel.NombreSolicitante" />
    </FormItem>
    <FormItem Label="Apelldio del solicitante">
        <Input @bind-Value="@IncendioPublicoModel.ApellidoSolicitante" />
    </FormItem>
    <FormItem Label="documneto del solicitante">
        <Input @bind-Value="@IncendioPublicoModel.DniSolicitante" />
    </FormItem>
    <FormItem Label="Telefono  del solicitante">
        <Input @bind-Value="@IncendioPublicoModel.TelefonoSolicitante" />
    </FormItem>
    <div>
        <div>
            <b>
                <FormItem Label="¿Tiene seguro el lugar?">
                    <Switch @bind-Checked="switchValueS" />
                </FormItem>
            </b>
        </div>
        <div>
            @if (switchValueS == true)
            {
                <b><label>Seguro del lugar afectado</label></b>
                <FormItem Label="Compania Aseguradora">
                    <Input @bind-Value="@IncendioPublicoModel.CompaniaAseguradora" />
                </FormItem>
                <FormItem Label="NumeroPoliza">
                    <Input @bind-Value="@IncendioPublicoModel.NumeroPoliza" />
                </FormItem>
                <FormItem Label="FechaVencimineto">
                    <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@IncendioPublicoModel.FechaVencimineto" />
                </FormItem>
            }
        </div>
    </div>
    @*Datos de damnificados*@
    <FormItem Label="¿Hubo damnificados?">
        <Switch @bind-Checked="switchValue" />
    </FormItem>
    @if (switchValue == true)
    {
        <FormItem Label="Nombre">
            <Input @bind-Value="@damnificado.Nombre" />
        </FormItem>
        <FormItem Label="Apellido">
            <Input @bind-Value="@damnificado.Apellido" />
        </FormItem>
        <FormItem Label="Documento">
            <Input @bind-Value="@damnificado.Dni" />
        </FormItem>
        <FormItem Label="Tipo sexo">
            <EnumSelect TEnum="TipoSexo" @bind-Value="@damnificado.Sexo" />
        </FormItem>
        <FormItem Label="Lugar De nacimiento">
            <Input @bind-Value="@damnificado.LugarDeNacimiento" />
        </FormItem>
        <FormItem Label="edad">
            <AntDesign.InputNumber @bind-Value="damnificado.Edad" />
        </FormItem>
        <FormItem Label="Tipo material">
            <EnumSelect TEnum="TipoDamnificado" @bind-Value="@damnificado.Estado" />
        </FormItem>
        <Button OnClick="@AgregarDamnificado">Agregar damnificado</Button>
        <div>
            <Table Context="Damnificados" DataSource="DamnificadosSalida" Bordered>
            <PropertyColumn Property="d=>d.NombreYApellido"></PropertyColumn>
            <PropertyColumn Property="d=>d.Edad"></PropertyColumn>
            <PropertyColumn Property="d=>d.Estado"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> deleteRowDamnificados(Damnificados.Dni)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>
    }
    @*Moviles de salidas*@
    @*a la hora de pedir el chofer y movil,
    pedir dato unico para no cargar todo y buscarlo en la base de datos*@
    @*Moviles de salidas*@
    <b><label>Datos de chofer</label></b>
    <br />
    <FormItem Label="" style="display: grid;place-items: center;">
        <Checkbox @bind-Checked="chekM"> Cargo combustible</Checkbox>
        <Button Type="primary" OnClick="@ShowModal">
            Cargo Combustible
        </Button>
    </FormItem>

    <FormItem Label="Elija el chofer">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoChoferes"
        @bind-Value="@chofer"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione el bombero"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>

    <FormItem Label="Numero de movil">
        <Select TItem="Movil"
                TItemValue="string"
                DataSource="@Moviles"
                @bind-Value="@NumeroMovil"
                LabelName="@nameof(Movil.NumeroMovil)"
                ValueName="@nameof(Movil.NumeroMovil)"
                Placeholder="Seleccione el movil"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>

    </FormItem>
    <br />
    @if (NumeroMovil is not null)
    {
        foreach (Movil m in Moviles)
        {
            if (m.NumeroMovil == NumeroMovil)
            {
                IncendioPublicoModel.Kilometraje = m.Kilometraje;
                break;
            }
        }
    }
    <FormItem Label="Kilometro salida">
        <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.Kilometraje" Disabled />
    </FormItem>
    <FormItem Label="Kilometro llegada">
        <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.KmLlegada" />
    </FormItem>
    <Button OnClick="@AgregarMovilSalida">Cargar Movil salida</Button>
    <div>
        <Table Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
            <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
            <PropertyColumn Property="c=>c.Chofer.Nombre"></PropertyColumn>
            <ActionColumn Title="Action">
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>

    @*Cuerpos paraticipantes*@
    <b><label>Cuerpo Participante</label></b>
    <FormItem Label="Elija el bombero">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@BomberoCuerpo"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione el bombero"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    <Checkbox @bind-Checked="chekB"> Salio</Checkbox>
    <br />
    <Button OnClick="@AgregarCuerpoParticipante">Cargar cuerpo participante</Button>
    <br />
    <div>
        <Table Context="bomberosSalida1" DataSource="bomberosSalida" Bordered>
            <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
            <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
            <ActionColumn Title="Action">
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>
    <b><label>Elija al encargado</label></b>
    <FormItem Label="Encargado">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@BomberoEncargado"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione un encargado"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    <b><label>Quien lleno planilla</label></b>
    <FormItem Label="Bombero que lleno la planilla">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberoTodos"
                @bind-Value="@QuienLLenoPlanilla"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione un encargado"
                DefaultActiveFirstOption="false"
                EnableSearch>
        </Select>
    </FormItem>
    @*Tipo servicio*@
    <b><label>Salida</label></b>
    <FormItem Label="Tipo Servicio salida">
        <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@IncendioPublicoModel.TipoServicio" />
    </FormItem>
    <FormItem Label="Tipo de Zona">
        <EnumSelect TEnum="TipoZona" @bind-Value="@IncendioPublicoModel.TipoZona" />
    </FormItem>
    <FormItem Label="Lugar">
        <EnumSelect TEnum="TipoIncendioEstablecimientoPublico" @bind-Value="@IncendioPublicoModel.TipoLugar" />
        @if (IncendioPublicoModel.TipoLugar == TipoIncendioEstablecimientoPublico.Otro)
        {
            <FormItem Label="OtroLugar">
                <Input @bind-Value="@IncendioPublicoModel.OtroLugar" />
            </FormItem>
        }
    </FormItem>
    <FormItem Label="Superficie Afectada Causa">
        <EnumSelect TEnum="TipoCausaIncendio" @bind-Value="@IncendioPublicoModel.SuperficieAfectadaCausa" />
    </FormItem>
    <FormItem Label="Nombre establecimiento:">
        <Input @bind-Value="IncendioPublicoModel.NombreEstablecimiento" />
        <br>
    </FormItem>
    <FormItem Label="Cantidad pisos:">
        <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.CantidadPisos" />
        <br>
    </FormItem>
    <FormItem Label="Pisos afectados">
        <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.PisoAfectado" />
        <br>
    </FormItem>

    <FormItem Label="Cantidad ambientes:">
        <AntDesign.InputNumber @bind-Value="IncendioPublicoModel.CantidadAmbientes" />
        <br>
    </FormItem>
    <FormItem Label="Tipo Evacuacion">
        <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@IncendioPublicoModel.TipoEvacuacion" />
    </FormItem>
    <FormItem Label="Tipo Superficie">
        <EnumSelect TEnum="TipoSuperficie" @bind-Value="@IncendioPublicoModel.TipoSuperficieAfectada" />
    </FormItem>
    <FormItem Label="Detalles Surpeficie Afectada ">
        <Input @bind-Value="IncendioPublicoModel.DetalleSuperficieAfectadaIncendio" />
    </FormItem>
    <FormItem Label="Tipo Techo">
        <EnumSelect TEnum="TipoIncendioTecho?" @bind-Value="@IncendioPublicoModel.TipoTecho" />
        @if (IncendioPublicoModel.TipoTecho == TipoIncendioTecho.Otro)
        {
            <FormItem Label="Otro Techo">
                <Input @bind-Value="@IncendioPublicoModel.OtroTecho" />
            </FormItem>
        }
    </FormItem>
    <FormItem Label="Tipo Abertura">
        <EnumSelect TEnum="TipoIncendioAbertura?" @bind-Value="@IncendioPublicoModel.TipoAbertura" />
        @if (IncendioPublicoModel.TipoAbertura == TipoIncendioAbertura.Otro)
        {
            <FormItem Label="Otro Abertura">
                <Input @bind-Value="@IncendioPublicoModel.OtraAbertura" />
            </FormItem>
        }
    </FormItem>
    <div>
        <b><label>Hubo deteccion automatica?</label></b>
        <Checkbox @bind-Checked="IncendioPublicoModel.DeteccionAutomaticaId"></Checkbox>
    </div>
    <div>
        <b><label>Habia Extintor?</label></b>
        <Checkbox @bind-Checked="IncendioPublicoModel.Extintor"></Checkbox>
    </div>
    <div>
        <b><label>Habia Hidrante?</label></b>
        <Checkbox @bind-Checked="IncendioPublicoModel.Hidrante"></Checkbox>
    </div>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Cargar salida
        </Button>
    </FormItem>
</Form>
<Modal Title="@("Datos de la carga de combustible")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@movilSalidaViewModels"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinishModel"
          OnFinishFailed="OnFinishFailed"
    @ref="@_form1">
        <FormItem Label="Numero factura">
            <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
        </FormItem>
        <FormItem Label="Fecha factura">
            <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
        </FormItem>
        <FormItem Label="Tipo Combustible">
            <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
        </FormItem>
        <FormItem Label="Cantidad de Litros">
            <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
        </FormItem>
        <FormItem Label="Quien lleno">
            <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
        </FormItem>
        <FormItem Label="TelefonoQuienLleno">
            <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Datos de la carga de Incendio")"
       Visible="@imprimirmodal"
       OnOk="@HandleOkIMP"
       OnCancel="@HandleCancelIMP">
    <p>Imprimir con croquis</p>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{IncendioPublicoModel.NumeroParte}/{true}", true); })">Si</button>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{IncendioPublicoModel.NumeroParte}/{false}", true); })">No</button>
</Modal>

@code {

    BomberosDbContext Context { get; set; }
    public IncendioEstablecimientoPublicoViewModels IncendioPublicoModel = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    private Form<MovilSalidaViewModels> _form1;

    bool _visible1;
    Bombero[] TodosBomberos;
    Movil[] Moviles;

    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();
    bool switchValue { get; set; }
    bool switchValueS { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }
    bool imprimirmodal;

    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;
    public async Task AgregarDamnificado()
    {

        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

            };
        DamnificadosSalida.Add(dp);
        StateHasChanged();
    }

    public async Task AgregarMovilSalida()
    {

        Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await Context.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                KmLlegada = IncendioPublicoModel.KmLlegada,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,

            };
        MovilesSalidasL.Add(m);
        StateHasChanged();

    }

    public async Task AgregarCuerpoParticipante()
    {
        var boberos = await Context.Bomberos.ToArrayAsync();
        foreach (var bom in boberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                    {
                        Salio = bomberoSalidaView.Salio,
                        Nombre = bom.Nombre,
                        Apellido = bom.Apellido,
                        NumeroLegajo = BomberoCuerpo
                    };
                bomberosSalida.Add(b);

            }
        }
        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {

        await Init();

    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        IncendioPublicoModel = new();
        IncendioPublicoModel.Tipo = TipoIncendio.EstablecimientoPublico; // Establecer valor predeterminado
        TodosBomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == QuienLLenoPlanilla).SingleOrDefaultAsync();

            if (IncendioPublicoModel is not null)
            {
                Vista.Data.Models.Salidas.Planillas.IncendioEstablecimientoPublico? numeroParte = await Context.IncendiosEstablecimientosPublicos.Where(m => m.NumeroParte == IncendioPublicoModel.NumeroParte).SingleOrDefaultAsync();
                if (IncendioPublicoModel is not null)
                {
                    Vista.Data.Models.Salidas.Planillas.IncendioEstablecimientoPublico salidaIncendioEstabPublico = new()
                        {
                            Tipo = IncendioPublicoModel.Tipo,
                            Descripcion = IncendioPublicoModel.Descripcion,
                            HoraSalida = IncendioPublicoModel.HoraSalida,
                            HoraLlegada = IncendioPublicoModel.HoraLLegada,
                            //KmSalida = IncendioPublicoModel.KmSalida,
                            //KmLlegada = IncendioPublicoModel.KmLlegada,
                            NumeroParte = IncendioPublicoModel.NumeroParte,
                            CalleORuta = IncendioPublicoModel.CalleORuta,
                            NumeroOKilometro = IncendioPublicoModel.NumeroOKilometro,
                            EntreCalles = IncendioPublicoModel.EntreCalles,
                            PisoNumero = IncendioPublicoModel.PisoNumero,
                            Depto = IncendioPublicoModel.Depto,
                            TipoZona = IncendioPublicoModel.TipoZona,
                            NombreSolicitante = IncendioPublicoModel.NombreSolicitante,
                            ApellidoSolicitante = IncendioPublicoModel.ApellidoSolicitante,
                            DniSolicitante = IncendioPublicoModel.DniSolicitante,
                            TelefonoSolicitante = IncendioPublicoModel.TelefonoSolicitante,
                            DeteccionAutomaticaId = IncendioPublicoModel.DeteccionAutomaticaId,
                            Extintor = IncendioPublicoModel.Extintor,
                            Hidrante = IncendioPublicoModel.Hidrante,
                            TipoLugar = IncendioPublicoModel.TipoLugar,
                            TipoEvacuacion = IncendioPublicoModel.TipoEvacuacion,
                            TipoSuperficieAfectada = IncendioPublicoModel.TipoSuperficieAfectada,
                            DetalleSuperficieAfectadaIncendio = IncendioPublicoModel.DetalleSuperficieAfectadaIncendio,
                            SuperficieAfectadaCausa = IncendioPublicoModel.SuperficieAfectadaCausa,
                            TipoAbertura = IncendioPublicoModel.TipoAbertura,
                            OtraAbertura = IncendioPublicoModel.OtraAbertura,
                            TipoTecho = IncendioPublicoModel.TipoTecho,
                            OtroTecho = IncendioPublicoModel.OtroTecho,
                            OtroLugar = IncendioPublicoModel.OtroLugar,
                            NombreEstablecimiento = IncendioPublicoModel.NombreEstablecimiento,
                            CantidadPisos = IncendioPublicoModel.CantidadPisos,
                            PisoAfectado = IncendioPublicoModel.PisoAfectado,
                            CantidadAmbientes = IncendioPublicoModel.CantidadAmbientes,
                            QuienLleno = BomberoLlenoPlanilla,
                            ReceptorBombero = bomberoReceptor,
                            Encargado = bomberoEncargado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = IncendioPublicoModel.CompaniaAseguradora,
                                NumeroDePoliza = IncendioPublicoModel.NumeroPoliza,
                                FechaDeVencimineto = IncendioPublicoModel.FechaVencimineto,
                            },
                            Damnificados = new(),
                            Moviles = new(),
                            CuerpoParticipante = new()
                        };
                    foreach (BomberoSalidaViewModels bom in bomberosSalida)
                    {
                        Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                        BomberoSalida BomSalida = new()
                            {
                                Salio = bom.Salio,
                                Bombero = bomberoSalida
                            };
                        salidaIncendioEstabPublico.CuerpoParticipante.Add(BomSalida);
                    }

                    foreach (MovilSalidaViewModels m in MovilesSalidasL)
                    {
                        Bombero? bomberoChofer = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
                        Movil? Movilsalida = await Context.Moviles.SingleOrDefaultAsync(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil);
                        if (Movilsalida is not null)
                        {
                            Movilsalida.Kilometraje = m.KmLlegada;
                        }
                        MovilSalida movilS = new()
                            {
                                CargoCombustible = m.CargoCombustible,
                                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                                FechaFactura = movilSalidaViewModels.FechaFactura,
                                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                                QuienLleno = movilSalidaViewModels.QuienLleno,
                                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                                KmLlegada = m.KmLlegada,
                                Chofer = bomberoChofer,
                                Movil = Movilsalida
                            };
                        salidaIncendioEstabPublico.Moviles.Add(movilS);
                    }


                    foreach (DamnificadoViewModels d in DamnificadosSalida)
                    {

                        Damnificado damn = new()
                            {
                                Nombre = d.Nombre,
                                Apellido = d.Apellido,
                                Dni = d.Dni,
                                Sexo = d.Sexo,
                                LugarDeNacimiento = d.LugarDeNacimiento,
                                Edad = d.Edad,
                                Estado = d.Estado,
                            };
                        salidaIncendioEstabPublico.Damnificados.Add(damn);
                    }
                    await Context.IncendiosEstablecimientosPublicos.AddAsync(salidaIncendioEstabPublico);
                    await Context.SaveChangesAsync();


                    await Init();
                    StateHasChanged();
                    await message.Success("Salida agregada correctamente");
                    imprimirmodal = true;
                }
            }
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
            imprimirmodal = true;
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(IncendioPublicoModel)}");
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }


    public async Task SubirIncendioPublico()
    {
        


    }
    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in TodosBomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            bomberoTodos.Add(bombero);

        }
        foreach (Bombero c in TodosBomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        //NombreImagen = b.NombreImagen,
                        //TipoImagen = b.TipoImagen,
                        //Base64Imagen = b.Base64,
                        Dotacion = c.Dotacion,
                        //Nombre = b.NombreBrigada,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                        //TelefonoCel = b.TelefonoCel,
                        //TelefonoFijo = b.TelefonoFijo,
                        //TelefonoLaboral = b.TelefonoLaboral,
                        //Email = b.Email,

                    };
                bomberoChoferes.Add(bomberoChofer);
            }


        }
    }
    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }
    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    private void ShowModal()
    {
        _visible = true;
    }
    public void ShowModal1()
    {
        _visible1 = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }
    private void HandleCancelIMP(MouseEventArgs e)
    {

        imprimirmodal = false;
    }
    private void OnFinishModel(EditContext editContext)
    {

        _visible = false;
    }
    private void HandleOk(MouseEventArgs e)
    {

        _visible = false;

    }
    private void HandleOkIMP(MouseEventArgs e)
    {

        imprimirmodal = false;

    }
    private void HandleCancel1(MouseEventArgs e)
    {

        _visible1 = false;
    }
    private void HandleOk1(MouseEventArgs e)
    {
        navigationManager.NavigateTo($"/legajo");
        _visible1 = false;

    }
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}
