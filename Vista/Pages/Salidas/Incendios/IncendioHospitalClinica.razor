@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-HospitalesClinicas"
@using Vista.Services;
@inject ISalidaService SalidaService;
@using System.ComponentModel.DataAnnotations;
@using Vista.Data.ViewModels.Incendios;
@using Vista.Data.ViewModels.Personal;
@using System.Text.Json;
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border-radius: 5px 5px !important;
    }

    .ant-btn:hover, .ant-btn:focus, .ant-btn:active {
        text-decoration: none;
        background: #40a9ff !important;
    }

    .ant-btn:hover, .ant-btn:focus {
        color: white !important;
        border-color: #40a9ff !important;
        background: #40a9ff !important;
    }

    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 10px !important;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
        margin-right: 78px !important;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    textarea {
        resize: none !important;
        min-height: 250pxpx !important;
        width: 100% !important;
    }

    .ant-checkbox-input:checked + .ant-checkbox-inner {
        background-color: #4CAF50 !important;
        border-color: #4CAF50 !important;
    }
</style>

<Form Model="@HospitalClinicaViewModel"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%; overflow: hidden!important;">
    @*Datos*@
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>
    <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
        @if (current == 0)
        {
            <DatosGenerales Model="@HospitalClinicaViewModel"
                            animationClass="@animationClass" />
        }
        else if (current == 1)
        {
            @*Solicitante | Receptor | Damnificado*@
            <Participantes Model="@HospitalClinicaViewModel"
                           animationClass="@animationClass" />
        }
        else if (current == 2)
        {
            <Seguro Model="@HospitalClinicaViewModel"
                    animationClass="@animationClass" />
        }
        else if (current == 3)
        {
            <Vehiculos Model="@HospitalClinicaViewModel"
                       animationClass="@animationClass" />
        }
        else if (current == 4)
        {
            @*Bomberos*@
            <Personal Model="@HospitalClinicaViewModel"
                      animationClass="@animationClass" />
        }
        else if (current == 5)
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Lugar</label>
                <EnumSelect TEnum="TipoIncendioHospitalesYClinicas" @bind-Value="@HospitalClinicaViewModel.TipoLugar" />
                @if (HospitalClinicaViewModel.TipoLugar == TipoIncendioHospitalesYClinicas.Otro)
                {
                    <FormItem Label="Otro Lugar">
                        <Input @bind-Value="@HospitalClinicaViewModel.OtroLugar" />
                    </FormItem>
                }
            </div>
            <Establecimiento Model="@HospitalClinicaViewModel"
                             animationClass="@animationClass" />
        }
        else if (current == 6)
        {
            <div class="slick-contenedor">
                <DatosSalida Model="@HospitalClinicaViewModel"
                             animationClass="@animationClass"
                              />
            </div>
        }
    </div>
    <div class="steps-action">
        @if (current > 0)
        {
            <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
        }
        @if (current < steps.Length - 1)
        {
            <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
        }
        @if (current == steps.Length - 1)
        {
            <FormItem WrapperColSpan="16">
                <Button Class="boton_p" HtmlType="submit">
                    Imprimir salida
                </Button>
            </FormItem>
        }
        @if (_visible1 == true)
        {
            <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
        }
    </div>
</Form>

@code {

    BomberosDbContext Context { get; set; }
    public IncendioHospitalesYClinicasViewModels HospitalClinicaViewModel = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();

    @*Steps*@
    public int current { get; set; } = 0;
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales*/
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""},/*Seguro*/
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""},  /* Establecimiento */
        new StepItem {Title = " ", Content = ""}  /* Salida */
    };

    Bombero[] TodosBomberos;
    Movil[] Moviles;

    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();
    bool damnsihubo { get; set; }
    bool switchValueS { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }
    int BomberoReceptor;
    string NumeroMovil;
    bool _visible1;
    int chofer;

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    public int ImprimirNumeroParte;
    public int ImprimirAnio;

    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    protected override async Task OnInitializedAsync()
    {

        await Init();

    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        HospitalClinicaViewModel = new();
        HospitalClinicaViewModel.Tipo = TipoIncendio.Hospital; // Establecer valor predeterminado
        TodosBomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }

    //Carga de datos
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == HospitalClinicaViewModel.LegajoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == HospitalClinicaViewModel.LegajoLLenoPlanilla).SingleOrDefaultAsync();

            if (HospitalClinicaViewModel is not null)
            {
                Vista.Data.Models.Salidas.Planillas.IncendioHospitalesYClinicas? numeroParte = await Context.IncendiosHospitalesYClinicas.Where(m => m.NumeroParte == HospitalClinicaViewModel.NumeroParte).SingleOrDefaultAsync();
                if (numeroParte != null)
                {
                    message.Warning("Numero parte ya existente.");
                    return;
                }
                if (HospitalClinicaViewModel is not null)
                {
                    //Informacion de salida
                    IncendioHospitalesYClinicas salidaIncendioHospYClinica = new()
                        {
                            Tipo = HospitalClinicaViewModel.Tipo,
                            Descripcion = HospitalClinicaViewModel.Descripcion,
                            HoraSalida = HospitalClinicaViewModel.HoraSalida,
                            HoraLlegada = HospitalClinicaViewModel.HoraLLegada,
                            //KmSalida = HospitalClinicaViewModel.KmSalida,
                            //KmLlegada = HospitalClinicaViewModel.KmLlegada,
                            NumeroParte = HospitalClinicaViewModel.NumeroParte,
                            AnioNumeroParte = HospitalClinicaViewModel.AnioNumeroParte,
                            CalleORuta = HospitalClinicaViewModel.CalleORuta,
                            NumeroOKilometro = HospitalClinicaViewModel.NumeroOKilometro,
                            EntreCalles = HospitalClinicaViewModel.EntreCalles,
                            PisoNumero = HospitalClinicaViewModel.PisoNumero,
                            Depto = HospitalClinicaViewModel.Depto,
                            TipoZona = HospitalClinicaViewModel.TipoZona,
                            NombreYApellidoReceptor = HospitalClinicaViewModel.NombreYApellidoReceptor,
                            NombreSolicitante = HospitalClinicaViewModel.NombreSolicitante,
                            ApellidoSolicitante = HospitalClinicaViewModel.ApellidoSolicitante,
                            DniSolicitante = HospitalClinicaViewModel.DniSolicitante,
                            TelefonoSolicitante = HospitalClinicaViewModel.TelefonoSolicitante,
                            DeteccionAutomaticaId = HospitalClinicaViewModel.DeteccionAutomaticaId,
                            Extintor = HospitalClinicaViewModel.Extintor,
                            Hidrante = HospitalClinicaViewModel.Hidrante,
                            TipoLugar = HospitalClinicaViewModel.TipoLugar,
                            TipoEvacuacion = HospitalClinicaViewModel.TipoEvacuacion,
                            TipoSuperficieAfectada = HospitalClinicaViewModel.TipoSuperficieAfectada,
                            DetalleSuperficieAfectadaIncendio = HospitalClinicaViewModel.DetalleSuperficieAfectadaIncendio,
                            SuperficieAfectadaCausa = HospitalClinicaViewModel.SuperficieAfectadaCausa,
                            TipoAbertura = HospitalClinicaViewModel.TipoAbertura,
                            OtraAbertura = HospitalClinicaViewModel.OtraAbertura,
                            TipoTecho = HospitalClinicaViewModel.TipoTecho,
                            OtroTecho = HospitalClinicaViewModel.OtroTecho,
                            OtroLugar = HospitalClinicaViewModel.OtroLugar,
                            NombreEstablecimiento = HospitalClinicaViewModel.NombreEstablecimiento,
                            CantidadPisos = HospitalClinicaViewModel.CantidadPisos,
                            PisoAfectado = HospitalClinicaViewModel.PisoAfectado,
                            CantidadAmbientes = HospitalClinicaViewModel.CantidadAmbientes,
                            QuienLleno = BomberoLlenoPlanilla,
                            ReceptorBombero = bomberoReceptor,
                            Encargado = bomberoEncargado,
                            Seguro = new()
                            {
                                CompañiaAseguradora = HospitalClinicaViewModel.CompaniaAseguradora,
                                NumeroDePoliza = HospitalClinicaViewModel.NumeroPoliza,
                                FechaDeVencimineto = HospitalClinicaViewModel.FechaVencimineto,
                            },
                            Damnificados = new(),
                            Moviles = new(),
                            CuerpoParticipante = new()
                        };

                    //Cuerpo participante y chofer
                    foreach (BomberoSalidaViewModels bom in bomberosSalida)
                    {
                        Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                        if (bomberoSalida == null) break;
                        BomberoSalida BomSalida = new()
                            {
                                MovilAsignado = bom.MovilAsignado,
                                Bombero = bomberoSalida,
                            };
                        salidaIncendioHospYClinica.CuerpoParticipante.Add(BomSalida);
                    }

                    //Moviles
                    if (HospitalClinicaViewModel.Moviles != null && HospitalClinicaViewModel.Moviles.Any())
                    {
                        // Crear una lista para los móviles de salida
                        var movilessalida = new List<MovilSalida>();

                        foreach (var m in HospitalClinicaViewModel.Moviles)
                        {
                            // Obtener el bombero chofer y el móvil desde la base de datos
                            var bomberoChofer = await Context.Bomberos
                                .SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
                            var movilsalida = await Context.Moviles
                                .SingleOrDefaultAsync(mob => mob.NumeroMovil == m.Movil.NumeroMovil);

                            // Actualizar el kilometraje del móvil
                            if (movilsalida != null)
                            {
                                movilsalida.Kilometraje = m.KmLlegada;
                            }

                            // Crear una nueva instancia de MovilSalida y agregarla a la lista
                            var movilS = new MovilSalida
                                {
                                    CargoCombustible = m.CargoCombustible,
                                    NumeroFactura = movilSalidaViewModels.NumeroFactura,
                                    FechaFactura = movilSalidaViewModels.FechaFactura,
                                    TipoConbustible = movilSalidaViewModels.TipoConbustible,
                                    CantidadLitros = movilSalidaViewModels.CantidadLitros,
                                    QuienLleno = movilSalidaViewModels.QuienLleno,
                                    TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                                    KmLlegada = m.KmLlegada,
                                    Chofer = bomberoChofer,
                                    Movil = movilsalida
                                };

                            movilessalida.Add(movilS);
                        }

                        // Asignar la lista de móviles a la salida
                        salidaIncendioHospYClinica.Moviles = movilessalida;
                    }

                    //Damnificados
                    foreach (DamnificadoViewModels d in DamnificadosSalida)
                    {

                        Damnificado damn = new()
                            {
                                Nombre = d.Nombre,
                                Apellido = d.Apellido,
                                Dni = d.Dni,
                                Sexo = d.Sexo,
                                LugarDeNacimiento = d.LugarDeNacimiento,
                                Edad = d.Edad,
                                Estado = d.Estado,
                            };
                        salidaIncendioHospYClinica.Damnificados.Add(damn);
                    }
                    await SalidaService.CargarSalida(salidaIncendioHospYClinica);
                    HandleOk1(salidaIncendioHospYClinica.AnioNumeroParte, salidaIncendioHospYClinica.NumeroParte);
                    await Init();
                    StateHasChanged();
                    await message.Success("Salida agregada correctamente");
                }
            }
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(HospitalClinicaViewModel)}");
        message.Error("Error al cargar, posible información ausente");
    }
    
    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            if (b.Chofer == true)
            {
                bomberoChoferes.Add(bombero);
            }
            bomberoTodos.Add(bombero);
        }
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
