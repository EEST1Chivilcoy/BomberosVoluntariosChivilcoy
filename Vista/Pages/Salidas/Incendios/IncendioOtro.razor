@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-Aereonaves"
@using Vista.Services;
@inject ISalidaService SalidaService;
@using Vista.Data.ViewModels;
@using System.ComponentModel.DataAnnotations;
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;
@using Vista.Data.Models.Salidas.Planillas.Incendios;

<Form Model="@salidaIncendioOtro"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">

        <div style="text-align: center; margin-bottom: 20px;">
            <h2>INCENDIO OTRO</h2>
        </div>


        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <Flex Justify="center">
            <div class="steps-content" style="max-height: 620px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
                @if (current == 0)
                {
                    @*General*@
                    <DatosGenerales Model="@salidaIncendioOtro"
                                    animationClass="@animationClass"
                                    esSoloDireccion="true" />
                }
                else if (current == 1)
                {
                    @*Solicitante | Receptor | Damnificado*@
                    <Participantes Model="@salidaIncendioOtro"
                                   animationClass="@animationClass" />
                }

                else if (current == 2)
                {
                    @*Chofer y Movil*@
                    <Vehiculos Model="@salidaIncendioOtro"
                               animationClass="@animationClass" />
                }
                else if (current == 3)
                {
                    @*Bomberos*@
                    <Personal Model="@salidaIncendioOtro"
                              animationClass="@animationClass" />
                }
                else if (current == 4)
                {
                    @*Vehiculo*@
                    <DatosVehiculoDamnificado Model="@salidaIncendioOtro"
                                              animationClass="@animationClass"
                                              vehiculo="@vehiculo"
                                              damnificadoVehiculoId="@damnificadoVehiculoId"
                                              damnificadoVehiculoCall="@HandleDamnificadoVehiculo" />
                }
                else if (current == 5)
                {
                    @*Info-Salida*@
                    <div class="slick-contenedor">
                        <DatosSalida Model="@salidaIncendioOtro"
                                     animationClass="@animationClass" />
                    </div>
                }
            </div>
        </Flex>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {
    @*Context y ViewModels*@
    BomberosDbContext Context { get; set; }
    public IncendioViewModels salidaIncendioOtro = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public VehiculoDamnificadoViewModels vehiculo = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    public List<BomberoViweModel> bomberoChoferes = new();
    public string damnificadoVehiculoId;

    Movil[] Moviles;

    bool _visible1;

    private void HandleDamnificadoVehiculo(string value)
    {
        damnificadoVehiculoId = value;
        StateHasChanged();
    }

    public int ImprimirAnio;
    public int ImprimirNumeroParte;
    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    bool loading = false;
    void toggle(bool value) => loading = value;

    @*Steps*@
    public int current { get; set; } = 0;//Ubicacion del Step
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Solicitante||Damnificado/s */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos Bombero */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""}, /* Vehiculo */
        new StepItem {Title = " ", Content = ""} /* Salida */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    @*Init | OnChange y OnFinish*@
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        salidaIncendioOtro = new();
        Context = DbFactory.CreateDbContext();

    }

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoEncargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == salidaIncendioOtro.LegajoEncargado);
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == salidaIncendioOtro.LegajoLLenoPlanilla);
            IncendioComercio? numeroParte = await Context.IncendiosComercios.Where(m => m.NumeroParte == salidaIncendioOtro.NumeroParte).SingleOrDefaultAsync();
            if (numeroParte != null)
            {
                message.Warning("Numero parte ya existente.");
                return;
            }
            Incendio incendioOtro = new()
                {

                    Descripcion = salidaIncendioOtro.Descripcion,
                    HoraSalida = salidaIncendioOtro.HoraSalida,
                    HoraLlegada = salidaIncendioOtro.HoraLLegada,
                    NumeroParte = salidaIncendioOtro.NumeroParte,
                    AnioNumeroParte = salidaIncendioOtro.AnioNumeroParte,
                    CalleORuta = salidaIncendioOtro.CalleORuta,
                    NumeroOKilometro = salidaIncendioOtro.NumeroOKilometro,
                    EntreCalles = salidaIncendioOtro.EntreCalles,
                    PisoNumero = salidaIncendioOtro.PisoNumero,
                    Depto = salidaIncendioOtro.Depto,
                    TipoZona = salidaIncendioOtro.TipoZona,
                    NombreSolicitante = salidaIncendioOtro.NombreSolicitante,
                    ApellidoSolicitante = salidaIncendioOtro.ApellidoSolicitante,
                    DniSolicitante = salidaIncendioOtro.DniSolicitante,
                    TelefonoSolicitante = salidaIncendioOtro.TelefonoSolicitante,
                    NombreYApellidoReceptor = salidaIncendioOtro.NombreYApellidoReceptor,
                    DeteccionAutomaticaId = salidaIncendioOtro.DeteccionAutomaticaId,
                    Extintor = salidaIncendioOtro.Extintor,
                    Hidrante = salidaIncendioOtro.Hidrante,
                    // TipoLugar = salidaIncendioAereonave.TipoLugar,
                    TipoEvacuacion = salidaIncendioOtro.TipoEvacuacion,
                    TipoSuperficieAfectada = salidaIncendioOtro.TipoSuperficieAfectada,
                    DetalleSuperficieAfectadaIncendio = salidaIncendioOtro.DetalleSuperficieAfectadaIncendio,
                    SuperficieAfectadaCausa = salidaIncendioOtro.SuperficieAfectadaCausa,
                    TipoServicio = salidaIncendioOtro.TipoServicio,
                    TipoAbertura = salidaIncendioOtro.TipoAbertura,
                    OtraAbertura = salidaIncendioOtro.OtraAbertura,
                    TipoTecho = salidaIncendioOtro.TipoTecho,
                    OtroTecho = salidaIncendioOtro.OtroTecho,
                    OtroLugarIncendio = salidaIncendioOtro.OtroLugar,
                    NombreEstablecimiento = salidaIncendioOtro.NombreEstablecimiento,
                    CantidadPisos = salidaIncendioOtro.CantidadPisos,
                    PisoAfectado = salidaIncendioOtro.PisoAfectado,
                    CantidadAmbientes = salidaIncendioOtro.CantidadAmbientes,
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = bomberoEncargado,

                    Seguro = new()
                    {
                        CompañiaAseguradora = salidaIncendioOtro.CompaniaAseguradora,
                        NumeroDePoliza = salidaIncendioOtro.NumeroPoliza,
                        FechaDeVencimineto = salidaIncendioOtro.FechaVencimineto,
                    },

                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()
                };

            //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
            if (salidaIncendioOtro.CuerpoParticipante != null && salidaIncendioOtro.CuerpoParticipante.Any())
            {
                incendioOtro.CuerpoParticipante = salidaIncendioOtro.CuerpoParticipante.ToList();
            }

            //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
            if (salidaIncendioOtro.Moviles != null && salidaIncendioOtro.Moviles.Any())
            {
                incendioOtro.Moviles = salidaIncendioOtro.Moviles.ToList();
            }

            //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
            if (salidaIncendioOtro.Damnificados != null && salidaIncendioOtro.Damnificados.Any())
            {
                incendioOtro.Damnificados = salidaIncendioOtro.Damnificados.ToList();
            }

            // Aquí agregamos los vehículos afectados a la lista correcta
            if (salidaIncendioOtro.VehiculoAfectados != null && salidaIncendioOtro.VehiculoAfectados.Any())
            {
                foreach (var vehiculo in salidaIncendioOtro.VehiculoAfectados)
                {
                    VehiculoAfectadoIncendio vehiculoAfectado = new()
                        {
                            Marca = vehiculo.Marca,
                            Patente = vehiculo.Patente,
                            Tipo = vehiculo.Tipo,
                            Año = vehiculo.Año,
                            Modelo = vehiculo.Modelo,
                            Airbag = vehiculo.Airbag,
                            // Hice una nueva instancia de SeguroVehiculo para cada vehículo
                            Seguro = new SeguroVehiculo()
                            {
                                CompañiaAseguradora = vehiculo.Seguro?.CompañiaAseguradora,
                                NumeroDePoliza = vehiculo.Seguro?.NumeroDePoliza,
                                FechaDeVencimineto = vehiculo.Seguro?.FechaDeVencimineto
                            }

                        };
                    salidaIncendioOtro.VehiculoAfectados.Add(vehiculoAfectado);
                }
            }

            await SalidaService.GuardarSalida(incendioOtro);
            HandleOk1(incendioOtro.AnioNumeroParte, incendioOtro.NumeroParte);
            await Init();
            StateHasChanged();
        }

        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }

        Console.WriteLine($"Success:{JsonSerializer.Serialize(salidaIncendioOtro)}");
    }

    // OnFinishFailed
    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        message.Error("Error al cargar, posible información ausente");
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(salidaIncendioOtro)}");
    }

    @*"Delete" y Dispose*@
    public void Dispose()
    {
        Context?.Dispose();
    }
}