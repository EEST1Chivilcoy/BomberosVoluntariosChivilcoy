@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-comercio"
@using Vista.Services;
@inject ISalidaService SalidaService;
@using Vista.Data.ViewModels;
@using System.ComponentModel.DataAnnotations;
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    textarea {
        resize: none !important;
        min-height: 85px !important;
        width: 100% !important;
    }
</style>

<Form Model="@salidaIncendioComercioView"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <div class="steps-content" style="max-height: 620px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">


            @if (current == 0)
            {
                @*General*@
                <DatosGenerales Model="@salidaIncendioComercioView"
                                OnChange="@OnChange"
                                animationClass="@animationClass"/>
            }
            else if (current == 1)
            {
            @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@salidaIncendioComercioView"
                           OnChange="@OnChange"
                           animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                @*Seguro*@
                <Seguro Model="@salidaIncendioComercioView"
                        OnChange="@OnChange"
                        animationClass="@animationClass" />
            }
            else if (current == 3)
            {
                @*Chofer y Moviles*@
                <Vehiculos Model="@salidaIncendioComercioView"
                           OnChange="@OnChange"
                           animationClass="@animationClass"
                           bomberoChoferes="@bomberoChoferes"
                           movilSalidaViewModels="@movilSalidaViewModels"
                           chofer="@chofer"
                           Moviles="@Moviles"
                           NumeroMovil="@NumeroMovil"
                           MovilesSalidasL="@MovilesSalidasL" />
            }
            else if (current == 4)
            {
                @*Bomberos*@
                <Personal Model="@salidaIncendioComercioView"
                          OnChange="@OnChange"
                          animationClass="@animationClass"
                          bomberoTodos="@bomberoTodos"
                          bomberoSalidaView="@bomberoSalidaView"
                          bomberosSalida="@bomberosSalida"
                          BomberoEncargado="@BomberoEncargado"
                          QuienLLenoPlanilla="@QuienLLenoPlanilla"
                          BomberoEncargadoCall="@HandleBomberoEncargadoChanged"
                          QuienLLenoPlanillaCall="@HandleQuienLLenoPlanillaChanged" />
            }
            else if (current == 5)
            {
                @*Info-Salida*@
                <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Lugar</label>
                        <EnumSelect TEnum="TipoLugarComercioIncendio" @bind-Value="@salidaIncendioComercioView.TipoLugar" />
                    </div>
                </div>
                <Establecimiento Model="@salidaIncendioComercioView"
                                 OnChange="@OnChange"
                                 animationClass="@animationClass" />
            }
            else if (current == 6)
            {
                <div class="slick-contenedor">
                    <DatosSalida Model="@salidaIncendioComercioView"
                                 animationClass="@animationClass"
                                 OnChange="@OnChange" />
                </div>
            }
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Cargar salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {

    @*Context y ViewModels*@
    BomberosDbContext Context { get; set; }
    public IncendioComercioViewModels salidaIncendioComercioView = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    public List<BomberoViweModel> bomberoChoferes = new();

    Movil[] Moviles;

    bool _visible1;

    bool switchDamificados { get; set; }
    private void HandleSwitchChanged(bool value)
    {
        switchDamificados = value;
        StateHasChanged();
    }

    private void HandleBomberoEncargadoChanged(int value)
    {
        BomberoEncargado = value;
        StateHasChanged();
    }

    private void HandleQuienLLenoPlanillaChanged(int value)
    {
        QuienLLenoPlanilla = value;
        StateHasChanged();
    }

    public int ImprimirNumeroParte;
    void HandleOk1(int _numeroParte)
    {
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    @*Damnificados | Bomberos | Moviles y Chofer | Steps *@

    @*Damnificados*@
    bool switchValue { get; set; } // Cargar Damnificado [Si/No]

    @*Bomberos*@
    int BomberoEncargado;
    int QuienLLenoPlanilla;

    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    Dotacion = b.Dotacion,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                };
            if (b.Chofer == true)
            {
                bomberoChoferes.Add(bombero);
            }
            bomberoTodos.Add(bombero);
        }
    }


    @*Moviles | Chofer*@
    int chofer;
    string NumeroMovil;
    bool _visible = false; //Modal de Carga de Combustible
    bool chekM { get; set; }// Datos sobre Carga de Combustible [Si/No]

    bool loading = false;
    void toggle(bool value) => loading = value;

    //Modals
    private void ShowModal()
    {
        _visible = true;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }
    
    @*Steps*@
    public int current { get; set; } = 0;//Ubicacion del Step
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""},  /* Establecimiento */
        new StepItem {Title = " ", Content = ""}  /* Salida */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    @*Init | OnChange y OnFinish*@
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        salidaIncendioComercioView = new();
        Context = DbFactory.CreateDbContext();
        salidaIncendioComercioView.Tipo = TipoIncendio.Comercios; // Establecer valor predeterminado
        Moviles = await Context.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }

    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoEncargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == BomberoEncargado);
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == QuienLLenoPlanilla);
            Vista.Data.Models.Salidas.Planillas.IncendioComercio? numeroParte = await Context.IncendiosComercios.Where(m => m.NumeroParte == salidaIncendioComercioView.NumeroParte).SingleOrDefaultAsync();
            if (numeroParte != null)
            {
                message.Warning("Numero parte ya existente.");
                return;
            }
            IncendioComercio salidaIncendioComercio = new()
                {
                    Tipo = salidaIncendioComercioView.Tipo,
                    Descripcion = salidaIncendioComercioView.Descripcion,
                    HoraSalida = salidaIncendioComercioView.HoraSalida,
                    HoraLlegada = salidaIncendioComercioView.HoraLLegada,
                    NumeroParte = salidaIncendioComercioView.NumeroParte,
                    AnioNumeroParte = salidaIncendioComercioView.AnioNumeroParte,
                    CalleORuta = salidaIncendioComercioView.CalleORuta,
                    NumeroOKilometro = salidaIncendioComercioView.NumeroOKilometro,
                    EntreCalles = salidaIncendioComercioView.EntreCalles,
                    PisoNumero = salidaIncendioComercioView.PisoNumero,
                    Depto = salidaIncendioComercioView.Depto,
                    TipoZona = salidaIncendioComercioView.TipoZona,
                    NombreSolicitante = salidaIncendioComercioView.NombreSolicitante,
                    ApellidoSolicitante = salidaIncendioComercioView.ApellidoSolicitante,
                    DniSolicitante = salidaIncendioComercioView.DniSolicitante,
                    TelefonoSolicitante = salidaIncendioComercioView.TelefonoSolicitante,
                    NombreYApellidoReceptor = salidaIncendioComercioView.NombreYApellidoReceptor,
                    TelefonoReceptor = salidaIncendioComercioView.TelefonoReceptor,
                    DeteccionAutomaticaId = salidaIncendioComercioView.DeteccionAutomaticaId,
                    Extintor = salidaIncendioComercioView.Extintor,
                    Hidrante = salidaIncendioComercioView.Hidrante,
                    TipoLugar = salidaIncendioComercioView.TipoLugar,
                    TipoEvacuacion = salidaIncendioComercioView.TipoEvacuacion,
                    TipoSuperficieAfectada = salidaIncendioComercioView.TipoSuperficieAfectada,
                    DetalleSuperficieAfectadaIncendio = salidaIncendioComercioView.DetalleSuperficieAfectadaIncendio,
                    SuperficieAfectadaCausa = salidaIncendioComercioView.SuperficieAfectadaCausa,
                    TipoServicio = salidaIncendioComercioView.TipoServicio,
                    TipoAbertura = salidaIncendioComercioView.TipoAbertura,
                    OtraAbertura = salidaIncendioComercioView.OtraAbertura,
                    TipoTecho = salidaIncendioComercioView.TipoTecho,
                    OtroTecho = salidaIncendioComercioView.OtroTecho,
                    OtroLugar = salidaIncendioComercioView.OtroLugar,
                    NombreEstablecimiento = salidaIncendioComercioView.NombreEstablecimiento,
                    CantidadPisos = salidaIncendioComercioView.CantidadPisos,
                    PisoAfectado = salidaIncendioComercioView.PisoAfectado,
                    CantidadAmbientes = salidaIncendioComercioView.CantidadAmbientes,
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = bomberoEncargado,
                    Seguro = new()
                    {
                        CompañiaAseguradora = salidaIncendioComercioView.CompaniaAseguradora,
                        NumeroDePoliza = salidaIncendioComercioView.NumeroPoliza,
                        FechaDeVencimineto = salidaIncendioComercioView.FechaVencimineto,
                    },
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()
                };
            foreach (BomberoSalidaViewModels bom in bomberosSalida)
            {
                Bombero? bomberoSalida = await Context.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                BomberoSalida BomSalida = new()
                    {
                        Salio = bom.Salio,
                        Bombero = bomberoSalida
                    };
                salidaIncendioComercio.CuerpoParticipante.Add(BomSalida);
            }

            foreach (MovilSalidaViewModels m in MovilesSalidasL)
            {
                Bombero? bomberoChofer = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
                Movil? Movilsalida = await Context.Moviles.SingleOrDefaultAsync(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil);
                if (Movilsalida is not null)
                {
                    Movilsalida.Kilometraje = m.KmLlegada;
                }
                MovilSalida movilS = new()
                    {
                        CargoCombustible = m.CargoCombustible,
                        NumeroFactura = movilSalidaViewModels.NumeroFactura,
                        FechaFactura = movilSalidaViewModels.FechaFactura,
                        TipoConbustible = movilSalidaViewModels.TipoConbustible,
                        CantidadLitros = movilSalidaViewModels.CantidadLitros,
                        QuienLleno = movilSalidaViewModels.QuienLleno,
                        TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                        KmLlegada = m.KmLlegada,
                        Chofer = bomberoChofer,
                        Movil = Movilsalida
                    };
                salidaIncendioComercio.Moviles.Add(movilS);
            }

            foreach (DamnificadoViewModels d in DamnificadosSalida)
            {
                Damnificado damn = new()
                    {
                        Nombre = d.Nombre,
                        Apellido = d.Apellido,
                        Dni = d.Dni,
                        Sexo = d.Sexo,
                        LugarDeNacimiento = d.LugarDeNacimiento,
                        Edad = d.Edad,
                        Estado = d.Estado,
                    };
                salidaIncendioComercio.Damnificados.Add(damn);
            }
            await SalidaService.CargarIncendio(salidaIncendioComercio);
            HandleOk1(salidaIncendioComercio.NumeroParte);
            await Init();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }
        Console.WriteLine($"Success:{JsonSerializer.Serialize(salidaIncendioComercioView)}");
    }

    // OnFinishFailed

    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }


    private void OnFinishFailed(EditContext editContext)
    {
        message.Error("Error al cargar, posible información ausente");
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(salidaIncendioComercioView)}");
    }

    @*"Delete" y Dispose*@

    public void Dispose()
    {
        Context?.Dispose();
    }
}
