@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/incendios-comercio"
@using Vista.Services;
@inject ISalidaService SalidaService;
@using Vista.Data.ViewModels;
@using System.ComponentModel.DataAnnotations;
@using Vista.Pages.Salidas.Incendios.ComponentesIncendio;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;
@using Vista.Data.Models.Salidas.Planillas.Incendios;

<head>
    <link href="css/salida.css" rel="stylesheet" />
</head>

<Form Model="@salidaIncendioComercioView"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;overflow: hidden!important;">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">

        <div style="text-align: center; margin-bottom: 20px;">
            <h2>INCENDIO COMERCIAL</h2>
        </div>


        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <Flex Justify="center">
            <div class="steps-content" style="max-height: 620px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
                @if (current == 0)
                {
                    @*General*@
                    <DatosGenerales Model="@salidaIncendioComercioView"
                                    animationClass="@animationClass"
                                    esSoloDireccion="true" />
                }
                else if (current == 1)
                {
                    @*Solicitante | Receptor | Damnificado*@
                    <Participantes Model="@salidaIncendioComercioView"
                                   animationClass="@animationClass" />
                }
                else if (current == 2)
                {
                    @*Seguro*@
                    <Seguro Model="@salidaIncendioComercioView"
                            animationClass="@animationClass" />
                }
                else if (current == 3)
                {
                    @*Chofer y Moviles*@
                    <Vehiculos Model="@salidaIncendioComercioView"
                               animationClass="@animationClass" />
                }
                else if (current == 4)
                {
                    @*Bomberos*@
                    <Personal Model="@salidaIncendioComercioView"
                              animationClass="@animationClass" />
                }
                else if (current == 5)
                {
                    @*Info-Salida*@
                    <div class="inpt-cont-inline">
                        <div class="inpt-cont">
                            <label class="inpt-cont--lbl">Lugar</label>
                            <EnumSelect TEnum="TipoLugarComercioIncendio" @bind-Value="@salidaIncendioComercioView.TipoLugar" />
                        </div>
                    </div>
                    <Establecimiento Model="@salidaIncendioComercioView"
                                     animationClass="@animationClass" />
                }
                else if (current == 6)
                {
                    <div class="slick-contenedor">
                        <DatosSalida Model="@salidaIncendioComercioView"
                                     animationClass="@animationClass" />
                    </div>
                }
            </div>
        </Flex>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal AnioNumeroParte="@ImprimirAnio" NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code {
    @*Context y ViewModels*@
    BomberosDbContext Context { get; set; }
    public IncendioComercioViewModels salidaIncendioComercioView = new();
    private DamnificadoViewModels damnificado = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    public List<BomberoViweModel> bomberoChoferes = new();

    Movil[] Moviles;

    bool _visible1;

    public int ImprimirAnio;
    public int ImprimirNumeroParte;
    void HandleOk1(int _anio, int _numeroParte)
    {
        ImprimirAnio = _anio;
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    bool loading = false;
    void toggle(bool value) => loading = value;

    @*Steps*@
    public int current { get; set; } = 0;//Ubicacion del Step
    private string animationClass = "";

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
        new StepItem {Title = " ", Content = ""},  /* Establecimiento */
        new StepItem {Title = " ", Content = ""}  /* Salida */
    };

    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }

    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    @*Init | OnChange y OnFinish*@
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        salidaIncendioComercioView = new();
        Context = DbFactory.CreateDbContext();
    }

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? bomberoEncargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == salidaIncendioComercioView.LegajoEncargado);
            Bombero? BomberoLlenoPlanilla = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == salidaIncendioComercioView.LegajoLLenoPlanilla);
            IncendioComercio? numeroParte = await Context.IncendiosComercios.Where(m => m.NumeroParte == salidaIncendioComercioView.NumeroParte).SingleOrDefaultAsync();
            if (numeroParte != null)
            {
                message.Warning("Numero parte ya existente.");
                return;
            }
            IncendioComercio salidaIncendioComercio = new()
                {
                 
                    Descripcion = salidaIncendioComercioView.Descripcion,
                    HoraSalida = salidaIncendioComercioView.HoraSalida,
                    HoraLlegada = salidaIncendioComercioView.HoraLLegada,
                    NumeroParte = salidaIncendioComercioView.NumeroParte,
                    AnioNumeroParte = salidaIncendioComercioView.AnioNumeroParte,
                    CalleORuta = salidaIncendioComercioView.CalleORuta,
                    NumeroOKilometro = salidaIncendioComercioView.NumeroOKilometro,
                    EntreCalles = salidaIncendioComercioView.EntreCalles,
                    PisoNumero = salidaIncendioComercioView.PisoNumero,
                    Depto = salidaIncendioComercioView.Depto,
                    TipoZona = salidaIncendioComercioView.TipoZona,
                    NombreSolicitante = salidaIncendioComercioView.NombreSolicitante,
                    ApellidoSolicitante = salidaIncendioComercioView.ApellidoSolicitante,
                    DniSolicitante = salidaIncendioComercioView.DniSolicitante,
                    TelefonoSolicitante = salidaIncendioComercioView.TelefonoSolicitante,
                    NombreYApellidoReceptor = salidaIncendioComercioView.NombreYApellidoReceptor,
                    DeteccionAutomaticaId = salidaIncendioComercioView.DeteccionAutomaticaId,
                    Extintor = salidaIncendioComercioView.Extintor,
                    Hidrante = salidaIncendioComercioView.Hidrante,
                    TipoLugar = salidaIncendioComercioView.TipoLugar,
                    TipoEvacuacion = salidaIncendioComercioView.TipoEvacuacion,
                    TipoSuperficieAfectada = salidaIncendioComercioView.TipoSuperficieAfectada,
                    DetalleSuperficieAfectadaIncendio = salidaIncendioComercioView.DetalleSuperficieAfectadaIncendio,
                    SuperficieAfectadaCausa = salidaIncendioComercioView.SuperficieAfectadaCausa,
                    TipoServicio = salidaIncendioComercioView.TipoServicio,
                    TipoAbertura = salidaIncendioComercioView.TipoAbertura,
                    OtraAbertura = salidaIncendioComercioView.OtraAbertura,
                    TipoTecho = salidaIncendioComercioView.TipoTecho,
                    OtroTecho = salidaIncendioComercioView.OtroTecho,
                    OtroLugarIncendio = salidaIncendioComercioView.OtroLugar,
                    NombreEstablecimiento = salidaIncendioComercioView.NombreEstablecimiento,
                    CantidadPisos = salidaIncendioComercioView.CantidadPisos,
                    PisoAfectado = salidaIncendioComercioView.PisoAfectado,
                    CantidadAmbientes = salidaIncendioComercioView.CantidadAmbientes,
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = bomberoEncargado,

                    Seguro = new()
                    {
                        CompañiaAseguradora = salidaIncendioComercioView.CompaniaAseguradora,
                        NumeroDePoliza = salidaIncendioComercioView.NumeroPoliza,
                        FechaDeVencimineto = salidaIncendioComercioView.FechaVencimineto,
                    },

                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()
                };

            //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
            if (salidaIncendioComercioView.CuerpoParticipante != null && salidaIncendioComercioView.CuerpoParticipante.Any())
            {
                salidaIncendioComercio.CuerpoParticipante = salidaIncendioComercioView.CuerpoParticipante.ToList();
            }

            //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
            if (salidaIncendioComercioView.Moviles != null && salidaIncendioComercioView.Moviles.Any())
            {
                salidaIncendioComercio.Moviles = salidaIncendioComercioView.Moviles.ToList();
            }

            //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
            if (salidaIncendioComercioView.Damnificados != null && salidaIncendioComercioView.Damnificados.Any())
            {
                salidaIncendioComercio.Damnificados = salidaIncendioComercioView.Damnificados.ToList();
            }

            await SalidaService.GuardarSalida(salidaIncendioComercio);
            HandleOk1(salidaIncendioComercio.AnioNumeroParte, salidaIncendioComercio.NumeroParte);
            await Init();
            StateHasChanged();
        }

        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }

        Console.WriteLine($"Success:{JsonSerializer.Serialize(salidaIncendioComercioView)}");
    }

    // OnFinishFailed
    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        message.Error("Error al cargar, posible información ausente");
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(salidaIncendioComercioView)}");
    }

    @*"Delete" y Dispose*@
    public void Dispose()
    {
        Context?.Dispose();
    }
}
