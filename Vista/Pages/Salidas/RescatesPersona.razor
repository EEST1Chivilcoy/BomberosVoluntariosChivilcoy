@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IToastService toastService
@page "/salidas/rescates-persona"
@using Blazored.Toast.Services;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.ViewModels.Rescates;
@using System.Text.Json;
@using System.Windows;

<h2 style="text-align:center; text-decoration:underline;">Rescate Persona</h2>

<div style="width: 60%;">
    <Form Model="@PersonaViewModel" Style="padding: 2em 0;"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed">
        @*Datos generales de las salidas*@
        <FormItem Label="Descripcion">
            <Input @bind-Value="@PersonaViewModel.Descripcion" />
        </FormItem>
        <FormItem Label="Dato Hora salida">
            <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@PersonaViewModel.HoraSalida" />
        </FormItem>
        <FormItem Label="Dato Hora llegada">
            <DatePicker TValue="DateTime" ShowTime="@true" OnChange="OnChange" @bind-Value="@PersonaViewModel.HoraLLegada" />
        </FormItem>
        <FormItem Label="Calle/Ruta">
            <Input @bind-Value="@PersonaViewModel.CalleORuta" />
        </FormItem>
        <FormItem Label="Numero/kilometro">
            <Input @bind-Value="@PersonaViewModel.NumeroOKilometro" />
        </FormItem>
        <FormItem Label="Entre calles">
            <Input @bind-Value="@PersonaViewModel.EntreCalles" />
        </FormItem>
        <FormItem Label="PisoNumero">
            <Input @bind-Value="@PersonaViewModel.PisoNumero" />
        </FormItem>
        <FormItem Label="Depto">
            <Input @bind-Value="@PersonaViewModel.Depto" />
        </FormItem>
        <FormItem Label="Tipo zona">
            <EnumSelect TEnum="TipoZona" @bind-Value="@PersonaViewModel.TipoZona" />
        </FormItem>
        @*Solicitante datos*@
        <b><label>Datos de solicitante</label></b>
        <FormItem Label="Nombre del solicitante">
            <Input @bind-Value="@PersonaViewModel.NombreSolicitante" />
        </FormItem>
        <FormItem Label="Apelldio del solicitante">
            <Input @bind-Value="@PersonaViewModel.ApellidoSolicitante" />
        </FormItem>
        <FormItem Label="documneto del solicitante">
            <Input @bind-Value="@PersonaViewModel.DniSolicitante" />
        </FormItem>
        <FormItem Label="Telefono  del solicitante">
            <Input @bind-Value="@PersonaViewModel.TelefonoSolicitante" />
        </FormItem>
        @*Datos  receptor*@
        <b><label>Datos del Receptor</label></b>
        <FormItem Label="Nombre y apellido del receptor">
            <Input @bind-Value="@PersonaViewModel.NombreYApellidoReceptor" />
        </FormItem>
        <FormItem Label="Telefono receptor">
            <Input @bind-Value="@PersonaViewModel.TelefonoReceptor" />
        </FormItem>

        @*Datos de damnificados*@
        <FormItem Label="¿Hubo damnificados?">
            <Switch @bind-Checked="switchValue" />
        </FormItem>
        @if (switchValue == true)
        {

            <FormItem Label="Nombre">
                <Input @bind-Value="@damnificado.Nombre" />
            </FormItem>
            <FormItem Label="Apellido">
                <Input @bind-Value="@damnificado.Apellido" />
            </FormItem>
            <FormItem Label="Documento">
                <Input @bind-Value="@damnificado.Dni" />
            </FormItem>
            <FormItem Label="Tipo sexo">
                <EnumSelect TEnum="TipoSexo" @bind-Value="@damnificado.Sexo" />
            </FormItem>
            <FormItem Label="Lugar De nacimiento">
                <Input @bind-Value="@damnificado.LugarDeNacimiento" />
            </FormItem>
            <FormItem Label="edad">
                <AntDesign.InputNumber @bind-Value="damnificado.Edad" />
            </FormItem>
            <FormItem Label="Tipo material">
                <EnumSelect TEnum="TipoDamnificado" @bind-Value="@damnificado.Estado" />
            </FormItem>
            <Button OnClick="@AgregarDamnificado">Agregar damnificado</Button>
            <div>
                <Table Context="Damnificados" DataSource="DamnificadosSalida" Bordered>
                <PropertyColumn Property="d=>d.NombreYApellido"></PropertyColumn>
                <PropertyColumn Property="d=>d.Edad"></PropertyColumn>
                <PropertyColumn Property="d=>d.Estado"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="()=> deleteRowDamnificados(Damnificados.Dni)"
                                OkText="Yes"
                                CancelText="No">
                        <a>Delete</a>
                    </Popconfirm>
                </ActionColumn>
            </Table>
        </div>
        }

        @*Moviles de salidas*@
        <b><label>Datos de chofer</label></b>
        <br />
        <FormItem Label="¿Cargo Combustible?" style="display: grid;place-items: center;">
            <Switch DefaultChecked="false" @bind-Checked="@chekM" CheckedChildren="Cargo" UnCheckedChildren="No Cargo" OnChange="OnChangeChofer" />
        </FormItem>
        <FormItem Label="Elija el chofer">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoChoferes"
            @bind-Value="@chofer"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Select a person"
                    DefaultActiveFirstOption="false"
                    EnableSearch>
            </Select>
        </FormItem>
        <FormItem Label="Numero de movil">
            <Select TItem="Movil"
                    TItemValue="string"
                    DataSource="@Moviles"
                    @bind-Value="@NumeroMovil"
                    LabelName="@nameof(Movil.NumeroMovil)"
                    ValueName="@nameof(Movil.NumeroMovil)"
                    Placeholder="Selecione el movil"
                    DefaultActiveFirstOption="false"
                    EnableSearch>
            </Select>

        </FormItem>
        <br />
        @if (NumeroMovil is not null)
        {
            foreach (Movil m in Moviles)
            {
                //Tendria que recorrer a movilSalida para poner el km de llegada
                if (m.NumeroMovil == NumeroMovil)
                {
                    @* m. = m.;*@
                    <FormItem>
                        <AntDesign.InputNumber @bind-Value="@m.kilometraje" Disabled="true" />
                    </FormItem>
                    <FormItem>
                        <AntDesign.InputNumber @bind-Value="@movilSalidaViewModels.KmLlegada" />
                    </FormItem>
                    break;
                }
            }
        }
        <Button OnClick="@AgregarMovilSalida">Cargar Movil salida</Button>
        <div>
            <Table Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
                <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
                <PropertyColumn Property="c=>c.ChoferNombreCompleto"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                                OkText="Yes"
                                CancelText="No">
                        <a>Delete</a>
                    </Popconfirm>
                </ActionColumn>
            </Table>
        </div>
        @*Cuerpos paraticipantes*@
        <b><label>Cuerpo Participante</label></b>
        <FormItem Label="Tipo Escalafon">
            <EnumSelect TEnum="EscalafonJerarquico" @bind-Value="@bomberoSalidaView.Grado" />
        </FormItem>
        <FormItem Label="Elija el bombero">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoTodos"
            @bind-Value="@bomberoSalidaView.NumeroLegajo"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Selecione el bombero"
                    DefaultActiveFirstOption="false"
                    EnableSearch>
            </Select>
        </FormItem>
        <Checkbox @bind-Checked="chekB"> Salio</Checkbox>
        <br />
        <Button OnClick="@AgregarCuerpoParticipante">Cargar cuerpo participante</Button>
        <br />
        <div>
            <Table Context="bomberosSalida1" DataSource="bomberosSalida" Bordered>
                <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
                <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                                OkText="Yes"
                                CancelText="No">
                        <a>Delete</a>
                    </Popconfirm>
                </ActionColumn>
            </Table>
        </div>
        <b><label>Datos encargados</label></b>
        <FormItem Label="Encargado">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoTodos"
                    @bind-Value="@BomberoEncargado"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Select a person"
                    DefaultActiveFirstOption="false"
                    EnableSearch>
            </Select>
        </FormItem>
        <b><label>Quien lleno planilla</label></b>
        <FormItem Label="Bombero que lleno la planilla">
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoTodos"
                    @bind-Value="@QuienLLenoPlanilla"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Select a person"
                    DefaultActiveFirstOption="false"
                    EnableSearch>
            </Select>
        </FormItem>
        @*Tipo servicio*@
        <FormItem Label="Tipo Servicio salida">
            <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@PersonaViewModel.TipoServicio" />
        </FormItem>
        @*Propio de rescates*@
        <FormItem Label="Tipo  lugar de rescate">
            <EnumSelect TEnum="TipoRescatePersona" @bind-Value="@PersonaViewModel.TipoRescatePersona" />
        </FormItem>
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="@CargarRescatePersona">
                Cargar salida
            </Button>
        </FormItem>
    </Form>
</div>
<Modal Title="@("Datos de la carga de combustible")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@movilSalidaViewModels"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinishModel"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form1">
        <FormItem Label="Numero factura">
            <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
        </FormItem>
        <FormItem Label="Fecha factura">
            <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
        </FormItem>
        <FormItem Label="Tipo Combustible">
            <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
        </FormItem>
        <FormItem Label="Cantidad de Litros">
            <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
        </FormItem>
        <FormItem Label="Quien lleno">
            <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
        </FormItem>
        <FormItem Label="TelefonoQuienLleno">
            <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
        </FormItem>
    </Form>
</Modal>

@code {
    private DamnificadoViewModels damnificado = new();
    private RescatePersonaViewModels PersonaViewModel;
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    public List<BomberoViweModel> bomberoTodos = new();
    public List<BomberoViweModel> bomberoChoferes = new();
    private Form<MovilSalidaViewModels> _form1;
    Bombero[] TodosBomberos;
    Movil[] Moviles;
    bool switchValue { get; set; }
    bool switchValuev { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }

    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;

    BomberosDbContext db { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await Init();


    }
    private async Task Init()
    {
        PersonaViewModel = new();
        db = DbFactory.CreateDbContext();
        TodosBomberos = await db.Bomberos.ToArrayAsync();
        Moviles = await db.Moviles.OrderBy(m => m.NumeroMovil).ToArrayAsync();
        await CargarBomberosView();
    }
    public async Task CargarRescatePersona()
    {

        try
        {
            Bombero? bomberoReceptor = await db.Bomberos.Where(b => b.NumeroLegajo == BomberoReceptor).SingleOrDefaultAsync();
            Bombero? bomberoEncargado = await db.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();
            Bombero? BomberoLlenoPlanilla = await db.Bomberos.Where(b => b.NumeroLegajo == QuienLLenoPlanilla).SingleOrDefaultAsync();

            RescatePersona Rescates = new()
                {

                    NumeroParte = PersonaViewModel.NumeroParte,
                    HoraSalida = PersonaViewModel.HoraSalida,
                    HoraLlegada = PersonaViewModel.HoraLLegada,
                    //KmSalida = PersonaViewModel.KmSalida,
                    //KmLlegada = PersonaViewModel.KmLlegada,
                    Descripcion = PersonaViewModel.Descripcion,
                    CalleORuta = PersonaViewModel.CalleORuta,
                    NumeroOKilometro = PersonaViewModel.NumeroOKilometro,
                    EntreCalles = PersonaViewModel.EntreCalles,
                    PisoNumero = PersonaViewModel.PisoNumero,
                    Depto = PersonaViewModel.Depto,
                    NombreYApellidoReceptor = PersonaViewModel.NombreYApellidoReceptor,
                    TelefonoReceptor = PersonaViewModel.TelefonoReceptor,
                    TipoZona = PersonaViewModel.TipoZona,
                    NombreSolicitante = PersonaViewModel.NombreSolicitante,
                    ApellidoSolicitante = PersonaViewModel.ApellidoSolicitante,
                    DniSolicitante = PersonaViewModel.DniSolicitante,
                    TelefonoSolicitante = PersonaViewModel.TelefonoSolicitante,
                    TipoServicio = PersonaViewModel.TipoServicio,
                    //carga propio de rescates
                    TipoRescatePersona = PersonaViewModel.TipoRescatePersona,
                    QuienLleno = BomberoLlenoPlanilla,
                    ReceptorBombero = bomberoReceptor,
                    Encargado = bomberoEncargado,
                    //Seguro = new()
                    //{
                    //    CompañiaAseguradora = PersonaViewModel.CompaniaAseguradora,
                    //    NumeroDePoliza = PersonaViewModel.NumeroPoliza,
                    //    FechaDeVencimineto = PersonaViewModel.FechaVencimineto,
                    //},
                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()

                };
            foreach (BomberoSalidaViewModels bom in bomberosSalida)
            {
                Bombero? bomberoSalida = await db.Bomberos.Where(b => b.NumeroLegajo == bom.NumeroLegajo).SingleOrDefaultAsync();
                BomberoSalida BomSalida = new()
                    {
                        Salio = bom.Salio,
                        Grado = bom.Grado,
                        Bombero = bomberoSalida
                    };
                Rescates.CuerpoParticipante.Add(BomSalida);
            }
            foreach (MovilSalidaViewModels m in MovilesSalidasL)
            {
                Bombero? bomberoChofer = await db.Bomberos.Where(b => b.NumeroLegajo == m.Chofer.NumeroLegajo).SingleOrDefaultAsync();
                Movil? movilsalida = await db.Moviles.Where(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil).
                Include(s => s.Seguro).
                Include(i => i.Imagen).
                Include(f => f.Firmas).
                Include(b => b.Bomberos).
                Include(i => i.Incidentes).
                SingleOrDefaultAsync();
                MovilSalida movilS = new()
                    {
                        CargoCombustible = m.CargoCombustible,
                        NumeroFactura = m.NumeroFactura,
                        FechaFactura = m.FechaFactura,
                        TipoConbustible = m.TipoConbustible,
                        CantidadLitros = m.CantidadLitros,
                        QuienLleno = m.QuienLleno,
                        TelefonoQuienLleno = m.TelefonoQuienLleno,
                        KmLlegada = m.KmLlegada,
                        Chofer = bomberoChofer,
                        Movil = new()
                        {
                            NumeroMovil = movilsalida.NumeroMovil,
                            NumeroMotor = movilsalida.NumeroMotor,
                            ModeloBomba = movilsalida.ModeloBomba,
                            NumeroChasis = movilsalida.NumeroChasis,
                            Estado = movilsalida.Estado,
                            //KmSalida = m.KmSalida,
                            //KmLlegada = m.KmLlegada,
                            ImagenId = movilsalida.ImagenId,
                            Imagen = movilsalida.Imagen,
                            Firmas = movilsalida.Firmas,
                            Bomberos = movilsalida.Bomberos,
                            Incidentes = movilsalida.Incidentes,
                            Marca = movilsalida.Marca,
                            Modelo = movilsalida.Modelo,
                            Año = movilsalida.Año,
                            Patente = movilsalida.Patente,
                            Tipo = movilsalida.Tipo,
                            Seguro = movilsalida.Seguro,
                            SeguroId = movilsalida.SeguroId,
                            kilometraje = m.KmLlegada,


                        }

                        //encontrar forma de meter kilometros en movil de arriba

                    };
                Rescates.Moviles.Add(movilS);
            }

            foreach (DamnificadoViewModels d in DamnificadosSalida)
            {

                Damnificado damn = new()
                    {
                        Nombre = d.Nombre,
                        Apellido = d.Apellido,
                        Dni = d.Dni,
                        Sexo = d.Sexo,
                        LugarDeNacimiento = d.LugarDeNacimiento,
                        Edad = d.Edad,
                        Estado = d.Estado,
                    };
                Rescates.Damnificados.Add(damn);


            }
             db.RescatePersonas.Add(Rescates);
            await db.SaveChangesAsync();

            await Init();
            StateHasChanged();
            await message.Success("salida agregada correctamente");
        }

        catch (Exception ex)
        {
            toastService.ShowError($"Error en la carga: {ex.Message}");
        }

    }
    public async Task AgregarDamnificado()
    {
        

        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

            };
        DamnificadosSalida.Add(dp);
        StateHasChanged();
    }

    public async Task AgregarMovilSalida()
    {
        
        Bombero? bomberoChofer = await db.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await db.Moviles.Where(m => m.NumeroMovil == NumeroMovil).Include(s => s.Seguro).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,
                KmLlegada = movilSalidaViewModels.KmLlegada

            };
        MovilesSalidasL.Add(m);
        StateHasChanged();
    }

    public async Task AgregarCuerpoParticipante()
    {
        var boberos = await db.Bomberos.ToArrayAsync();
        foreach (var bom in boberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                    {
                        Salio = bomberoSalidaView.Salio,
                        Nombre = bom.Nombre,
                        Apellido = bom.Apellido,
                        NumeroLegajo = BomberoCuerpo
                    };
                bomberosSalida.Add(b);

            }
        }
        StateHasChanged();

    }


    private async void OnFinish(EditContext editContext)
    {
        try
        {
            CargarRescatePersona();
            await Init();
            StateHasChanged();
            await message.Success("Rescate cargado correctamente");
        }
    
        catch (Exception ex)
        {
            await Init();
            StateHasChanged();
            if (ex.InnerException != null)
                await message.Error(ex.InnerException.Message, 5);
            else
                await message.Error(ex.Message, 5);
        }
}

    private void OnFinishFailed(EditContext editContext)
    {
       
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        
    }
    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }
    private void OnChangeChofer(bool checkedValue)
    {
        if (checkedValue) ShowModal();
    }
    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await db.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            bomberoTodos.Add(bombero);
        }
        foreach (Bombero c in bomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        //NombreImagen = b.NombreImagen,
                        //TipoImagen = b.TipoImagen,
                        //Base64Imagen = b.Base64,
                        Dotacion = c.Dotacion,
                        //Nombre = b.NombreBrigada,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                        //TelefonoCel = b.TelefonoCel,
                        //TelefonoFijo = b.TelefonoFijo,
                        //TelefonoLaboral = b.TelefonoLaboral,
                        //Email = b.Email,

                    };
                bomberoChoferes.Add(bomberoChofer);
            }
        }
    }
    //metodos para modal
    private void OnFinishFailedModel(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }
    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    private void ShowModal()
    {
        _visible = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }
    private void OnFinishModel(EditContext editContext)
    {

        _visible = false;
    }
    private void HandleOk(MouseEventArgs e)
    {

        _visible = false;

    }
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }
    public void Dispose()
    {
        db?.Dispose();
    }
}
