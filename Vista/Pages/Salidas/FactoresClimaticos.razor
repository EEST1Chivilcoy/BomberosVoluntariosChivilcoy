@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/factores-climaticos"
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using Vista.Data.ViewModels.FactorClimatico;
@using Vista.Data.ViewModels.Personal;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }

    .ant-carousel .slick-dots li {
        display: none !important;
    }

    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    .ant-input-number {
        width: auto !important;
    }

    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }

    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .ant-table-cell {
        text-align: center !important;
    }

    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflox: auto !imporant;
        }
    }
</style>

<div class="contenedor" style="max-width: 100%;margin-top: 2em;">
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>
    <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">
        <Form Model="@modelFactorClimatico"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed">

            @if (current == 0)
            {
                @*General*@
                <DatosGenerales Model="@modelFactorClimatico"
                                OnChange="@OnChange"
                                animationClass="@animationClass" />
            }
            else if (current == 1)
            {
                @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@modelFactorClimatico"
                               OnChange="@OnChange"
                               animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                @*Moviles de salidas*@
                @*a la hora de pedir el chofer y movil,
            pedir dato unico para no cargar todo y buscarlo en la base de datos*@
                <b><label>Datos de chofer</label></b>
                <br />
                <FormItem Label="">
                    <Checkbox @bind-Checked="chekM"> Cargo combustible</Checkbox>
                    <br />
                    <Button Class="boton_p" OnClick="@ShowModal">
                        Cargo Combustible
                    </Button>
                </FormItem>


                <FormItem Label="Elija el chofer">
                    <Select TItem="BomberoViweModel"
                            TItemValue="int"
                            DataSource="@bomberoChoferes"
                    @bind-Value="@chofer"
                            LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                            ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                            Placeholder="Seleccione el bombero"
                            DefaultActiveFirstOption="false"
                                EnableSearch>
                 </Select>
             </FormItem>


                <FormItem Label="Numero de movil">
                    <Select TItem="Movil"
                            TItemValue="string"
                            DataSource="@Moviles"
                    @bind-Value="@NumeroMovil"
                            LabelName="@nameof(Movil.NumeroMovil)"
                            ValueName="@nameof(Movil.NumeroMovil)"
                            Placeholder="Seleccione el movil"
                            DefaultActiveFirstOption="false"
                                EnableSearch>
                 </Select>

             </FormItem>
                <br />
                @if (NumeroMovil is not null)
                {
                    foreach (Movil m in Moviles)
                    {
                        if (m.NumeroMovil == NumeroMovil)
                        {
                            modelFactorClimatico.Kilometraje = m.Kilometraje;
                            break;
                        }
                    }
                }
                <FormItem Label="Kilometro salida">
                    <AntDesign.InputNumber @bind-Value="modelFactorClimatico.Kilometraje" Disabled />
                 </FormItem>
                <FormItem Label="Kilometro llegada">
                    <AntDesign.InputNumber @bind-Value="modelFactorClimatico.KmLlegada" />
                </FormItem>
                <Button OnClick="@AgregarMovilSalida">Cargar Movil salida</Button>
                <br />
                <div>
                    <Table Context="MovilesSalidasL1" DataSource="MovilesSalidasL" Bordered>
                     <PropertyColumn Property="c=>c.MovilesSalida.NumeroMovil"></PropertyColumn>
                     <PropertyColumn Property="c=>c.ChoferNombreCompleto"></PropertyColumn>
                     <ActionColumn Title="Acciones">
                         <Popconfirm Title="Sure to delete?"
                                     OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.NumeroMovil)"
                                     OkText="Yes"
                                     CancelText="No">
                             <a>Delete</a>
                         </Popconfirm>
                     </ActionColumn>
                 </Table>
             </div>
            }
            else if (current == 3)
            {
                @*Cuerpos paraticipantes*@
                <b><label>Cuerpo Participante</label></b>
                <FormItem Label="Elija el bombero">
                    <Select TItem="BomberoViweModel"
                            TItemValue="int"
                            DataSource="@bomberoTodos"
                    @bind-Value="@BomberoCuerpo"
                            LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                            ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                            Placeholder="Seleccione el bombero"
                            DefaultActiveFirstOption="false"
                                EnableSearch>
                 </Select>
             </FormItem>
                <Checkbox @bind-Checked="@chekB"> Salio</Checkbox>
                <br />
                <Button OnClick="@AgregarCuerpoParticipante">Cargar cuerpo participante</Button>
                <br />
                <div>
                    <Table Context="bomberosSalida1" DataSource="bomberosSalida" Bordered>
                     <PropertyColumn Property="c=>c.Nombre"></PropertyColumn>
                     <PropertyColumn Property="c=>c.Apellido"></PropertyColumn>
                     <ActionColumn Title="Acciones">
                         <Popconfirm Title="Sure to delete?"
                                     OnConfirm="()=> deleteRow(bomberosSalida1.NumeroLegajo)"
                                     OkText="Yes"
                                     CancelText="No">
                             <a>Delete</a>
                         </Popconfirm>
                     </ActionColumn>
                 </Table>
             </div>
                <b><label>Elija al encargado</label></b>
                <FormItem Label="Encargado">
                    <Select TItem="BomberoViweModel"
                            TItemValue="int"
                            DataSource="@bomberoTodos"
                    @bind-Value="@BomberoEncargado"
                            LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                            ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                            Placeholder="Seleccione un encargado"
                            DefaultActiveFirstOption="false"
                                EnableSearch>
                 </Select>
             </FormItem>
                <b><label>Quien lleno planilla</label></b>
                <FormItem Label="Bombero que lleno la planilla">
                    <Select TItem="BomberoViweModel"
                            TItemValue="int"
                            DataSource="@bomberoTodos"
                    @bind-Value="@QuienLLenoPlanilla"
                            LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                            ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                            Placeholder="Seleccione un encargado"
                            DefaultActiveFirstOption="false"
                                EnableSearch>
                 </Select>
             </FormItem>
            }
            else if (current == 4)
            {
                @*Tipo servicio*@
                <FormItem Label="Tipo Servicio salida">
                    <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@modelFactorClimatico.TipoServicio" />
                </FormItem>

                @*propio de la salida de Factor Climatico*@

                <FormItem Label="Tipo Factores Climaticos">
                    <EnumSelect TEnum="TipoFactoresClimaticos" @bind-Value="@modelFactorClimatico.Tipo" />
                </FormItem>
                <FormItem Label="Tipo Superficie">
                    <EnumSelect TEnum="TipoSuperficie" @bind-Value="@modelFactorClimatico.Superficie" />
                </FormItem>
                <FormItem Label="Tipo Evacuacion">
                    <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@modelFactorClimatico.Evacuacion" />
                </FormItem>
                <FormItem Label="Detalles">
                    <Input @bind-Value="@modelFactorClimatico.DetalleSuperficieDañada">
                </FormItem>
            }
        </Form>

    </div>
    <div class="steps-action">
        @if (current > 0)
        {
            <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
        }
        @if (current < steps.Length - 1)
        {
            <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
        }
        @if (current == steps.Length - 1)
        {
            <Button Class="boton_p" HtmlType="submit">
                Cargar salida
            </Button>
        }
    </div>
</div>

<Modal Title="@("Datos de la carga de combustible")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@movilSalidaViewModels"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinishModel"
          OnFinishFailed="OnFinishFailed"
    @ref="@_form1">
        <FormItem Label="Numero factura">
            <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
        </FormItem>
        <FormItem Label="Fecha factura">
            <DatePicker TValue="DateTime?" ShowTime="@true" OnChange="OnChange" @bind-Value="@movilSalidaViewModels.FechaFactura" />
        </FormItem>
        <FormItem Label="Tipo Combustible">
            <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
        </FormItem>
        <FormItem Label="Cantidad de Litros">
            <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
        </FormItem>
        <FormItem Label="Quien lleno">
            <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
        </FormItem>
        <FormItem Label="TelefonoQuienLleno">
            <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Datos de la carga de Factores Climaticos")"
       Visible="@imprimirmodal"
       OnOk="@HandleOkIMP"
       OnCancel="@HandleCancelIMP">
    <p>Imprimir con croquis</p>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{modelFactorClimatico.NumeroParte}/{true}", true); })">Si</button>
    <button @onclick="@(() => { navigationManager.NavigateTo($"/PlanillasIntervencion/Imprimir/{modelFactorClimatico.NumeroParte}/{false}", true); })">No</button>
</Modal>

@code
{
    BomberosDbContext Context { get; set; }
    private DamnificadoViewModels damnificado = new();
    private FactorClimaticoViewModels modelFactorClimatico = new();
    private MovilSalidaViewModels movilSalidaViewModels = new();
    private BomberoSalidaViewModels bomberoSalidaView = new();
    private VehiculoDamnificadoViewModels vehiculo = new();
    public List<DamnificadoViewModels> DamnificadosSalida = new();
    public List<MovilSalidaViewModels> MovilesSalidasL = new();
    public List<BomberoSalidaViewModels> bomberosSalida = new();
    private Form<MovilSalidaViewModels> _form1;
    bool imprimirmodal;


    Bombero[] TodosBomberos;
    Movil[] Moviles;

    public List<BomberoViweModel> bomberoChoferes = new();
    public List<BomberoViweModel> bomberoTodos = new();
    bool switchValueS { get; set; }
    bool switchValueV { get; set; }
    bool chek { get; set; }
    bool chekM { get; set; }
    bool chekB { get; set; }

    int BomberoReceptor;
    string NumeroMovil;
    int chofer;
    int BomberoCuerpo;
    int BomberoEncargado;
    int QuienLLenoPlanilla;


    //direccion
    // public async Task CargarFactorClimatico()
    // {
    //     try
    //     {
    //         Bombero? bomberoReceptor = await Context.Bomberos.Where(b => b.NumeroLegajo == modelFactorClimatico.LegajoReceptor).SingleOrDefaultAsync();
    //         Bombero? bomberoEncargado = await Context.Bomberos.Where(b => b.NumeroLegajo == BomberoEncargado).SingleOrDefaultAsync();
    //         Bombero? BomberoLlenoPlanilla = await Context.Bomberos.Where(b => b.NumeroLegajo == QuienLLenoPlanilla).SingleOrDefaultAsync();

    //         FactorClimatico factorClimatico = new()
    //             {
    //                 NumeroParte = modelFactorClimatico.NumeroParte,
    //                 HoraSalida = modelFactorClimatico.HoraSalida,
    //                 HoraLlegada = modelFactorClimatico.HoraLLegada,
    //                 Descripcion = modelFactorClimatico.Descripcion,
    //                 CalleORuta = modelFactorClimatico.CalleORuta,
    //                 NumeroOKilometro = modelFactorClimatico.NumeroOKilometro,
    //                 EntreCalles = modelFactorClimatico.EntreCalles,
    //                 PisoNumero = modelFactorClimatico.PisoNumero,
    //                 Depto = modelFactorClimatico.Depto,
    //                 TipoZona = modelFactorClimatico.TipoZona,
    //                 NombreSolicitante = modelFactorClimatico.NombreSolicitante,
    //                 ApellidoSolicitante = modelFactorClimatico.ApellidoSolicitante,
    //                 DniSolicitante = modelFactorClimatico.DniSolicitante,
    //                 TelefonoSolicitante = modelFactorClimatico.TelefonoSolicitante,
    //                 NombreYApellidoReceptor = modelFactorClimatico.NombreYApellidoReceptor,
    //                 TelefonoReceptor = modelFactorClimatico.TelefonoReceptor,
    //                 TipoServicio = modelFactorClimatico.TipoServicio,
    //                 //carga Evacuacion y superficie dañada
    //                 Evacuacion = modelFactorClimatico.Evacuacion,
    //                 Superficie = modelFactorClimatico.Superficie,
    //                 DetalleSuperficieDañada = modelFactorClimatico.DetalleSuperficieDañada,
    //                 Tipo = modelFactorClimatico.Tipo,
    //                 QuienLleno = BomberoLlenoPlanilla,
    //                 ReceptorBombero = bomberoReceptor,
    //                 Encargado = bomberoEncargado,
    //                 Seguro = new()
    //                 {
    //                     CompañiaAseguradora = modelFactorClimatico.CompaniaAseguradora,
    //                     NumeroDePoliza = modelFactorClimatico.NumeroPoliza,
    //                     FechaDeVencimineto = modelFactorClimatico.FechaVencimineto,
    //                 },
    //                 Damnificados = new(),
    //                 Moviles = new(),
    //                 CuerpoParticipante = new()
    //             };
    //         foreach (BomberoSalidaViewModels bom in bomberosSalida)
    //         {
    //             Bombero? bomberoSalida = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == bom.NumeroLegajo);
    //             BomberoSalida BomSalida = new()
    //                 {
    //                     Salio = bom.Salio,
    //                     Grado = bom.Grado,
    //                     Bombero = bomberoSalida
    //                 };
    //             factorClimatico.CuerpoParticipante.Add(BomSalida);
    //         }
    //         foreach (MovilSalidaViewModels m in MovilesSalidasL)
    //         {
    //             Bombero? bomberoChofer = await Context.Bomberos.SingleOrDefaultAsync(b => b.NumeroLegajo == m.Chofer.NumeroLegajo);
    //             Movil? Movilsalida = await Context.Moviles.SingleOrDefaultAsync(mob => mob.NumeroMovil == m.MovilesSalida.NumeroMovil);
    //             if (Movilsalida is not null)
    //             {
    //                 Movilsalida.Kilometraje = m.KmLlegada;
    //             }
    //             MovilSalida movilS = new()
    //                 {
    //                     CargoCombustible = m.CargoCombustible,
    //                     NumeroFactura = movilSalidaViewModels.NumeroFactura,
    //                     FechaFactura = movilSalidaViewModels.FechaFactura,
    //                     TipoConbustible = movilSalidaViewModels.TipoConbustible,
    //                     CantidadLitros = movilSalidaViewModels.CantidadLitros,
    //                     QuienLleno = movilSalidaViewModels.QuienLleno,
    //                     TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
    //                     KmLlegada = m.KmLlegada,
    //                     Chofer = bomberoChofer,
    //                     Movil = Movilsalida
    //                 };
    //             factorClimatico.Moviles.Add(movilS);
    //         }
    //         foreach (DamnificadoViewModels d in DamnificadosSalida)
    //         {

    //             Damnificado damn = new()
    //                 {
    //                     Nombre = d.Nombre,
    //                     Apellido = d.Apellido,
    //                     Dni = d.Dni,
    //                     Sexo = d.Sexo,
    //                     LugarDeNacimiento = d.LugarDeNacimiento,
    //                     Edad = d.Edad,
    //                     Estado = d.Estado,
    //                 };
    //             factorClimatico.Damnificados.Add(damn);


    //         }
    //         Context.FactoresClimaticos.Add(factorClimatico);
    //         await Context.SaveChangesAsync();

    //         await Init();
    //         StateHasChanged();
    //         await message.Success("Salida agregada correctamente");
    //         imprimirmodal = true;
    //     }
    //     catch (Exception e)
    //     {
    //         await Init();
    //         StateHasChanged();
    //         if (e.InnerException != null)
    //             await message.Error(e.InnerException.Message, 5);
    //         else
    //             await message.Error(e.Message, 5);
    //         imprimirmodal = true;

    //     }
    // }
    public async Task AgregarDamnificado()
    {

        DamnificadoViewModels dp = new()
            {
                Nombre = damnificado.Nombre,
                Apellido = damnificado.Apellido,
                Dni = damnificado.Dni,
                Sexo = damnificado.Sexo,
                LugarDeNacimiento = damnificado.LugarDeNacimiento,
                Edad = damnificado.Edad,
                Estado = damnificado.Estado,

            };
        DamnificadosSalida.Add(dp);
        StateHasChanged();
    }
    public async Task AgregarMovilSalida()
    {

        Bombero? bomberoChofer = await Context.Bomberos.Where(b => b.NumeroLegajo == chofer).SingleOrDefaultAsync();
        Movil? Movilsalida = await Context.Moviles.Where(m => m.NumeroMovil == NumeroMovil).SingleOrDefaultAsync();
        MovilSalidaViewModels m = new()
            {
                CargoCombustible = chekM,
                NumeroFactura = movilSalidaViewModels.NumeroFactura,
                FechaFactura = movilSalidaViewModels.FechaFactura,
                TipoConbustible = movilSalidaViewModels.TipoConbustible,
                CantidadLitros = movilSalidaViewModels.CantidadLitros,
                QuienLleno = movilSalidaViewModels.QuienLleno,
                TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                KmLlegada = modelFactorClimatico.KmLlegada,
                Chofer = bomberoChofer,
                MovilesSalida = Movilsalida,

            };
        MovilesSalidasL.Add(m);
        StateHasChanged();

    }

    public async Task AgregarCuerpoParticipante()
    {
        var boberos = await Context.Bomberos.ToArrayAsync();
        foreach (var bom in boberos)
        {
            if (bom.NumeroLegajo == BomberoCuerpo)
            {
                BomberoSalidaViewModels b = new()
                    {
                        Salio = bomberoSalidaView.Salio,
                        Nombre = bom.Nombre,
                        Apellido = bom.Apellido,
                        NumeroLegajo = BomberoCuerpo
                    };
                bomberosSalida.Add(b);

            }
        }
        StateHasChanged();

    }
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        Moviles = await Context.Moviles.ToArrayAsync();
        await CargarBomberosView();
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(modelFactorClimatico)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelFactorClimatico)}");
    }
    private void OnChange(DateTimeChangedEventArgs args)
    {
        Console.WriteLine($"Selected Time: {args.Date}");
        Console.WriteLine($"Formatted Selected Time: {args.DateString}");
    }
    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }
    // array de las opciones posibles, buscar la opcion y agregarla en la planilla
    public async Task CargarBomberosView()
    {
        bomberoTodos = new();
        bomberoChoferes = new();
        var bomberos = await Context.Bomberos.OrderBy(b => b.Nombre).ToArrayAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    FechaNacimiento = b.FechaNacimiento,
                    Sexo = b.Sexo,
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    Documento = b.Documento,
                    NumeroLegajo = b.NumeroLegajo,
                    NumeroIoma = b.NumeroIoma,
                    LugarNacimiento = b.LugarNacimiento,
                    Grado = b.Grado,
                    //NombreImagen = b.NombreImagen,
                    //TipoImagen = b.TipoImagen,
                    //Base64Imagen = b.Base64,
                    Dotacion = b.Dotacion,
                    //Nombre = b.NombreBrigada,
                    Resolucion1 = b.Resolucion1,
                    Resolucion2 = b.Resolucion2,
                    Resolucion3 = b.Resolucion3,
                    Resolucion4 = b.Resolucion4,
                    Resolucion5 = b.Resolucion5,
                    Resolucion6 = b.Resolucion6,
                    //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                    Estado = b.Estado,
                    Chofer = b.Chofer,
                    VencimientoRegistro = b.VencimientoRegistro,
                    Direccion = b.Direccion,
                    Observaciones = b.Observaciones,
                    Profesion = b.Profesion,
                    NivelEstudios = b.NivelEstudios,
                    FechaAceptacion = b.FechaAceptacion,
                    //TelefonoCel = b.TelefonoCel,
                    //TelefonoFijo = b.TelefonoFijo,
                    //TelefonoLaboral = b.TelefonoLaboral,
                    //Email = b.Email,

                };
            bomberoTodos.Add(bombero);
        }
        foreach (Bombero c in bomberos)
        {
            if (c.Chofer == true)
            {
                BomberoViweModel bomberoChofer = new()
                    {
                        FechaNacimiento = c.FechaNacimiento,
                        Sexo = c.Sexo,
                        Nombre = c.Nombre,
                        Apellido = c.Apellido,
                        Documento = c.Documento,
                        NumeroLegajo = c.NumeroLegajo,
                        NumeroIoma = c.NumeroIoma,
                        LugarNacimiento = c.LugarNacimiento,
                        Grado = c.Grado,
                        //NombreImagen = b.NombreImagen,
                        //TipoImagen = b.TipoImagen,
                        //Base64Imagen = b.Base64,
                        Dotacion = c.Dotacion,
                        //Nombre = b.NombreBrigada,
                        Resolucion1 = c.Resolucion1,
                        Resolucion2 = c.Resolucion2,
                        Resolucion3 = c.Resolucion3,
                        Resolucion4 = c.Resolucion4,
                        Resolucion5 = c.Resolucion5,
                        Resolucion6 = c.Resolucion6,
                        //GrupoSanguineo = Enum.GetName(typeof(TipoGrupoSanguineo), b.GrupoSanguineo),
                        Estado = c.Estado,
                        Chofer = c.Chofer,
                        VencimientoRegistro = c.VencimientoRegistro,
                        Direccion = c.Direccion,
                        Observaciones = c.Observaciones,
                        Profesion = c.Profesion,
                        NivelEstudios = c.NivelEstudios,
                        FechaAceptacion = c.FechaAceptacion,
                        //TelefonoCel = b.TelefonoCel,
                        //TelefonoFijo = b.TelefonoFijo,
                        //TelefonoLaboral = b.TelefonoLaboral,
                        //Email = b.Email,

                    };
                bomberoChoferes.Add(bomberoChofer);
            }
        }
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;
    private void ShowModal()
    {
        _visible = true;
    }
    private void HandleCancel(MouseEventArgs e)
    {

        _visible = false;
    }
    private void HandleCancelIMP(MouseEventArgs e)
    {

        imprimirmodal = false;
    }
    private void OnFinishModel(EditContext editContext)
    {

        _visible = false;
    }
    private void HandleOk(MouseEventArgs e)
    {

        _visible = false;

    }
    private void HandleOkIMP(MouseEventArgs e)
    {

        imprimirmodal = false;

    }
    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }
    void deleteRowMovil(string NumMovil)
    {
        MovilesSalidasL = MovilesSalidasL.Where(m => m.NumeroMovil != NumMovil).ToList();
    }
    void deleteRowDamnificados(string Dni)
    {
        DamnificadosSalida = DamnificadosSalida.Where(m => m.Dni != Dni).ToList();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
    //Para moverse entre secciones
    public int current { get; set; } = 0;
    //Animacion de secciones
    private string animationClass = "";

    //Steps

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
    };
    //Botones de navegacion
    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    //Animaciones
    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }


    //switchs
    bool switchValue { get; set; }
    bool switchMoviles { get; set; }
    bool desactivarSwitch { get; set; }
}




