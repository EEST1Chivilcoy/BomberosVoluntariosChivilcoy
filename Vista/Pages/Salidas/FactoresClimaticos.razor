@implements IDisposable
@inject IMessageService message
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/salidas/factores-climaticos"
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using Vista.Data.ViewModels.FactorClimatico;
@using Vista.Data.ViewModels.Personal;

@*Servicio Utilizados*@
@using Vista.Services;
@inject IBomberoService BomberoService
@inject ISalidaService SalidaService;

@*Componentes Generales*@
@using Vista.Components.Forms.Salidas.General;

<style>
    /* Oculta los puntos de navegación del carrusel */
    .ant-carousel .slick-dots li {
        display: none !important;
    }

    /* Elimina el padding en los elementos del formulario */
    .ant-form-item-control-input-content, .ant-form-item-label {
        padding: 0 !important;
    }

    /* Establece un diseño de flex para el segundo elemento de la fila del formulario */
    .ant-form-item-row:nth-child(2) {
        display: flex !important;
    }

    /* Ajusta el ancho del input number */
    .ant-input-number {
        width: auto !important;
    }

    /* Estilo para el contenedor de pasos */
    .steps-content {
        margin-top: 10px !important;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    /* Estilo para la acción de pasos */
    .steps-action {
        margin-top: 10px;
        display: flex;
        justify-content: flex-end;
        gap: 5px;
    }



    /* Estilo para el contenedor de entrada */
    .inpt-cont {
        min-width: 100px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    /* Estilo para el contenedor de entrada en línea */
    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        gap: 1em;
        padding: .3em 0;
        overflow: hidden !important;
    }

    /* Estilo para la etiqueta de entrada */
    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    /* Alinea el texto en el centro de las celdas de la tabla */
    .ant-table-cell {
        text-align: center !important;
    }

    /* Estilos responsivos para pantallas pequeñas */
    @@media screen and (max-width: 450px) {
        .contenedor {
            padding: 0 21px !important;
        }

        .ant-picker-datetime-panel {
            flex-direction: column;
        }

        .ant-picker-panel-container {
            overflow: auto !important;
        }
    }

    /* Estilo para el botón */
    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border-radius: 5px 5px !important;
    }

    .ant-btn:hover, .ant-btn:focus, .ant-btn:active {
        text-decoration: none;
        background: #40a9ff !important;
    }

    .ant-btn:hover, .ant-btn:focus {
        color: white !important;
        border-color: #40a9ff !important;
        background: #40a9ff !important;
    }

    .ant-checkbox-input:checked + .ant-checkbox-inner {
        background-color: #4CAF50 !important;
        border-color: #4CAF50 !important;
    }

</style>

<Form Model="@modelFactorClimatico"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    <div class="contenedor" style="max-width: 100%;margin-top: 2em;">
        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Subtitle="@item.Content" />
            }
        </Steps>
        <div class="steps-content" style="max-height: 530px;max-width: 450px;padding: 10px;min-width: 320px!important;flex-wrap: wrap;">


            @if (current == 0)
            {
                @*General*@
                <DatosGenerales Model="@modelFactorClimatico"
                                animationClass="@animationClass" />
            }
            else if (current == 1)
            {
                @*Solicitante | Receptor | Damnificado*@
                <Participantes Model="@modelFactorClimatico"
                               animationClass="@animationClass" />
            }
            else if (current == 2)
            {
                @*Chofer y Moviles*@
                <Vehiculos Model="@modelFactorClimatico"
                           animationClass="@animationClass" />
            }
            else if (current == 3)
            {
                @*Bomberos*@
                <Personal Model="@modelFactorClimatico"
                          animationClass="@animationClass" />
            }
            else if (current == 4)
            {
                @*Tipo servicio*@
                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Tipo Servicio salida</label>
                    <EnumSelect TEnum="TipoServicioSalida" @bind-Value="@modelFactorClimatico.TipoServicio" />
                </div>

                @*Propio de la salida de Factor Climatico*@
                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Tipo Factores Climáticos</label>
                    <EnumSelect TEnum="TipoFactoresClimaticos" @bind-Value="@modelFactorClimatico.Tipo" />
                </div>
                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Tipo Superficie</label>
                    <EnumSelect TEnum="TipoSuperficie" @bind-Value="@modelFactorClimatico.Superficie" />
                </div>
                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Tipo Evacuación</label>
                    <EnumSelect TEnum="TipoEvacuacion" @bind-Value="@modelFactorClimatico.Evacuacion" />
                </div>
                <div class="inpt-cont">
                    <label class="inpt-cont--lbl">Detalles</label>
                    <Input @bind-Value="@modelFactorClimatico.DetalleSuperficieDañada">
                </div>
            }
        </div>
        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
            }
            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
            }
            @if (current == steps.Length - 1)
            {
                <FormItem WrapperColSpan="16">
                    <Button Class="boton_p" HtmlType="submit">
                        Imprimir salida
                    </Button>
                </FormItem>
            }
            @if (_visible1 == true)
            {
                <ImprimirModal NumeroParte="@ImprimirNumeroParte" />
            }
        </div>
    </div>
</Form>

@code
{
    BomberosDbContext Context { get; set; }
    private FactorClimaticoViewModels modelFactorClimatico = new();
    private Form<MovilSalidaViewModels> _form1;

    //Tareas de Incio
    protected override void OnInitialized()
    {
        Init();
    }

    private void Init()
    {
        Context = DbFactory.CreateDbContext();
        modelFactorClimatico = new();
    }

    //Variables de la Impresion
    private bool _visible1;
    private int ImprimirNumeroParte;

    //Metodos Nuevos Relacionados a la Impresion:
    void HandleOk1(int _numeroParte)
    {
        ImprimirNumeroParte = _numeroParte;
        _visible1 = true;
    }

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? BomberoEncargado = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(modelFactorClimatico.LegajoEncargado);
            Bombero? BomberoLlenoPlanilla = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(modelFactorClimatico.LegajoLLenoPlanilla);

            Vista.Data.Models.Salidas.Planillas.FactorClimatico? NumeroParte = await Context.FactoresClimaticos.Where(f => f.NumeroParte == modelFactorClimatico.NumeroParte).SingleOrDefaultAsync();

            if (NumeroParte != null)
            {
                await message.Warning("Numero parte ya existente.");
                return;
            }

            FactorClimatico factorClimatico = new()
                {
                    NumeroParte = modelFactorClimatico.NumeroParte,
                    AnioNumeroParte = modelFactorClimatico.AnioNumeroParte,
                    HoraSalida = modelFactorClimatico.HoraSalida,
                    HoraLlegada = modelFactorClimatico.HoraLLegada,
                    Descripcion = modelFactorClimatico.Descripcion,
                    CalleORuta = modelFactorClimatico.CalleORuta,
                    NumeroOKilometro = modelFactorClimatico.NumeroOKilometro,
                    EntreCalles = modelFactorClimatico.EntreCalles,
                    PisoNumero = modelFactorClimatico.PisoNumero,
                    Depto = modelFactorClimatico.Depto,
                    TipoZona = modelFactorClimatico.TipoZona,
                    NombreSolicitante = modelFactorClimatico.NombreSolicitante,
                    ApellidoSolicitante = modelFactorClimatico.ApellidoSolicitante,
                    DniSolicitante = modelFactorClimatico.DniSolicitante,
                    TelefonoSolicitante = modelFactorClimatico.TelefonoSolicitante,
                    NombreYApellidoReceptor = modelFactorClimatico.NombreYApellidoReceptor,
                    TipoServicio = modelFactorClimatico.TipoServicio,

                    //Carga Evacuacion y Superficie Dañada
                    Evacuacion = modelFactorClimatico.Evacuacion,
                    Superficie = modelFactorClimatico.Superficie,
                    DetalleSuperficieDañada = modelFactorClimatico.DetalleSuperficieDañada,
                    Tipo = modelFactorClimatico.Tipo,
                    QuienLleno = BomberoLlenoPlanilla,
                    Encargado = BomberoEncargado,

                    Seguro = new()
                    {
                        CompañiaAseguradora = modelFactorClimatico.CompaniaAseguradora,
                        NumeroDePoliza = modelFactorClimatico.NumeroPoliza,
                        FechaDeVencimineto = modelFactorClimatico.FechaVencimineto,
                    },

                    Damnificados = new(),
                    Moviles = new(),
                    CuerpoParticipante = new()
                };


            //Verifica si hay Bomberos en la Salida y los carga a el modelo de la salida.
            if (modelFactorClimatico.CuerpoParticipante != null && modelFactorClimatico.CuerpoParticipante.Any())
            {
                factorClimatico.CuerpoParticipante = modelFactorClimatico.CuerpoParticipante.ToList();
            }

            //Verifica si hay Moviles en la Salida y los carga a el modelo de la salida.
            if (modelFactorClimatico.Moviles != null && modelFactorClimatico.Moviles.Any())
            {
                factorClimatico.Moviles = modelFactorClimatico.Moviles.ToList();
            }

            //Verifica si hay Damnificados en la Salida y los carga a el modelo de la salida.
            if (modelFactorClimatico.Damnificados != null && modelFactorClimatico.Damnificados.Any())
            {
                factorClimatico.Damnificados = modelFactorClimatico.Damnificados.ToList();
            }

            await SalidaService.CargarSalida(factorClimatico);
            HandleOk1(factorClimatico.NumeroParte);
            Init();
            StateHasChanged();
        }

        catch (Exception e)
        {
            // Notificar al usuario
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);
        }

        Console.WriteLine($"Success:{JsonSerializer.Serialize(modelFactorClimatico)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelFactorClimatico)}");
    }

    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonSerializer.Serialize(checkedValues)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    bool _visible = false;

    private void ShowModal()
    {
        _visible = true;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
    }

    private void HandleOk(MouseEventArgs e)
    {
        _visible = false;
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

    //Para moverse entre secciones
    public int current { get; set; } = 0;
    //Animacion de secciones
    private string animationClass = "";

    //Steps

    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public StepItem[] steps =
    {
        new StepItem {Title = " ", Content = ""}, /* Datos generales */
        new StepItem {Title = " ", Content = ""}, /* Participantes */
        new StepItem {Title = " ", Content = ""}, /* Seguros */
        new StepItem {Title = " ", Content = ""}, /* Vehiculos */
        new StepItem {Title = " ", Content = ""}, /* Personal */
    };
    //Botones de navegacion
    void OnPreClick()
    {
        current--;
        ToggleAnimationI();
    }

    void OnNextClick()
    {
        current++;
        ToggleAnimationD();
    }

    //Animaciones
    private void ToggleAnimationD()
    {
        animationClass = "slick-contenedor-D";
    }

    private void ToggleAnimationI()
    {
        animationClass = "slick-contenedor-I";
    }
}




