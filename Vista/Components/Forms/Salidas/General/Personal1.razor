@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;

@*Servicio Utilizados*@
@using Vista.Services;
@inject IBomberoService BomberoService

<div class="slick-contenedor @animationClass">
    <h6>Cuerpo Participante</h6>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Elija el bombero</label>
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberosTodos"
                @bind-Value="@BomberoCuerpo"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Selecione un bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true" EnableSearch>
        </Select>
    </div>
    <div class="inpt-cont">
        <Button @onclick="AgregarCuerpoParticipante"
                type="primary"
                icon="plus"
                style="background-color: #4CAF50; border-color: #4CAF50;">
            Cargar al cuerpo participante
        </Button>
    </div>
    <div class="inpt-cont">
        <Table Context="bomberosSalida1" Size="TableSize.Small" PageSize="4" DataSource="bomberosSalida" @bind-SelectedRows="_selectedRows" Bordered>
            <ColumnDefinitions Context="row">
                <Selection />
                <PropertyColumn Property="c => c.NumeroLegajo" Title="Legajo" DefaultSortOrder="@SortDirection.Descending"
                                SorterCompare="@((a,b)=> a - b)"></PropertyColumn>
                <PropertyColumn Property="c => c.ApellidoYNombre" Title="Apellido y Nombre" Sortable="true" DefaultSortOrder="@SortDirection.Ascending"></PropertyColumn>
                <Column TData="BomberoSalida" Title="Salió" Sortable="true">
                    <Template>
                        <InputCheckbox TValue="bool" @bind-Value="row.Salio" />
                    </Template>
                </Column>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="¿Quieres eliminar este bombero?" OnConfirm="() => deleteRow(row.NumeroLegajo)" OkText="Si" CancelText="No">
                        <i class="fa-solid fa-trash" style="color: #e90c0c; cursor: pointer;"></i>
                    </Popconfirm>
                </ActionColumn>
            </ColumnDefinitions>
        </Table>
    </div>
    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Encargado</label>
            <Select TItem="BomberoViweModel"
                    TItemValue="BomberoViweModel"
                    DataSource="@bomberosTodos"
                    Value="@EncargadoSeleccionado"
                    ValueChanged="@EncargadoSeleccionadoChanged"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    Placeholder="Seleccione  a un  bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true" EnableSearch>
            </Select>
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Lleno la planilla</label>
            <Select TItem="BomberoViweModel"
                    TItemValue="BomberoViweModel"
                    DataSource="@bomberosTodos"
                    Value="@PlanillaSeleccionado"
                    ValueChanged="@PlanillaSeleccionadoChanged"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    Placeholder="Seleccione un bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true" EnableSearch>
            </Select>
        </div>
    </div>
</div>

@code {
    [Parameter] public SalidasViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }

    private IEnumerable<BomberoSalidaViewModels> _selectedRows = new List<BomberoSalidaViewModels>(); //Bomberos Seleccionados
    private List<BomberoViweModel> bomberosTodos = new(); //Lista con todos los bomberos
    private List<BomberoSalidaViewModels> bomberosSalida = new(); //Lista con los bomberos de la salida
    private int BomberoCuerpo; //ID del Bombero a añadir a la salida

    private BomberoViweModel? EncargadoSeleccionado { get; set; }
    private BomberoViweModel? PlanillaSeleccionado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        bomberosTodos = await BomberoService.GetAllBomberosAsync(); //Obtiene todos los Bomberos.

        if (Model.LegajoEncargado != default)
        {
            EncargadoSeleccionado = bomberosTodos.FirstOrDefault(b => b.NumeroLegajo == Model.LegajoEncargado);
        }

        if (Model.LegajoLLenoPlanilla != default)
        {
            PlanillaSeleccionado = bomberosTodos.FirstOrDefault(b => b.NumeroLegajo == Model.LegajoLLenoPlanilla);
        }

        if (Model.CuerpoParticipante != null)
        {
            foreach (var participante in Model.CuerpoParticipante)
            {
                BomberoViweModel? bombero = bomberosTodos
                    .FirstOrDefault(b => b.NumeroLegajo == participante.Bombero.NumeroLegajo);

                if (bombero != null)
                {
                    BomberoSalidaViewModels bomberoSalidaViewModel = new()
                        {
                            NumeroLegajo = bombero.NumeroLegajo,
                            Nombre = bombero.Nombre,
                            Apellido = bombero.Apellido,
                            Salio = participante.Salio
                        };

                    bomberosSalida.Add(bomberoSalidaViewModel);
                }
            }
        }
        else
        {
            Model.CuerpoParticipante = new List<BomberoSalida>();
        }
    }

    public void AgregarCuerpoParticipante()
    {
        BomberoViweModel? bomberoSeleccionado = bomberosTodos.FirstOrDefault(b => b.NumeroLegajo == BomberoCuerpo);

        if (bomberoSeleccionado != null)
        {
            BomberoSalidaViewModels nuevoBomberoSalida = new()
                {
                    Salio = false,
                    Nombre = bomberoSeleccionado.Nombre,
                    Apellido = bomberoSeleccionado.Apellido,
                    NumeroLegajo = BomberoCuerpo
                };

            bomberosSalida.Add(nuevoBomberoSalida);

            if (Model.CuerpoParticipante == null)
            {
                Model.CuerpoParticipante = new List<BomberoSalida>();
            }

            Bombero bombero = new Bombero
                {
                    Nombre = bomberoSeleccionado.Nombre,
                    Apellido = bomberoSeleccionado.Apellido,
                    NumeroLegajo = bomberoSeleccionado.NumeroLegajo,
                    // Agrega las demás propiedades necesarias
                };

            BomberoSalida bomSalida = new()
                {
                    Salio = nuevoBomberoSalida.Salio,
                    Bombero = bombero
                };
            Model.CuerpoParticipante.Add(bomSalida);
        }

        StateHasChanged();
    }

    private void UpdateModel()
    {
        Model.LegajoEncargado = EncargadoSeleccionado?.NumeroLegajo ?? 0;
        Model.LegajoLLenoPlanilla = PlanillaSeleccionado?.NumeroLegajo ?? 0;
    }

    void deleteRow(int numlegajo)
    {
        bomberosSalida = bomberosSalida.Where(d => d.NumeroLegajo != numlegajo).ToList();
    }

    private void EncargadoSeleccionadoChanged(BomberoViweModel value)
    {
        EncargadoSeleccionado = value;
        UpdateModel();
    }

    private void PlanillaSeleccionadoChanged(BomberoViweModel value)
    {
        PlanillaSeleccionado = value;
        UpdateModel();
    }
}