@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;

@*Servicio Utilizados*@
@using Vista.Services;
@inject IBomberoService BomberoService

<style>
    .centrado {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .button-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #4CAF50;
        border: 1px solid #4CAF50;
        padding-right: 0;
    }

        .button-wrapper .ant-btn {
            background-color: #4CAF50;
            border-color: #4CAF50;
            display: flex;
            align-items: center;
            justify-content: center;
            padding-right: 0;
            margin-right: 8px; /* Espacio entre el texto y el botón interno */
        }

            .button-wrapper .ant-btn:last-child {
                margin-right: 0; /* Elimina el margen derecho del último botón */
            }

        .button-wrapper .ant-btn-icon-only {
            margin-left: 8px; /* Espacio entre el texto y el botón interno */
        }

</style>

<div class="slick-contenedor @animationClass">
    <h6>Cuerpo Participante</h6>
    @if (BotonSolo)
    {
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Elija el bombero</label>
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberosSalirTodos"
                    @bind-Value="@BomberoCuerpo"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Selecione un bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true" EnableSearch>
            </Select>
        </div>
    }

    <div class="inpt-cont">
        <div class="centrado">
            @if (BotonSolo)
            {
                <div class="button-wrapper">
                    <Button @onclick="() => AgregarCuerpoParticipante()"
                            type="primary"
                            class="ant-btn"
                            style="background-color: #4CAF50; border-color: #4CAF50;">

                        Cargar al cuerpo
                    </Button>

                    <!-- Botón interno a la derecha del texto -->
                    <Button @onclick="CambiarBotonGrupo"
                            type="primary"
                            icon="user-add"
                            class="ant-btn ant-btn-icon-only"
                            style="background-color: #4CAF50; border-color: #4CAF50;">
                    </Button>
                </div>
            }
            else
            {
                <div class="button-wrapper">
                    <Button @onclick="AgregarTodosACuerpoParticipante"
                            type="primary"
                            class="ant-btn"
                            style="background-color: #4CAF50; border-color: #4CAF50;">
                        Cargar todos al cuerpo
                    </Button>

                    <!-- Botón interno a la derecha del texto -->
                    <Button @onclick="CambiarBotonSolo"
                            type="primary"
                            icon="usergroup-add"
                            class="ant-btn ant-btn-icon-only"
                            style="background-color: #4CAF50; border-color: #4CAF50;">
                    </Button>
                </div>
            }
        </div>
    </div>

    <div class="inpt-cont">
        <Table Context="bomberosSalida1" Size="TableSize.Small" PageSize="4" DataSource="bomberosSalida" @bind-SelectedRows="_selectedRows" Bordered>
            <ColumnDefinitions Context="row">
                <Selection />
                <PropertyColumn Property="c => c.NumeroLegajo" Title="Legajo" DefaultSortOrder="@SortDirection.Descending"
                                SorterCompare="@((a,b)=> a - b)"></PropertyColumn>
                <PropertyColumn Property="c => c.ApellidoYNombre" Title="Apellido y Nombre" Sortable="true" DefaultSortOrder="@SortDirection.Ascending"></PropertyColumn>
                <Column TData="BomberoSalida" Title="Salió" Sortable="true">
                    <Template>
                        <InputCheckbox TValue="bool" @bind-Value="row.Salio" />
                    </Template>
                </Column>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="¿Quieres eliminar este bombero?" OnConfirm="() => deleteRow(row.NumeroLegajo)" OkText="Si" CancelText="No">
                        <i class="fa-solid fa-trash" style="color: #e90c0c; cursor: pointer;"></i>
                    </Popconfirm>
                </ActionColumn>
            </ColumnDefinitions>
        </Table>
    </div>

    @if (MostrarBoton)
    {
        <div class="inpt-cont">
            <Button @onclick="EliminarSeleccionados"
                    type="danger"
                    icon="delete"
                    style="background-color: #e90c0c; border-color: #e90c0c;">
                Borrar Seleccionados
            </Button>
        </div>
    }

    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Encargado</label>
            <Select TItem="BomberoViweModel"
                    TItemValue="BomberoViweModel"
                    DataSource="@bomberosTodos"
                    Value="@EncargadoSeleccionado"
                    ValueChanged="@EncargadoSeleccionadoChanged"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    Placeholder="Seleccione  a un  bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true" EnableSearch>
            </Select>
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Lleno la planilla</label>
            <Select TItem="BomberoViweModel"
                    TItemValue="BomberoViweModel"
                    DataSource="@bomberosTodos"
                    Value="@PlanillaSeleccionado"
                    ValueChanged="@PlanillaSeleccionadoChanged"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    Placeholder="Seleccione un bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true" EnableSearch>
            </Select>
        </div>
    </div>
</div>

@code {
    [Parameter] public SalidasViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }

    private IEnumerable<BomberoSalidaViewModels> _selectedRows = new List<BomberoSalidaViewModels>(); //Bomberos Seleccionados
    private List<BomberoViweModel> bomberosTodos = new(); //Lista con todos los bomberos
    private List<BomberoViweModel> bomberosSalirTodos = new(); //Lista con todos los bomberos para salida
    private List<BomberoSalidaViewModels> bomberosSalida = new(); //Lista con los bomberos de la salida
    private int BomberoCuerpo; //ID del Bombero a añadir a la salida

    private BomberoViweModel? EncargadoSeleccionado { get; set; }
    private BomberoViweModel? PlanillaSeleccionado { get; set; }

    private bool BotonSolo { get; set; } = true;
    private bool MostrarBoton => _selectedRows.Any(); //Any() es un método de LINQ que verifica si una colección tiene al menos un elemento.

    protected override async Task OnInitializedAsync()
    {
        bomberosTodos = await BomberoService.GetAllBomberosAsync(); // Obtiene todos los Bomberos.
        bomberosSalirTodos = bomberosTodos.ToList(); // Copia el contenido de la Lista bomberosTodos a una nueva lista.

        if (Model.LegajoEncargado != default)
        {
            EncargadoSeleccionado = bomberosTodos.FirstOrDefault(b => b.NumeroLegajo == Model.LegajoEncargado);
        }

        if (Model.LegajoLLenoPlanilla != default)
        {
            PlanillaSeleccionado = bomberosTodos.FirstOrDefault(b => b.NumeroLegajo == Model.LegajoLLenoPlanilla);
        }

        if (Model.CuerpoParticipante != null)
        {
            var bomberosToRemove = new List<BomberoViweModel>();

            foreach (var participante in Model.CuerpoParticipante)
            {
                BomberoViweModel? bombero = bomberosTodos
                    .FirstOrDefault(b => b.NumeroLegajo == participante.Bombero.NumeroLegajo);

                if (bombero != null)
                {
                    BomberoSalidaViewModels bomberoSalidaViewModel = new()
                        {
                            NumeroLegajo = bombero.NumeroLegajo,
                            Nombre = bombero.Nombre,
                            Apellido = bombero.Apellido,
                            Salio = participante.Salio
                        };

                    bomberosToRemove.Add(bombero);
                    bomberosSalida.Add(bomberoSalidaViewModel);
                }
            }

            foreach (var bombero in bomberosToRemove)
            {
                bomberosSalirTodos.Remove(bombero);
            }
        }
        else
        {
            Model.CuerpoParticipante = new List<BomberoSalida>();
        }

    }

    private void CambiarBotonGrupo()
    {
        BotonSolo = false;
        StateHasChanged();
    }

    private void CambiarBotonSolo()
    {
        BotonSolo = true;
        StateHasChanged();
    }

    private async Task AgregarTodosACuerpoParticipante()
    {
        // Procesa todos los bomberos
        foreach (var bombero in bomberosSalirTodos.ToList())
        {
            await AgregarCuerpoParticipante(bombero.NumeroLegajo);
        }
    }

    private async Task AgregarCuerpoParticipante(int? numleg = null)
    {
        // Encuentra el bombero seleccionado basado en el número de legajo
        var bomberoSeleccionado = numleg.HasValue
            ? bomberosSalirTodos.FirstOrDefault(b => b.NumeroLegajo == numleg)
            : bomberosSalirTodos.FirstOrDefault(b => b.NumeroLegajo == BomberoCuerpo);

        if (bomberoSeleccionado != null)
        {
            // Elimina el bombero seleccionado de la lista
            bomberosSalirTodos.RemoveAll(b => b.NumeroLegajo == bomberoSeleccionado.NumeroLegajo);

            // Crea el nuevo objeto de salida del bombero
            var nuevoBomberoSalida = new BomberoSalidaViewModels
                {
                    Salio = false,
                    Nombre = bomberoSeleccionado.Nombre,
                    Apellido = bomberoSeleccionado.Apellido,
                    NumeroLegajo = bomberoSeleccionado.NumeroLegajo
                };

            // Añade el nuevo bombero a la lista de salidas
            bomberosSalida.Add(nuevoBomberoSalida);

            // Asegúrate de que la lista de CuerpoParticipante está inicializada
            if (Model.CuerpoParticipante == null)
            {
                Model.CuerpoParticipante = new List<BomberoSalida>();
            }

            // Crea el nuevo objeto Bombero y BomberoSalida
            var bombero = new Bombero
                {
                    Nombre = bomberoSeleccionado.Nombre,
                    Apellido = bomberoSeleccionado.Apellido,
                    NumeroLegajo = bomberoSeleccionado.NumeroLegajo,
                    // Agrega las demás propiedades necesarias
                };

            var bomSalida = new BomberoSalida
                {
                    Salio = nuevoBomberoSalida.Salio,
                    Bombero = bombero
                };

            // Añade el bombero a la lista de CuerpoParticipante
            Model.CuerpoParticipante.Add(bomSalida);

            // Actualiza el estado del componente si es necesario
            StateHasChanged();
        }
    }


    private void UpdateModel()
    {
        Model.LegajoEncargado = EncargadoSeleccionado?.NumeroLegajo ?? 0;
        Model.LegajoLLenoPlanilla = PlanillaSeleccionado?.NumeroLegajo ?? 0;
    }

    private async Task EliminarSeleccionados()
    {
        foreach (var Bom in _selectedRows)
        {
            await deleteRow(Bom.NumeroLegajo);
        }

        // Reasignar _selectedRows a una nueva lista vacía
        _selectedRows = Enumerable.Empty<BomberoSalidaViewModels>(); // Suponiendo que IEnumerable<BomberoSalidaViewModels>
    }

    private async Task deleteRow(int numlegajo)
    {
        // Encuentra el bombero con el número de legajo especificado en la lista del componente
        var bomberoToRemove = bomberosSalida.FirstOrDefault(b => b.NumeroLegajo == numlegajo);
        if (bomberoToRemove != null)
        {
            // Encuentra el bombero con el número de legajo especificado en la lista del Model
            var bomberoToRemoveModel = Model.CuerpoParticipante.FirstOrDefault(b => b.Bombero.NumeroLegajo == numlegajo);
            if (bomberoToRemoveModel != null)
            {
                Model.CuerpoParticipante.Remove(bomberoToRemoveModel);
            }
            bomberosSalida.Remove(bomberoToRemove);
            bomberosSalirTodos.Add(await BomberoService.ObtenerBomberoPorLegajoAsync(bomberoToRemove.NumeroLegajo));
        }
    }


    private void EncargadoSeleccionadoChanged(BomberoViweModel value)
    {
        EncargadoSeleccionado = value;
        UpdateModel();
    }

    private void PlanillaSeleccionadoChanged(BomberoViweModel value)
    {
        PlanillaSeleccionado = value;
        UpdateModel();
    }
}