@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.Models.Salidas;
@using Vista.Data.Models.Personas;
@using System.Linq;

@inject IMessageService MessageService

<style>

    .damnificados {
    border: 2px solid #ffb366 !important;
    background: linear-gradient(180deg, #fffdf9 0%, #fff7f0 100%);
    box-shadow: 0 4px 12px rgba(255, 163, 77, 0.15);
    border-radius: 16px;
    margin-bottom: 2rem;
    padding: 2.5rem 2rem 2rem 2rem;
    transition: box-shadow 0.25s ease, transform 0.2s ease;
    }



    .damnificados-componente .ant-table {
    background: #fff8f0 !important;
    color: #ff6a33 !important;
    font-weight: 500 !important;
    font-size: 1.05rem !important;
    border-radius: 14px !important;
    }

    .damnificados-componente .ant-table-thead .ant-table-cell,
    .damnificados-componente .ant-table thead th {
    background: linear-gradient(135deg, #ff944d, #ff7a45) !important;
    color: #fff !important;
    font-weight: 600 !important;
    text-align: center !important;
    border-bottom: 2px solid #ffe0cc !important;
    letter-spacing: 0.3px !important;
    padding: 8px 10px !important;
    font-size: 1.08rem !important;
    height: 32px !important;
    }

    .damnificados-componente .ant-table-title {
    background: #fff8f0 !important;
    color: #ff6a33 !important;
    font-weight: 700 !important;
    font-size: 1.05rem !important;
    text-align: left !important;
    padding: 0.5rem 0.8rem !important;
    border-top-left-radius: 12px !important;
    border-top-right-radius: 12px !important;
    border-bottom: 1px solid #ffd6b3 !important;
    }

    .damnificados-componente .ant-table-cell,
    .damnificados-componente .ant-table td {
    background: #fff !important;
    color: #333 !important;
    padding: 6px 10px !important;
    font-size: 1rem !important;
    height: 28px !important;
    }

    .damnificados-componente .ant-btn {
    font-size: 0.95rem !important;
    padding: 4px 10px !important;
    }

    /* Modal estilo Licencias adaptado para Damnificados */
    .modal-damnificado .ant-modal-content {
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(255, 163, 77, 0.15);
    border: 4px solid #ffb366;
    margin-top: -50px;
    margin-bottom: 0px;
    background: linear-gradient(180deg, #fffdf9 0%, #fff7f0 100%);
    }

    .modal-damnificado .ant-modal-header {
    background-color: #fff8f0;
    border-bottom: 1px solid #ffd6b3;
    padding: 16px 24px;
    border-radius: 9px 9px 0 0;
    }

    .modal-damnificado-content {
    padding: 24px;
    }

    .modal-damnificado-form-item {
    margin-bottom: 20px;
    position: relative;
    padding-left: 10px;
    }

    .modal-damnificado-form-item .ant-form-item-label > label,
    .modal-damnificado-form-full-width .ant-form-item-label > label {
    font-weight: 600;
    color: #ff6a33;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    transition: color 0.3s ease;
    }

    .modal-damnificado-form-item .ant-form-item-label > label:hover,
    .modal-damnificado-form-full-width .ant-form-item-label > label:hover {
    color: #ff944d;
    }

    .modal-damnificado .ant-input:focus,
    .modal-damnificado .ant-input:hover,
    .modal-damnificado .ant-select-selector:focus,
    .modal-damnificado .ant-select-selector:hover,
    .modal-damnificado .ant-picker:focus,
    .modal-damnificado .ant-picker:hover,
    .modal-damnificado .ant-picker-input > input:focus,
    .modal-damnificado .ant-picker-input > input:hover,
    .modal-damnificado .ant-input-number-input:focus,
    .modal-damnificado .ant-input-number-input:hover,
    .modal-damnificado .ant-textarea:focus,
    .modal-damnificado .ant-textarea:hover {
    border-color: #ffb366 !important;
    box-shadow: 0 0 0 2px rgba(255, 163, 77, 0.15) !important;
    }

    .modal-damnificado .ant-picker,
    .modal-damnificado .ant-input,
    .modal-damnificado .ant-select-selector,
    .modal-damnificado .ant-input-number,
    .modal-damnificado .ant-textarea {
    border-radius: 8px !important;
    border: 1px solid #ffd6b3 !important;
    background: #fff !important;
    color: #434343 !important;
    transition: all 0.3s ease !important;
    }

    .modal-damnificado .modal-damnificado-footer {
    display: flex;
    justify-content: flex-end;
    gap: 12px;
    margin-top: 18px;
    margin-bottom: 0px;
    }

    .modal-damnificado .ant-btn-primary {
    background: linear-gradient(135deg, #ff944d 0%, #ff6a33 100%) !important;
    border: none !important;
    color: #fff !important;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(255, 163, 77, 0.18);
    margin-top: 0;
    margin-bottom: 0;
    padding: 0 20px !important;
    }

    .modal-damnificado .ant-btn-primary:hover {
    background: linear-gradient(135deg, #ff7a45 0%, #ff944d 100%) !important;
    color: #fff !important;
    }

    .btn-nuevo-damnificado {
    background: linear-gradient(135deg, #ff944d 0%, #ff6a33 100%) !important;
    color: #fff !important;
    font-weight: 600;
    border: none !important;
    box-shadow: 0 2px 8px rgba(255, 163, 77, 0.18);
    border-radius: 8px;
    padding: 0 20px !important;
    transition: background 0.3s;
    }

    .btn-nuevo-damnificado:hover {
    background: linear-gradient(135deg, #ff7a45 0%, #ff944d 100%) !important;
    color: #fff !important;
    }
</style>


<div class="damnificados damnificados-componente">
    <Tabs DefaultActiveKey="personas">
        <TabPane Key="personas" Tab="Personas">
            <Table Context="Damnificados"
            DataSource="Model.Damnificados"
            Size="TableSize.Small"
            Class="damnificados-componente"
            Bordered>
                <TitleTemplate>
                    <GridRow>
                        <GridCol Span="24" Style="text-align: right;">
                            <Button Type="ButtonType.Primary"
                            Class="btn-nuevo-damnificado"
                            OnClick="@(() => visibleDamnificados = true)">
                                <Icon Type="plus" /> Nuevo Damnificado
                            </Button>
                        </GridCol>
                    </GridRow>
                </TitleTemplate>
                <ColumnDefinitions>
                    <PropertyColumn Property="d => d.Nombre"></PropertyColumn>
                    <PropertyColumn Property="d => d.Apellido"></PropertyColumn>
                    <PropertyColumn Property="d => d.Edad"></PropertyColumn>
                    <PropertyColumn Property="d => d.Estado"></PropertyColumn>
                    <PropertyColumn Title="Fuerza Interviniente" Property="d => ObtenerNombreFuerza(d.FuerzaIntervinienteID)" />
                    <PropertyColumn Title="Hacia dónde fue trasladado" Property="d => d.Destino" />
                    <ActionColumn Title="Acciones">
                        <Popconfirm Title="¿Quieres borrar este damnificado?"
                        OnConfirm="@(() => deleteRowDamnificados(Damnificados.Documento))"
                        OkText="Si"
                        CancelText="No">
                            <Button Danger>
                                <Icon Type="delete" />
                            </Button>
                        </Popconfirm>
                        <Button Type="@ButtonType.Primary" OnClick="@(() => EditarDamnificado(Damnificados))">
                            <Icon Type="edit" />
                        </Button>
                    </ActionColumn>
                </ColumnDefinitions>
            </Table>

            <Modal @bind-Visible="visibleDamnificados"
            Title="@(editandoDamnificado ? "Editar Damnificado" : "Datos del damnificado")"
            OkText="@(editandoDamnificado ? "Editar" : "Agregar")"
            CancelText="@("Cancelar")"
            OnOk="@AgregarDamnificado"
            OnCancel="@(() => {editandoDamnificado = false; documentoOriginal = null; Damnificado = new();})"
            WrapClassName="modal-damnificado">
                <div class="modal-damnificado-content">
                    <Form Model="Damnificado" Layout="FormLayout.Vertical" Class="modal-damnificado-form">
                        <Row Gutter="16">
                            <AntDesign.Col Span="8">
                                <FormItem Label="Nombre" Required="true" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Damnificado.Nombre" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Apellido" Required="true" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Damnificado.Apellido" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Documento" Required="true" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Damnificado.Dni" Disabled=editandoDamnificado/>
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                        <Row Gutter="16">
                            <AntDesign.Col Span="8">
                                <FormItem Label="Sexo" Class="modal-damnificado-form-item">
                                    <EnumSelect TEnum="TipoSexo?" @bind-Value="@Damnificado.Sexo" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Edad" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Damnificado.Edad" Disabled="@Damnificado.FechaDeNacimiento.HasValue" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="14">
                                <FormItem Label="Lugar de Nacimiento" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Damnificado.LugarDeNacimiento" />
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                        <Row Gutter="16">
                            @if (!editandoDamnificado)
                            {
                                <AntDesign.Col Span="12">
                                    <FormItem Label="Fecha de Nacimiento" Class="modal-damnificado-form-item">
                                        <DatePicker TValue="DateTime?" @bind-Value="@Damnificado.FechaDeNacimiento" OnChange="@CalcularEdad" />
                                    </FormItem>
                                </AntDesign.Col>
                            }
                            <AntDesign.Col Span="12">
                                <FormItem Label="Estado" Class="modal-damnificado-form-item">
                                    <EnumSelect TEnum="TipoDamnificado" @bind-Value="@Damnificado.Estado" />
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                        <Row Gutter="16">
                            <AntDesign.Col Span="12">
                                <FormItem Label="Fuerza que lo trasladó" Class="modal-damnificado-form-item">
                                    <Select TItem="FuerzaIntervinienteViewModel"
                                    TItemValue="int?"
                                    DataSource="@Model.FuerzasIntervinientes"
                                    @bind-Value="@Damnificado.FuerzaIntervinienteID"
                                    ValueName="@nameof(FuerzaIntervinienteViewModel.Id)"
                                    Placeholder="Seleccione la fuerza que lo trasladó"
                                    AllowClear="true"
                                    EnableSearch="true">
                                        <LabelTemplate Context="fuerza">
                                            @($"{fuerza.FuerzaViewModel.Nombre} - Unidad {fuerza.NumeroUnidad}")
                                        </LabelTemplate>
                                        <ItemTemplate Context="fuerza">
                                            @($"{fuerza.FuerzaViewModel.Nombre} - Unidad {fuerza.NumeroUnidad}")
                                        </ItemTemplate>
                                    </Select>
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col>
                                <FormItem Label="Hacia donde?" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Damnificado.Destino" />
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                    </Form>
                </div>
            </Modal>
        </TabPane>
        <TabPane Key="vehiculos" Tab="Vehículos">
            <Table Context="Vehiculos"
            DataSource="Model.VehiculosAfectados"
            Size="TableSize.Small"
            Class="damnificados-componente"
            Bordered>
                <TitleTemplate>
                    <GridRow>
                        <GridCol Span="24" Style="text-align: right;">
                            <Button Type="ButtonType.Primary"
                            Class="btn-nuevo-damnificado"
                            OnClick="@(() => visibleVehiculo = true)">
                                <Icon Type="plus" /> Nuevo Vehiculo
                            </Button>
                        </GridCol>
                    </GridRow>
                </TitleTemplate>
                <ColumnDefinitions>
                    <PropertyColumn Property="v => v.Tipo"></PropertyColumn>
                    <PropertyColumn Property="v => v.Marca"></PropertyColumn>
                    <PropertyColumn Property="v => v.Modelo"></PropertyColumn>
                    <PropertyColumn Property="v => v.Año"></PropertyColumn>
                    <PropertyColumn Property="v => v.Patente"></PropertyColumn>
                    <PropertyColumn Property="v => v.Color"></PropertyColumn>
                    <PropertyColumn Property="v => v.Observaciones"></PropertyColumn>
                    <PropertyColumn Title="Se activó el Airbag?" Property="v => v.Airbag">
                        <Template>
                            @(Vehiculos.Airbag ? "Si" : "No")
                        </Template>
                    </PropertyColumn>
                    <PropertyColumn Property="v => v.Seguro.CompañiaAseguradora"></PropertyColumn>
                    <PropertyColumn Property="v => v.Seguro.NumeroDePoliza"></PropertyColumn>
                    <PropertyColumn Property="v => v.Seguro.FechaDeVencimineto"></PropertyColumn>
                    <PropertyColumn Title="Conductor" TItem="VehiculoAfectado" TProp="string?">
                        <Template>
                            @(Vehiculos.ConductorDamnificado != null
                                ? ObtenerNombreCompleto(Vehiculos.ConductorDamnificado.Nombre, Vehiculos.ConductorDamnificado.Apellido)
                                : "Sin conductor")
                        </Template>
                    </PropertyColumn>

                    @*Falta listar los pasajeros*@


                    <ActionColumn Title="Acciones">
                        <Popconfirm Title="¿Quieres borrar este damnificado?"
                        OnConfirm="@(() => deleteRowVehiculos(Vehiculos.Patente))"
                        OkText="Si"
                        CancelText="No">
                            <Button Danger>
                                <Icon Type="delete" />
                            </Button>
                        </Popconfirm>
                        <Button Type="@ButtonType.Primary" OnClick="@(() => EditarVehiculo(Vehiculos))">
                            <Icon Type="edit" />
                        </Button>
                    </ActionColumn>
                </ColumnDefinitions>
            </Table>

            <Modal @bind-Visible="visibleVehiculo"
            Title="@(editandoVehiculo ? "Editar Vehiculo" : "Datos del vehiculo")"
            OkText="@(editandoVehiculo ? "Editar" : "Agregar")"
            CancelText="@("Cancelar")"
            OnOk="@AgregarVehiculo"
            OnCancel="@(() => {editandoVehiculo = false; patenteOriginal = null; Vehiculo = new();})"
            WrapClassName="modal-damnificado">
                <div class="modal-damnificado-content">
                    <Form Model="Vehiculo" Layout="FormLayout.Vertical" Class="modal-damnificado-form">
                        <Row Gutter="16">
                            <AntDesign.Col Span="8">
                                <FormItem Label="Marca" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Marca" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Modelo" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Modelo" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Año" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Año" />
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                        <Row Gutter="16">
                            <AntDesign.Col Span="8">
                                <FormItem Label="Patente" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Patente" Disabled="@editandoVehiculo"/>
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Tipo" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Tipo" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Color" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Color" />
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                        <Row Gutter="16">
                            <AntDesign.Col Span="14">
                                <FormItem Label="Observaciones" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Observaciones" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="8">
                                <FormItem Label="Se Activó el Airbag?" Class="modal-damnificado-form-item">
                                    <Switch @bind-Checked="@Vehiculo.Airbag" />
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                        <Row Gutter="16">
                            <AntDesign.Col Span="12">
                                <FormItem Label="Dueño" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.Dueño" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="12">
                                <FormItem Label="Compañia Aseguradora" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.CompañiaAseguradora" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="12">
                                <FormItem Label="Numero de Poliza" Class="modal-damnificado-form-item">
                                    <Input @bind-Value="@Vehiculo.NumeroDePoliza" />
                                </FormItem>
                            </AntDesign.Col>
                            <AntDesign.Col Span="12">
                                <FormItem Label="Fecha de Vencimiento" Class="modal-damnificado-form-item">
                                    <DatePicker TValue="DateTime?" @bind-Value="@Vehiculo.FechaDeVencimiento" />
                                </FormItem>
                            </AntDesign.Col>
                        </Row>
                        @if (Model.Damnificados.Any())
                        {
                            <Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <FormItem Label="Se Conoce el Conductor?" Class="modal-damnificado-form-item">
                                        <Switch @bind-Checked="@Vehiculo.seConoceConductor" />
                                    </FormItem>
                                </AntDesign.Col>
                                @if (Vehiculo.seConoceConductor)
                                {
                                    <AntDesign.Col Span="14">
                                        <FormItem Label="Conductor" Class="modal-damnificado-form-item">
                                            <Select TItem="Damnificado_Salida"
                                            TItemValue="Damnificado_Salida"
                                            DataSource="@Model.Damnificados"
                                            @bind-Value="@Vehiculo.Conductor"
                                            Placeholder="Seleccione el Conductor"
                                            AllowClear="true"
                                            EnableSearch="true">
                                                <LabelTemplate Context="conductor">
                                                    @($"{conductor.Apellido}, {conductor.Nombre}")
                                                </LabelTemplate>
                                                <ItemTemplate Context="conductor">
                                                    @($"{conductor.Apellido}, {conductor.Nombre}")
                                                </ItemTemplate>
                                            </Select>
                                        </FormItem>
                                    </AntDesign.Col>
                                }
                                <AntDesign.Col Span="16">
                                    <FormItem Label="Pasajeros" Class="modal-damnificado-form-item">
                                        <Select Mode="SelectMode.Multiple"
                                        TItem="Damnificado_Salida"
                                        TItemValue="Damnificado_Salida"
                                        @bind-Values="@Vehiculo.Pasajeros"
                                        DataSource="@Model.Damnificados"
                                        Placeholder="Seleccione los Pasajeros"
                                        AllowClear="true"
                                        EnableSearch="true">
                                            <LabelTemplate Context="pasajero">
                                                @($"{pasajero.Apellido}, {pasajero.Nombre}")
                                            </LabelTemplate>
                                            <ItemTemplate Context="pasajero">
                                                @($"{pasajero.Apellido}, {pasajero.Nombre}")
                                            </ItemTemplate>
                                        </Select>
                                    </FormItem>
                                </AntDesign.Col>
                            </Row>
                        }
                    </Form>
                </div>
            </Modal>
        </TabPane>
    </Tabs>
</div>

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;

    private DamnificadoViewModels Damnificado = new DamnificadoViewModels();
    private VehiculoDamnificadoViewModels Vehiculo = new VehiculoDamnificadoViewModels();
    private bool visibleDamnificados = false;
    private bool visibleVehiculo = false;

    private bool editandoDamnificado = false, editandoVehiculo = false;
    private int? documentoOriginal = null; private string? patenteOriginal = null;
    private async Task deleteRowDamnificados(int? DNI)
    {
        if (Model.Damnificados == null || !Model.Damnificados.Any())
        {
            await MessageService.ErrorAsync("No hay damnificados registrados.");
            return;
        }

        if (!Model.Damnificados.Any(m => m.Documento == DNI))
        {
            await MessageService.ErrorAsync($"No se encontró un damnificado con el DNI {DNI}.");
            return;
        }

        Model.Damnificados = Model.Damnificados.Where(m => m.Documento != DNI).ToList();
        await MessageService.SuccessAsync($"Damnificado con DNI {DNI} eliminado correctamente.");
    }
    private async Task deleteRowVehiculos(string? Patente)
    {
        if (Model.VehiculosAfectados == null || !Model.VehiculosAfectados.Any())
        {
            await MessageService.ErrorAsync("No hay vehiculos registrados.");
            return;
        }

        if (!Model.VehiculosAfectados.Any(v => v.Patente == Patente))
        {
            await MessageService.ErrorAsync($"No se encontró un vehiculo con la patente {Patente}.");
            return;
        }

        Model.VehiculosAfectados = Model.VehiculosAfectados.Where(v => v.Patente != Patente).ToList();
        await MessageService.SuccessAsync($"Vehiculo con patente {Patente} eliminado correctamente.");
    }

    private void EditarDamnificado(Damnificado_Salida dam)
    {
        Damnificado = new()
            {
                Nombre = dam.Nombre,
                Apellido = dam.Apellido,
                Dni = dam.Documento,
                Sexo = dam.Sexo,
                LugarDeNacimiento = dam.LugarNacimiento,
                Edad = dam.Edad,
                Estado = dam.Estado,
                FuerzaIntervinienteID = dam.FuerzaIntervinienteID,
                Destino = dam.Destino
            };
        documentoOriginal = dam.Documento;
        editandoDamnificado = true;
        visibleDamnificados = true;
    }
    private async Task AgregarDamnificado()
    {
        try
        {
            if (editandoDamnificado)
            {
                var actual = Model.Damnificados.First(d => d.Documento == documentoOriginal);
                actual.Nombre = Damnificado.Nombre;
                actual.Apellido = Damnificado.Apellido;
                actual.Sexo = Damnificado.Sexo;
                actual.LugarNacimiento = Damnificado.LugarDeNacimiento;
                actual.Edad = Damnificado.Edad;
                actual.Estado = Damnificado.Estado;
                actual.FuerzaIntervinienteID = Damnificado.FuerzaIntervinienteID;
                actual.Destino = Damnificado.Destino;
                await MessageService.SuccessAsync("Damnificado actualizado correctamente");
                editandoDamnificado = false; documentoOriginal = null;
            }
            else 
            {
                Damnificado_Salida dp = new()
                    {
                        Nombre = Damnificado.Nombre,
                        Apellido = Damnificado.Apellido,
                        Documento = Damnificado.Dni,
                        Sexo = Damnificado.Sexo,
                        LugarNacimiento = Damnificado.LugarDeNacimiento,
                        Edad = Damnificado.Edad,
                        Estado = Damnificado.Estado,
                        FuerzaIntervinienteID = Damnificado.FuerzaIntervinienteID,
                        Destino = Damnificado.Destino
                    };

                if (Model.Damnificados == null)
                {
                    Model.Damnificados = new List<Damnificado_Salida>();
                }

                if (Model.Damnificados.Any(d => d.Documento == dp.Documento))
                {
                    await MessageService.ErrorAsync("Ya existe un damnificado con ese documento", 5);
                    return;
                }

                Model.Damnificados.Add(dp);

                await MessageService.SuccessAsync("Damnificado agregado correctamente");
            }
            Damnificado = new DamnificadoViewModels();
            visibleDamnificados = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            StateHasChanged();

            if (e.InnerException != null)
                await MessageService.ErrorAsync(e.InnerException.Message, 5);
            else
                await MessageService.ErrorAsync(e.Message, 5);
        }
    }

    private void EditarVehiculo(VehiculoAfectado veh)
    {
        Vehiculo = new()
            {
                Marca = veh.Marca,
                Modelo = veh.Modelo,
                Año = veh.Año,
                Patente = veh.Patente,
                Tipo = veh.Tipo,
                Color = veh.Color,
                Airbag = veh.Airbag,
                Observaciones = veh.Observaciones,
                seConoceConductor = veh.seConoceConductor,
                Dueño = veh.Dueño,
                CompañiaAseguradora = veh.Seguro?.CompañiaAseguradora,
                NumeroDePoliza = veh.Seguro?.NumeroDePoliza,
                FechaDeVencimiento = veh.Seguro?.FechaDeVencimineto,
                Conductor = veh.ConductorDamnificado,
                Pasajeros = veh.PasajerosDamnificados
            };
        patenteOriginal = veh.Patente;
        editandoVehiculo = true;
        visibleVehiculo = true;
    }
    private async Task AgregarVehiculo()
    {
        try
        {
            if (editandoVehiculo)
            {
                var actual = Model.VehiculosAfectados.First(p => p.Patente == patenteOriginal);
                actual.Tipo = Vehiculo.Tipo;
                actual.Marca = Vehiculo.Marca;
                actual.Modelo = Vehiculo.Modelo;
                actual.Año = Vehiculo.Año;
                actual.Color = Vehiculo.Color;
                actual.Dueño = Vehiculo.Dueño;
                actual.Observaciones = Vehiculo.Observaciones;
                actual.Airbag = Vehiculo.Airbag;
                actual.seConoceConductor = Vehiculo.seConoceConductor;
                actual.ConductorDamnificado = Vehiculo.Conductor;
                actual.PasajerosDamnificados = Vehiculo.Pasajeros.ToList();
                if (actual.Seguro != null)
                {
                    actual.Seguro.CompañiaAseguradora = Vehiculo.CompañiaAseguradora;
                    actual.Seguro.NumeroDePoliza = Vehiculo.NumeroDePoliza;
                    actual.Seguro.FechaDeVencimineto = Vehiculo.FechaDeVencimiento;
                }
                await MessageService.SuccessAsync("Vehiculo actualizado correctamente");
                editandoVehiculo = false; patenteOriginal = null;
            }
            else 
            {
                SeguroVehiculo seguro = new()
                    {
                        CompañiaAseguradora = Vehiculo.CompañiaAseguradora,
                        NumeroDePoliza = Vehiculo.NumeroDePoliza,
                        FechaDeVencimineto = Vehiculo.FechaDeVencimiento
                    };
                VehiculoAfectado va = new()
                    {
                        Tipo = Vehiculo.Tipo,
                        Marca = Vehiculo.Marca,
                        Modelo = Vehiculo.Modelo,
                        Patente = Vehiculo.Patente,
                        Año = Vehiculo.Año,
                        Color = Vehiculo.Color,
                        Dueño = Vehiculo.Dueño,
                        Observaciones = Vehiculo.Observaciones,
                        Airbag = Vehiculo.Airbag,
                        Seguro = seguro,
                        seConoceConductor = Vehiculo.seConoceConductor,
                        ConductorDamnificado = Vehiculo.Conductor,
                        PasajerosDamnificados = Vehiculo.Pasajeros.ToList()
                    };
                if (Model.VehiculosAfectados == null)
                    Model.VehiculosAfectados = new List<VehiculoAfectado>();
                if (Model.VehiculosAfectados.Any(v => v.Patente == va.Patente))
                {
                    await MessageService.ErrorAsync("Ya existe un vehiculo con esa Patente");
                    return;
                }
                if (Model.VehiculosAfectados.Any(v => v.Seguro.NumeroDePoliza == va.Seguro.NumeroDePoliza))
                {
                    await MessageService.ErrorAsync("Ya existe un seguro con ese Numero de Poliza");
                    return;
                }
                Model.VehiculosAfectados.Add(va);
                await MessageService.SuccessAsync("Vehiculo cargado correctamente"); 
            }
            Vehiculo = new VehiculoDamnificadoViewModels();
            visibleVehiculo = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            StateHasChanged();
            if (e.InnerException != null)
                await MessageService.ErrorAsync(e.InnerException.Message, 5);
            else
                await MessageService.ErrorAsync(e.Message, 5);
        }
    }
    private Task CalcularEdad()
    {
        Damnificado.Edad = Damnificado.FechaDeNacimiento.HasValue
            ? (int)((DateTime.Now - Damnificado.FechaDeNacimiento.Value).TotalDays / 365.25)
            : 0;

        return Task.CompletedTask;
    }
    private string ObtenerNombreCompleto(string? Nombre, string? Apellido)
    {
        if (string.IsNullOrEmpty(Nombre)) { Nombre = "Desconocido";}
        if (string.IsNullOrEmpty(Apellido)) {Apellido = "Desconocido";}
        return Apellido + ", " + Nombre;
    }
    private string ObtenerNombreFuerza(int? fuerzaId)
    {
        if (!fuerzaId.HasValue || Model.FuerzasIntervinientes == null)
            return "No especificada";

        var fuerza = Model.FuerzasIntervinientes.FirstOrDefault(f => f.Id == fuerzaId.Value);
        if (fuerza == null)
            return "Fuerza no encontrada";

        return $"{fuerza.FuerzaViewModel.Nombre} - Unidad {fuerza.NumeroUnidad}";
    }
}