@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.Models.Salidas;
@using Vista.Data.Models.Personas;
@using System.Linq;

@inject IMessageService MessageService

<style>
    .damnificados-componente .ant-table {
        width: 100%;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .damnificados-componente .ant-table-title {
        background-color: #A63333;
    }

    .damnificados-componente .ant-table-thead .ant-table-cell {
        background-color: #A63333 !important;
        color: white !important;
        font-weight: bold;
    }

    .damnificados-componente .ant-table-cell {
        padding: 16px !important;
    }

    .damnificados-componente .title-template-container {
        background-color: #A63333;
        padding: 16px;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .damnificados-componente .add-button {
        background-color: #4CAF50 !important;
        border-color: #438E46 !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .damnificados-componente .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    @@media (max-width: 960px) {
        .damnificados-componente .title-template-container {
            flex-direction: column;
            align-items: stretch;
        }
    }

    .damnificados-componente .ant-form-horizontal .ant-form-item-label {
        flex-grow: 1;
        background: #A63333;
    }

        .damnificados-componente .ant-form-horizontal .ant-form-item-label > label {
            color: #FFFFFF;
            padding: 2px 4px;
        }

    .damnificados-componente .ant-form-item {
        box-sizing: border-box;
        margin: 0;
        margin-bottom: 0px;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        margin-bottom: 8px !important;
        vertical-align: top;
        font-weight: bold;
    }

    .damnificados-componente .ant-modal-content {
        position: relative;
        background-color: #fff;
        background-clip: padding-box;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05);
        pointer-events: auto;
        border: 1px solid red !important;
    }
</style>


<div class="damnificados-componente">

    <Table Context="Damnificados" DataSource="Model.Damnificados" Bordered>
        <TitleTemplate>
            <GridRow>
                <GridCol Span="24" Style="text-align: right;">
                    <Button Type="ButtonType.Primary" OnClick="@(() => visibleDamnificados = true)">
                        <Icon Type="plus" /> Nueva
                    </Button>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Property="d => d.Nombre"></PropertyColumn>
            <PropertyColumn Property="d => d.Apellido"></PropertyColumn>
            <PropertyColumn Property="d => d.Edad"></PropertyColumn>
            <PropertyColumn Property="d => d.Estado"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="¿Quieres borrar este damnificado?"
                            OnConfirm="@(() => deleteRowDamnificados(Damnificados.Documento))"
                            OkText="Si"
                            CancelText="No">
                    <Button Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>

    <Modal @bind-Visible="visibleDamnificados" Title="@("Datos del damnificado")" OkText="@("Agregar")" CancelText="@("Cancelar")" OnOk="@AgregarDamnificado">
        <Form Model="Damnificado">
            <FormItem Label="Nombre" Required="true">
                <Input @bind-Value="@Damnificado.Nombre" />
            </FormItem>

            <FormItem Label="Apellido" Required="true">
                <Input @bind-Value="@Damnificado.Apellido" />
            </FormItem>

            <FormItem Label="Documento" Required="true">
                <Input @bind-Value="@Damnificado.Dni" />
            </FormItem>

            <FormItem Label="Sexo">
                <Input @bind-Value="@Damnificado.Sexo" />
            </FormItem>

            <FormItem Label="Edad">
                <Input @bind-Value="@Damnificado.Edad" Disabled="@Damnificado.FechaDeNacimiento.HasValue" />
            </FormItem>

            <FormItem Label="Lugar de Nacimiento">
                <Input @bind-Value="@Damnificado.LugarDeNacimiento" />
            </FormItem>

            <FormItem Label="Fecha de Nacimiento">
                <DatePicker TValue="DateTime?" @bind-Value="@Damnificado.FechaDeNacimiento" OnChange="@CalcularEdad" />
            </FormItem>

            <FormItem Label="Estado">
                <EnumSelect TEnum="TipoDamnificado" @bind-Value="@Damnificado.Estado" />
            </FormItem>
        </Form>
    </Modal>
</div>

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;

    private DamnificadoViewModels Damnificado = new DamnificadoViewModels();
    private bool visibleDamnificados = false;

    private async Task deleteRowDamnificados(int DNI)
    {
        if (Model.Damnificados == null || !Model.Damnificados.Any())
        {
            await MessageService.ErrorAsync("No hay damnificados registrados.");
            return;
        }

        if (!Model.Damnificados.Any(m => m.Documento == DNI))
        {
            await MessageService.ErrorAsync($"No se encontró un damnificado con el DNI {DNI}.");
            return;
        }

        Model.Damnificados = Model.Damnificados.Where(m => m.Documento != DNI).ToList();
        await MessageService.SuccessAsync($"Damnificado con DNI {DNI} eliminado correctamente.");
    }

    private async Task AgregarDamnificado()
    {
        try
        {
            Damnificado_Salida dp = new()
            {
                Nombre = Damnificado.Nombre,
                Apellido = Damnificado.Apellido,
                Documento = Damnificado.Dni,
                Sexo = Damnificado.Sexo,
                LugarNacimiento = Damnificado.LugarDeNacimiento,
                Edad = Damnificado.Edad,
                Estado = Damnificado.Estado,
            };

            if (Model.Damnificados == null)
            {
                Model.Damnificados = new List<Damnificado_Salida>();
            }

            if (Model.Damnificados.Any(d => d.Documento == dp.Documento))
            {
                await MessageService.ErrorAsync("Ya existe un damnificado con ese documento", 5);
                return;
            }

            Model.Damnificados.Add(dp);

            Damnificado = new DamnificadoViewModels();

            visibleDamnificados = false;
            await MessageService.SuccessAsync("Damnificado agregado correctamente");
            StateHasChanged();
        }
        catch (Exception e)
        {
            StateHasChanged();

            if (e.InnerException != null)
                await MessageService.ErrorAsync(e.InnerException.Message, 5);
            else
                await MessageService.ErrorAsync(e.Message, 5);
        }
    }

    private Task CalcularEdad()
    {
        Damnificado.Edad = Damnificado.FechaDeNacimiento.HasValue
            ? (int)((DateTime.Now - Damnificado.FechaDeNacimiento.Value).TotalDays / 365.25)
            : 0;

        return Task.CompletedTask;
    }
}
