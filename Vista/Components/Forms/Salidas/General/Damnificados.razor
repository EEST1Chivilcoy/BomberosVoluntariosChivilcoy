@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.Models.Salidas;
@using Vista.Data.Models.Personas;
@using System.Linq;

@inject IMessageService MessageService

<style>

      .damnificados {
    border: 2px solid #ffb366 !important;
    background: linear-gradient(180deg, #fffdf9 0%, #fff7f0 100%);
    box-shadow: 0 4px 12px rgba(255, 163, 77, 0.15);
    border-radius: 16px;
    margin-bottom: 2rem;
    padding: 2.5rem 2rem 2rem 2rem;
    transition: box-shadow 0.25s ease, transform 0.2s ease;
    }
    
    

    .damnificados-componente .ant-table {
        background: #fff8f0 !important;
        color: #ff6a33 !important;
        font-weight: 500 !important;
        font-size: 1.05rem !important;
        border-radius: 14px !important;
    }

    .damnificados-componente .ant-table-thead .ant-table-cell, 
    .damnificados-componente .ant-table thead th {
        background: linear-gradient(135deg, #ff944d, #ff7a45) !important; 
        color: #fff !important;
        font-weight: 600 !important;
        text-align: center !important;
        border-bottom: 2px solid #ffe0cc !important;
        letter-spacing: 0.3px !important;
        padding: 8px 10px !important;
        font-size: 1.08rem !important;
        height: 32px !important;
    }
    .damnificados-componente .ant-table-title {
        background: #fff8f0 !important;
        color: #ff6a33 !important;
        font-weight: 700 !important;
        font-size: 1.05rem !important;
        text-align: left !important;
        padding: 0.5rem 0.8rem !important;
        border-top-left-radius: 12px !important;
        border-top-right-radius: 12px !important;
        border-bottom: 1px solid #ffd6b3 !important;
    }
    .damnificados-componente .ant-table-cell, 
    .damnificados-componente .ant-table td {
        background: #fff !important;
        color: #333 !important;
        padding: 6px 10px !important;
        font-size: 1rem !important;
        height: 28px !important;
    }

    .damnificados-componente .ant-btn {
        font-size: 0.95rem !important;
        padding: 4px 10px !important;
    }

    /* Modal estilo Licencias adaptado para Damnificados */
    .modal-damnificado .ant-modal-content {
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(255, 163, 77, 0.15);
        border: 4px solid #ffb366;
        margin-top: -50px;
        margin-bottom: 0px;
        background: linear-gradient(180deg, #fffdf9 0%, #fff7f0 100%);
    }

    .modal-damnificado .ant-modal-header {
        background-color: #fff8f0;
        border-bottom: 1px solid #ffd6b3;
        padding: 16px 24px;
        border-radius: 9px 9px 0 0;
    }

    .modal-damnificado-content {
        padding: 24px;
    }

    .modal-damnificado-form-item {
        margin-bottom: 20px;
        position: relative;
        padding-left: 10px;
    }

    .modal-damnificado-form-item .ant-form-item-label > label,
    .modal-damnificado-form-full-width .ant-form-item-label > label {
        font-weight: 600;
        color: #ff6a33;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        transition: color 0.3s ease;
    }

    .modal-damnificado-form-item .ant-form-item-label > label:hover,
    .modal-damnificado-form-full-width .ant-form-item-label > label:hover {
        color: #ff944d;
    }

    .modal-damnificado .ant-input:focus,
    .modal-damnificado .ant-input:hover,
    .modal-damnificado .ant-select-selector:focus,
    .modal-damnificado .ant-select-selector:hover,
    .modal-damnificado .ant-picker:focus,
    .modal-damnificado .ant-picker:hover,
    .modal-damnificado .ant-picker-input > input:focus,
    .modal-damnificado .ant-picker-input > input:hover,
    .modal-damnificado .ant-input-number-input:focus,
    .modal-damnificado .ant-input-number-input:hover,
    .modal-damnificado .ant-textarea:focus,
    .modal-damnificado .ant-textarea:hover {
        border-color: #ffb366 !important;
        box-shadow: 0 0 0 2px rgba(255, 163, 77, 0.15) !important;
    }

    .modal-damnificado .ant-picker,
    .modal-damnificado .ant-input,
    .modal-damnificado .ant-select-selector,
    .modal-damnificado .ant-input-number,
    .modal-damnificado .ant-textarea {
        border-radius: 8px !important;
        border: 1px solid #ffd6b3 !important;
        background: #fff !important;
        color: #434343 !important;
        transition: all 0.3s ease !important;
    }

    .modal-damnificado .modal-damnificado-footer {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 18px;
        margin-bottom: 0px;
    }
    .modal-damnificado .ant-btn-primary {
        background: linear-gradient(135deg, #ff944d 0%, #ff6a33 100%) !important;
        border: none !important;
        color: #fff !important;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(255, 163, 77, 0.18);
        margin-top:  0;
        margin-bottom: 0;
        padding: 0 20px !important;
    }
    .modal-damnificado .ant-btn-primary:hover {
        background: linear-gradient(135deg, #ff7a45 0%, #ff944d 100%) !important;
        color: #fff !important;
    }

    .btn-nuevo-damnificado {
        background: linear-gradient(135deg, #ff944d 0%, #ff6a33 100%) !important;
        color: #fff !important;
        font-weight: 600;
        border: none !important;
        box-shadow: 0 2px 8px rgba(255, 163, 77, 0.18);
        border-radius: 8px;
        padding: 0 20px !important;
        transition: background 0.3s;
    }
    .btn-nuevo-damnificado:hover {
        background: linear-gradient(135deg, #ff7a45 0%, #ff944d 100%) !important;
        color: #fff !important;
    }
</style>


<div class="damnificados damnificados-componente">

    <Table Context="Damnificados" 
           DataSource="Model.Damnificados" 
           Size="TableSize.Small"
           Class="damnificados-componente"
           Bordered>
        <TitleTemplate>
            <GridRow>
                <GridCol Span="24" Style="text-align: right;">
                    <Button Type="ButtonType.Primary"
                            Class="btn-nuevo-damnificado"
                            OnClick="@(() => visibleDamnificados = true)">
                        <Icon Type="plus" /> Nuevo Damnificado
                    </Button>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Property="d => d.Nombre"></PropertyColumn>
            <PropertyColumn Property="d => d.Apellido"></PropertyColumn>
            <PropertyColumn Property="d => d.Edad"></PropertyColumn>
            <PropertyColumn Property="d => d.Estado"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="¿Quieres borrar este damnificado?"
                            OnConfirm="@(() => deleteRowDamnificados(Damnificados.Documento))"
                            OkText="Si"
                            CancelText="No">
                    <Button Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>

    <Modal @bind-Visible="visibleDamnificados"
       Title="@("Datos del damnificado")"
       OkText="@("Agregar")"
       CancelText="@("Cancelar")"
       OnOk="@AgregarDamnificado"
       WrapClassName="modal-damnificado">
    <div class="modal-damnificado-content">
        <Form Model="Damnificado" Layout="FormLayout.Vertical" Class="modal-damnificado-form">
            <Row Gutter="16">
                <AntDesign.Col Span="8">
                    <FormItem Label="Nombre" Required="true" Class="modal-damnificado-form-item">
                        <Input @bind-Value="@Damnificado.Nombre" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="8">
                    <FormItem Label="Apellido" Required="true" Class="modal-damnificado-form-item">
                        <Input @bind-Value="@Damnificado.Apellido" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="8">
                    <FormItem Label="Documento" Required="true" Class="modal-damnificado-form-item">
                        <Input @bind-Value="@Damnificado.Dni" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16">
                <AntDesign.Col Span="8">
                    <FormItem Label="Sexo" Class="modal-damnificado-form-item">
                        <Input @bind-Value="@Damnificado.Sexo" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="8">
                    <FormItem Label="Edad" Class="modal-damnificado-form-item">
                        <Input @bind-Value="@Damnificado.Edad" Disabled="@Damnificado.FechaDeNacimiento.HasValue" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="14">
                    <FormItem Label="Lugar de Nacimiento" Class="modal-damnificado-form-item">
                        <Input @bind-Value="@Damnificado.LugarDeNacimiento" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16">
                <AntDesign.Col Span="12">
                    <FormItem Label="Fecha de Nacimiento" Class="modal-damnificado-form-item">
                        <DatePicker TValue="DateTime?" @bind-Value="@Damnificado.FechaDeNacimiento" OnChange="@CalcularEdad" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <FormItem Label="Estado" Class="modal-damnificado-form-item">
                        <EnumSelect TEnum="TipoDamnificado" @bind-Value="@Damnificado.Estado" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </Form>
    </div>
</Modal>
</div>

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;

    private DamnificadoViewModels Damnificado = new DamnificadoViewModels();
    private bool visibleDamnificados = false;

    private async Task deleteRowDamnificados(int DNI)
    {
        if (Model.Damnificados == null || !Model.Damnificados.Any())
        {
            await MessageService.ErrorAsync("No hay damnificados registrados.");
            return;
        }

        if (!Model.Damnificados.Any(m => m.Documento == DNI))
        {
            await MessageService.ErrorAsync($"No se encontró un damnificado con el DNI {DNI}.");
            return;
        }

        Model.Damnificados = Model.Damnificados.Where(m => m.Documento != DNI).ToList();
        await MessageService.SuccessAsync($"Damnificado con DNI {DNI} eliminado correctamente.");
    }

    private async Task AgregarDamnificado()
    {
        try
        {
            Damnificado_Salida dp = new()
            {
                Nombre = Damnificado.Nombre,
                Apellido = Damnificado.Apellido,
                Documento = Damnificado.Dni,
                Sexo = Damnificado.Sexo,
                LugarNacimiento = Damnificado.LugarDeNacimiento,
                Edad = Damnificado.Edad,
                Estado = Damnificado.Estado,
            };

            if (Model.Damnificados == null)
            {
                Model.Damnificados = new List<Damnificado_Salida>();
            }

            if (Model.Damnificados.Any(d => d.Documento == dp.Documento))
            {
                await MessageService.ErrorAsync("Ya existe un damnificado con ese documento", 5);
                return;
            }

            Model.Damnificados.Add(dp);

            Damnificado = new DamnificadoViewModels();

            visibleDamnificados = false;
            await MessageService.SuccessAsync("Damnificado agregado correctamente");
            StateHasChanged();
        }
        catch (Exception e)
        {
            StateHasChanged();

            if (e.InnerException != null)
                await MessageService.ErrorAsync(e.InnerException.Message, 5);
            else
                await MessageService.ErrorAsync(e.Message, 5);
        }
    }

    private Task CalcularEdad()
    {
        Damnificado.Edad = Damnificado.FechaDeNacimiento.HasValue
            ? (int)((DateTime.Now - Damnificado.FechaDeNacimiento.Value).TotalDays / 365.25)
            : 0;

        return Task.CompletedTask;
    }
}
