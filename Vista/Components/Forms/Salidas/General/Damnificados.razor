@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.Models.Salidas;
@using Vista.Data.Models.Personas;
@using System.Linq;

@inject IMessageService MessageService

<style>

    .damnificados {
        border: 2px solid #ffb366 !important;
        background: linear-gradient(180deg, #fffdf9 0%, #fff7f0 100%);
        box-shadow: 0 4px 12px rgba(255, 163, 77, 0.15);
        border-radius: 16px;
        margin-bottom: 2rem;
        padding: 2.5rem 2rem 2rem 2rem;
        transition: box-shadow 0.25s ease, transform 0.2s ease;
    }



    .damnificados-componente .ant-table {
        background: #fff8f0;
        color: #ff6a33;
        font-weight: 700;
        font-size: 1.05rem;
        text-align: left;
        padding: 0.75rem 1rem;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
        border-bottom: 1px solid #ffd6b3;
    }

    .damnificados-componente .ant-table-thead .ant-table-cell {
        background: linear-gradient(135deg, #ff944d, #ff7a45) !important;
        color: #fff !important;
        font-weight: 600;
        text-align: center;
        border-bottom: 2px solid #ffe0cc;
        letter-spacing: 0.3px;
    }

    .damnificados-componente .ant-table-title {
        background: #fff8f0;
        color: #ff6a33;
        font-weight: 700;
        font-size: 1.05rem;
        text-align: left;
        padding: 0.75rem 1rem;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
        border-bottom: 1px solid #ffd6b3;
    }

    .damnificados-componente .ant-table-cell {
        background: #fff !important;
        color: #333 !important;
    }
</style>


<div class="damnificados damnificados-componente">

    <Switch @bind-Value="@visiblePersonaAfectada" /> <span>Personas Afectada</span>

    @if (visiblePersonaAfectada)
    {
        <Table Context="Damnificados" DataSource="Model.Damnificados" Bordered>
            <TitleTemplate>
                <GridRow>
                    <GridCol Span="24" Style="text-align: right;">
                        <Button Type="ButtonType.Primary" OnClick="@(() => visibleAgregarDamnificados = true)">
                            <Icon Type="plus" /> Nueva
                        </Button>
                    </GridCol>
                </GridRow>
            </TitleTemplate>
            <ColumnDefinitions>
                <PropertyColumn Property="d => d.Nombre"></PropertyColumn>
                <PropertyColumn Property="d => d.Apellido"></PropertyColumn>
                <PropertyColumn Property="d => d.Edad"></PropertyColumn>
                <PropertyColumn Property="d => d.Estado"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="¿Quieres borrar este damnificado?"
                                OnConfirm="@(() => deleteRowDamnificados(Damnificados.Documento))"
                                OkText="Si"
                                CancelText="No">
                        <Button Danger>
                            <Icon Type="delete" />
                        </Button>
                    </Popconfirm>
                </ActionColumn>
            </ColumnDefinitions>
        </Table>
    }

    <Switch @bind-Value="@visibleVehiculoAfectado" /> <span>Vehiculos Afectados</span>

    @if (visibleVehiculoAfectado)
    {
        <Table TItem="VehiculoAfectadoViewModel" DataSource="@VehiculoAfectado" Bordered>
            <TitleTemplate>
                <GridRow>
                    <GridCol Span="24" Style="text-align: right;">
                        <Button Type="ButtonType.Primary">
                            <Icon Type="plus" /> Nueva
                        </Button>
                    </GridCol>
                </GridRow>
            </TitleTemplate>
            <ColumnDefinitions>
                <PropertyColumn Property="v => v.TipoVehiculo"></PropertyColumn>
                <PropertyColumn Property="v => v.Marca"></PropertyColumn>
                <PropertyColumn Property="v => v.Modelo"></PropertyColumn>
                <PropertyColumn Property="v => v.Patente"></PropertyColumn>
                <PropertyColumn Property="v => v.Conductor"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="¿Quieres borrar este damnificado?"
                                OkText="Si"
                                CancelText="No">
                        <Button Danger>
                            <Icon Type="delete" />
                        </Button>
                    </Popconfirm>
                </ActionColumn>
            </ColumnDefinitions>
        </Table>
    }

    <Modal @bind-Visible="visibleAgregarDamnificados" Title="@("Datos del damnificado")" OkText="@("Agregar")" CancelText="@("Cancelar")" OnOk="@AgregarDamnificado">
        <Form Model="Damnificado">
            <FormItem Label="Nombre" Required="true">
                <Input @bind-Value="@Damnificado.Nombre" />
            </FormItem>

            <FormItem Label="Apellido" Required="true">
                <Input @bind-Value="@Damnificado.Apellido" />
            </FormItem>

            <FormItem Label="Documento" Required="true">
                <Input @bind-Value="@Damnificado.Dni" />
            </FormItem>

            <FormItem Label="Sexo">
                <Input @bind-Value="@Damnificado.Sexo" />
            </FormItem>

            <FormItem Label="Edad">
                <Input @bind-Value="@Damnificado.Edad" Disabled="@Damnificado.FechaDeNacimiento.HasValue" />
            </FormItem>

            <FormItem Label="Lugar de Nacimiento">
                <Input @bind-Value="@Damnificado.LugarDeNacimiento" />
            </FormItem>

            <FormItem Label="Fecha de Nacimiento">
                <DatePicker TValue="DateTime?" @bind-Value="@Damnificado.FechaDeNacimiento" OnChange="@CalcularEdad" />
            </FormItem>

            <FormItem Label="Estado">
                <EnumSelect TEnum="TipoDamnificado" @bind-Value="@Damnificado.Estado" />
            </FormItem>
        </Form>
    </Modal>
</div>

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;

    private DamnificadoViewModels Damnificado = new DamnificadoViewModels();

    private List<VehiculoAfectadoViewModel> VehiculoAfectado = new();

    public class VehiculoAfectadoViewModel
    {
        public string? TipoVehiculo;

        public string? Marca;

        public string? Modelo;

        public string? Patente;

        public string? Conductor;
    }

    private bool visibleAgregarDamnificados = false;

    private bool visiblePersonaAfectada = false;
    private bool visibleVehiculoAfectado = false;

    private async Task deleteRowDamnificados(int DNI)
    {
        if (Model.Damnificados == null || !Model.Damnificados.Any())
        {
            await MessageService.ErrorAsync("No hay damnificados registrados.");
            return;
        }

        if (!Model.Damnificados.Any(m => m.Documento == DNI))
        {
            await MessageService.ErrorAsync($"No se encontró un damnificado con el DNI {DNI}.");
            return;
        }

        Model.Damnificados = Model.Damnificados.Where(m => m.Documento != DNI).ToList();
        await MessageService.SuccessAsync($"Damnificado con DNI {DNI} eliminado correctamente.");
    }

    private async Task AgregarDamnificado()
    {
        try
        {
            Damnificado_Salida dp = new()
            {
                Nombre = Damnificado.Nombre,
                Apellido = Damnificado.Apellido,
                Documento = Damnificado.Dni,
                Sexo = Damnificado.Sexo,
                LugarNacimiento = Damnificado.LugarDeNacimiento,
                Edad = Damnificado.Edad,
                Estado = Damnificado.Estado,
            };

            if (Model.Damnificados == null)
            {
                Model.Damnificados = new List<Damnificado_Salida>();
            }

            if (Model.Damnificados.Any(d => d.Documento == dp.Documento))
            {
                await MessageService.ErrorAsync("Ya existe un damnificado con ese documento", 5);
                return;
            }

            Model.Damnificados.Add(dp);

            Damnificado = new DamnificadoViewModels();

            visibleAgregarDamnificados = false;
            await MessageService.SuccessAsync("Damnificado agregado correctamente");
            StateHasChanged();
        }
        catch (Exception e)
        {
            StateHasChanged();

            if (e.InnerException != null)
                await MessageService.ErrorAsync(e.InnerException.Message, 5);
            else
                await MessageService.ErrorAsync(e.Message, 5);
        }
    }

    private Task CalcularEdad()
    {
        Damnificado.Edad = Damnificado.FechaDeNacimiento.HasValue
            ? (int)((DateTime.Now - Damnificado.FechaDeNacimiento.Value).TotalDays / 365.25)
            : 0;

        return Task.CompletedTask;
    }
}
