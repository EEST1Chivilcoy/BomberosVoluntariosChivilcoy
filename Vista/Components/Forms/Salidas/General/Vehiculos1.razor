@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@using Microsoft.EntityFrameworkCore;

@*Servicio Utilizados*@
@using Vista.Services;
@inject IBomberoService BomberoService
@inject IVehiculoService VehiculoService

<div class="slick-contenedor @animationClass">
    <h6>Datos del chofer</h6>

    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Elija el chofer</label>
            <Select TItem="BomberoViweModel"
                    TItemValue="int"
                    DataSource="@bomberoChoferesSalir"
                    @bind-Value="@chofer"
                    LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                    ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                    Placeholder="Selecione a un bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Numero de movil</label>
            <Select TItem="Movil"
                    TItemValue="string"
                    DataSource="@Moviles"
                    @bind-Value="@NumeroMovil"
                    LabelName="@nameof(Movil.NumeroMovil)"
                    ValueName="@nameof(Movil.NumeroMovil)"
                    Placeholder="Selecione el movil"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </div>
    </div>

    @if (NumeroMovil is not null)
    {
        Model.Kilometraje = Moviles.FirstOrDefault(m => m.NumeroMovil == NumeroMovil)?.Kilometraje ?? Model.Kilometraje;
    }

    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Kilometro de salida</label>
            <AntDesign.InputNumber @bind-Value="Model.Kilometraje" Disabled />
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Kilometro de llegada</label>
            <AntDesign.InputNumber @bind-Value="Model.KmLlegada" />
        </div>
    </div>

    <div class="inpt-cont">
        <label class="inpt-cont--lbl">¿Cargo combustible?</label>
        <Switch @bind-Checked="switchMoviles" Style="width: 10px!important;" OnChange="@OnChangeSwitch" />
        <Modal Title="Datos de la carga de combustible"
               Visible="@_visible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancelMovil">
            <Form Loading="loading" Model="@movilSalidaViewModels"
                  LabelColSpan="8"
                  WrapperColSpan="16"
                  OnFinish="OnFinishModel"
                  OnFinishFailed="OnFinishFailed"
                  @ref="@_form1">
                <FormItem Label="Numero factura">
                    <Input @bind-Value="@movilSalidaViewModels.NumeroFactura" />
                </FormItem>
                <FormItem Label="Fecha factura">
                    <DatePicker TValue="DateTime?" ShowTime="true" @bind-Value="@movilSalidaViewModels.FechaFactura" />
                </FormItem>
                <FormItem Label="Tipo Combustible">
                    <Input @bind-Value="@movilSalidaViewModels.TipoConbustible" />
                </FormItem>
                <FormItem Label="Cantidad de Litros">
                    <Input @bind-Value="@movilSalidaViewModels.CantidadLitros" />
                </FormItem>
                <FormItem Label="Quien lleno">
                    <Input @bind-Value="@movilSalidaViewModels.QuienLleno" />
                </FormItem>
                <FormItem Label="TelefonoQuienLleno">
                    <Input @bind-Value="@movilSalidaViewModels.TelefonoQuienLleno" />
                </FormItem>
            </Form>
        </Modal>
    </div>
    <div class="inpt-cont">
        <Button OnClick="@AgregarMovilSalida">Cargar movil</Button>
    </div>

    @if (Model.Moviles != null && Model.Moviles.Any())
    {
        <div>
            <Table Size="TableSize.Small" PageSize="4" Context="MovilesSalidasL1" DataSource="Model.Moviles" Bordered>
                <PropertyColumn Property="c=>c.Movil.NumeroMovil"></PropertyColumn>
                <PropertyColumn Property="c=>c.Chofer.Nombre"></PropertyColumn>
                <PropertyColumn Property="c=>c.Chofer.Apellido"></PropertyColumn>
                <ActionColumn Title="Acciones">
                    <Popconfirm Title="¿Quieres borrar este movil?"
                                OnConfirm="()=> deleteRowMovil(MovilesSalidasL1.Movil.NumeroMovil)"
                                OkText="Si"
                                CancelText="No">
                        <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                    </Popconfirm>
                </ActionColumn>
            </Table>
        </div>
    }
</div>

@code {
    [Parameter] public SalidasViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }

    private List<BomberoViweModel> bomberoChoferes { get; set; }
    private List<BomberoViweModel> bomberoChoferesSalir { get; set; }

    private List<Movil> Moviles { get; set; }

    private MovilSalidaViewModels movilSalidaViewModels = new MovilSalidaViewModels();

    private int chofer;
    private string NumeroMovil;

    private bool switchMoviles = false;
    private bool _visible = false;
    private bool loading = false;
    private Form<MovilSalidaViewModels> _form1;

    protected override async Task OnInitializedAsync()
    {
        if (Model.Moviles == null)
        {
            Model.Moviles = new List<MovilSalida>();
        }

        bomberoChoferes = await BomberoService.ObtenerBomberosChoferes();
        bomberoChoferesSalir = bomberoChoferes.ToList();

        Moviles = await VehiculoService.ObtenerTodosLosMoviles();
    }

    private void toggle(bool value) => loading = value;

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
    }

    private void HandleOk(MouseEventArgs e)
    {
        _visible = false;
    }

    private void HandleCancelMovil(MouseEventArgs e)
    {
        _visible = false;
        switchMoviles = false;
    }

    private void OnChangeSwitch()
    {
        _visible = switchMoviles;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaViewModels)}");
    }

    private void deleteRowMovil(string NumMovil)
    {
        Model.Moviles.RemoveAll(m => m.Movil.NumeroMovil == NumMovil);
        StateHasChanged();
    }

    private async Task AgregarMovilSalida()
    {
        try
        {
            Bombero? bomberoChofer = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(chofer);
            Movil? Movilsalida = await VehiculoService.ObtenerMovilPorNumero(NumeroMovil);

            if (bomberoChofer == null || Movilsalida == null)
            {
                message.Error("No se encontraron los datos ingresados");
                return;
            }

            MovilSalida m = new()
                {
                    Movil = Movilsalida,
                    CargoCombustible = switchMoviles,
                    NumeroFactura = movilSalidaViewModels.NumeroFactura,
                    FechaFactura = movilSalidaViewModels.FechaFactura,
                    TipoConbustible = movilSalidaViewModels.TipoConbustible,
                    CantidadLitros = movilSalidaViewModels.CantidadLitros,
                    QuienLleno = movilSalidaViewModels.QuienLleno,
                    TelefonoQuienLleno = movilSalidaViewModels.TelefonoQuienLleno,
                    KmLlegada = Model.KmLlegada,
                    Chofer = bomberoChofer
                };

            Model.Moviles.Add(m);
            StateHasChanged();
            message.Success("Chofer agregado correctamente");
        }
        catch (Exception e)
        {
            StateHasChanged();
            message.Error(e.InnerException?.Message ?? e.Message, 5);
        }
    }
}