@using Vista.Data.ViewModels

@*Servicio Utilizados*@
@using Vista.Services
@inject IParteService ParteService

<div class="slick-contenedor @animationClass">
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Numero de parte</label>
        <Input @bind-Value="@Model.NumeroParte" ReadOnly="true">
        <Suffix>
            / @anio
        </Suffix>
        </Input>
        @if (Model != null)
        {
            Model.AnioNumeroParte = anio;
        }
    </div>
    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Hora salida</label>
            <TimePicker @bind-Value="Model.HoraSalida" Format="HH:mm" OnChange="OnChange" />
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Hora llegada</label>
            <TimePicker @bind-Value="Model.HoraLLegada" Format="HH:mm" OnChange="OnChange" />
        </div>
    </div>
    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Calle/Ruta</label>
            <Input @bind-Value="@Model.CalleORuta" />
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Numero/Kilometro</label>
            <Input @bind-Value="@Model.NumeroOKilometro" />
        </div>
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Entre calles</label>
        <Input @bind-Value="@Model.EntreCalles" />
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Descripcion</label>
        <TextArea Placeholder="Descripcion" @bind-Value="@Model.Descripcion" />
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Tipo zona</label>
        <EnumSelect TEnum="TipoZona" @bind-Value="@Model.TipoZona" />
    </div>
</div>

@code {
    [Parameter] public SalidasViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }
    [Parameter] public EventCallback<DateTimeChangedEventArgs> OnChange { get; set; }

    int anio = DateTime.Now.Year;

    protected override async Task OnInitializedAsync()
    {
        Model.NumeroParte = await GenerarNumeroParteAsync();
        Model.AnioNumeroParte = anio;
    }

    private async Task<int> GenerarNumeroParteAsync()
    {
       int ultimoNumeroParte = await ParteService.ObtenerUltimoNumeroParteDelAnioAsync(anio);
       return (ultimoNumeroParte + 1);
    }
}