@using Vista.Data.ViewModels

@*Servicio Utilizados*@
@using Vista.Services
@inject IParteService ParteService

<div class="slick-contenedor @animationClass">
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Numero de parte</label>
        <Input @bind-Value="@Model.NumeroParte" ReadOnly="true">
        <Suffix>
            / @anio
        </Suffix>
        </Input>
        @if (Model != null)
        {
            Model.AnioNumeroParte = anio;
        }
    </div>
    <div class="inpt-cont-inline">
        @if (Model.HoraLLegada.TimeOfDay < Model.HoraSalida.TimeOfDay)
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Fechas (salida y llegada)</label>
                <RangePicker TValue="DateTime[]" Disabled="new bool[] { false, true }"
                             @bind-Value="@FechaRange" />
            </div>
        }
        else
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Fecha</label>
                <DatePicker TValue="DateTime" Picker="@DatePickerType.Date" @bind-Value="@fechaSalida" />
            </div>
        }
    </div>
    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Hora salida</label>
            <TimePicker @bind-Value="Model.HoraSalida" Format="HH:mm"/>
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Hora llegada</label>
            <TimePicker @bind-Value="Model.HoraLLegada" Format="HH:mm"/>
        </div>
    </div>
    <div class="inpt-cont-inline">
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Calle/Ruta</label>
            <Input @bind-Value="@Model.CalleORuta" />
        </div>
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Numero/Kilometro</label>
            <Input @bind-Value="@Model.NumeroOKilometro" />
        </div>
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Entre calles</label>
        <Input @bind-Value="@Model.EntreCalles" />
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Descripcion</label>
        <TextArea Placeholder="Descripcion" @bind-Value="@Model.Descripcion" />
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Tipo zona</label>
        <EnumSelect TEnum="TipoZona" @bind-Value="@Model.TipoZona" />
    </div>
    @if (!esSoloDireccion)
    {
        <div class="inpt-cont" style="display: flex; flex-direction: column; justify-content: space-around; min-width: 80px;">
            <label class="inpt-cont--lbl">¿Este lugar es un departamento?</label>
            <Switch @bind-Checked="@esDepartamento" Style="width: 10px!important;" />
        </div>
    }
    @if (esDepartamento)
    {
        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">PisoNumero</label>
                <Input @bind-Value="@Model.PisoNumero" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Depto</label>
                <Input @bind-Value="@Model.Depto" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public SalidasViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }
    [Parameter] public bool esSoloDireccion { get; set; } = false;

    private int anio = DateTime.Now.Year;
    private bool esDepartamento;

    private DateTime fechaSalida = DateTime.Today;
    private DateTime fechaFin => fechaSalida.AddDays(1);

    private DateTime[] FechaRange
    {
        get => new DateTime[] { fechaSalida, fechaFin };
        set
        {
            if (value.Length == 1)
            {
                fechaSalida = value[0];
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Si cualquiera de los campos de departamento tiene un valor, prende el switch
        esDepartamento = !string.IsNullOrEmpty(Model.PisoNumero) ||
                      !string.IsNullOrEmpty(Model.Depto);
    }

    protected override async Task OnInitializedAsync()
    {
        Model.NumeroParte = await GenerarNumeroParteAsync();
        Model.AnioNumeroParte = anio;
    }

    private async Task<int> GenerarNumeroParteAsync()
    {
        int ultimoNumeroParte = await ParteService.ObtenerUltimoNumeroParteDelAnioAsync(anio);
        return (ultimoNumeroParte + 1);
    }
}