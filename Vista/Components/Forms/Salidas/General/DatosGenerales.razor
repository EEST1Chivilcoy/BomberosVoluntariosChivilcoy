@using Vista.Data.ViewModels
@using System.Timers

@*Servicios Utilizados*@
@using Vista.Services
@inject IParteService ParteService
@inject GeorefService GeorefService

<div class="slick-contenedor @animationClass">
    <h6>Datos Principales</h6>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Numero de parte</label>
        <Input @bind-Value="@Model.NumeroParte" ReadOnly="true">
        <Suffix>
            / @anio
        </Suffix>
        </Input>
        @if (Model != null)
        {
            Model.AnioNumeroParte = anio;
        }
    </div>
    <div class="inpt-cont-inline">
        @if (Model.TimeLlegada < Model.TimeSalida)
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Fechas (salida y llegada)</label>
                <RangePicker TValue="DateTime[]" Disabled="new bool[] { false, true }"
                             @bind-Value="@FechaRange" />
            </div>
        }
        else
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Fecha</label>
                <DatePicker TValue="DateTime" Picker="@DatePickerType.Date" @bind-Value="@Model.FechaSalida" />
            </div>
        }
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Tipo zona</label>
        <EnumSelect TEnum="TipoZona" @bind-Value="@Model.TipoZona" />
    </div>
    <div class="inpt-cont-inline">
        @if (Model.TipoZona == TipoZona.Urbana)
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Calle/Ruta</label>
                @if (isApiAvailable)
                {
                    <Select TItem="string"
                            TItemValue="string"
                            DataSource="@streetSuggestions"
                            @bind-Value="@Model.CalleORuta"
                            Placeholder="Seleccione una calle"
                            OnSearch="OnSearch"
                            EnableSearch
                            OnSelectedItemChanged="OnStreetSelected">
                    </Select>
                }
                else
                {
                    <Input @bind-Value="@Model.CalleORuta" />
                }
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Número/Kilómetro</label>
                <Input @bind-Value="@Model.NumeroOKilometro" />
            </div>
        }
        else
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Latitud</label>
                <Input @bind-Value="@Model.Latitud" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Longitud</label>
                <Input @bind-Value="@Model.Longitud" />
            </div>
        }
    </div>
    @*<div class="inpt-cont">
    <label class="inpt-cont--lbl">Entre calles</label>
    <Input @bind-Value="@Model.EntreCalles" />
    </div>*@
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Descripcion</label>
        <TextArea Placeholder="Descripcion" @bind-Value="@Model.Descripcion" />
    </div>
    @if (!esSoloDireccion)
    {
        <div class="inpt-cont" style="display: flex; flex-direction: column; justify-content: space-around; min-width: 80px;">
            <label class="inpt-cont--lbl">¿Este lugar es un departamento?</label>
            <Switch @bind-Checked="@esDepartamento" Style="width: 10px!important;" />
        </div>
    }
    @if (esDepartamento)
    {
        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">PisoNumero</label>
                <Input @bind-Value="@Model.PisoNumero" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Depto</label>
                <Input @bind-Value="@Model.Depto" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public SalidasViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }
    [Parameter] public bool esSoloDireccion { get; set; } = false;

    private bool isApiAvailable;
    private int anio = DateTime.Now.Year;
    private bool esDepartamento;

    //Timers para la API
    private Timer _debounceTimer;
    private int _debounceTime = 500; // Tiempo de espera en milisegundos

    private string searchValue; // Variable para almacenar temporalmente el valor de búsqueda

    private List<string> streetSuggestions = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Model.NumeroParte = await GenerarNumeroParteAsync();
        Model.AnioNumeroParte = anio;

        isApiAvailable = await GeorefService.CheckApiConnectionAsync();
    }

    private void OnStreetSelected(string selectedStreet)
    {
        if (!string.IsNullOrWhiteSpace(selectedStreet))
        {
            Model.CalleORuta = selectedStreet;
            StateHasChanged();
        }
    }

    private async void OnSearch(string value)
    {
        if (value.Length >= 3) // Verificación de caracteres mínimos
        {
            // Guarda el valor actual de búsqueda
            searchValue = value;

            // Reinicia el Timer en cada cambio
            _debounceTimer.Stop();
            _debounceTimer.Start();
        }
    }

    private DateTime[] FechaRange
    {
        get => new DateTime[] { Model.FechaSalida, Model.FechaLlegada };
        set
        {
            if (value.Length == 1)
            {
                Model.FechaSalida = value[0];
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Inicializa el Timer
        _debounceTimer = new Timer(_debounceTime);
        _debounceTimer.Elapsed += OnDebounceElapsed;
        _debounceTimer.AutoReset = false; // No queremos que se reinicie automáticamente

        if (Model != null)
        {
            if (Model.FechaSalida == DateTime.MinValue)
            {
                Model.FechaSalida = DateTime.Today;
            }
            esDepartamento = !string.IsNullOrEmpty(Model.PisoNumero) ||
                              !string.IsNullOrEmpty(Model.Depto);
        }
    }

    private async Task<int> GenerarNumeroParteAsync()
    {
        int ultimoNumeroParte = await ParteService.ObtenerUltimoNumeroParteDelAnioAsync(anio);
        return (ultimoNumeroParte + 1);
    }

    private async void OnDebounceElapsed(object sender, ElapsedEventArgs e)
    {
        // Llama a la API para obtener sugerencias de calles usando el valor almacenado
        _debounceTimer.Stop();

        if (!string.IsNullOrWhiteSpace(searchValue))
        {
            streetSuggestions = await GeorefService.GetStreetSuggestionsAsync(searchValue);
            await InvokeAsync(StateHasChanged);
        }
    }
}