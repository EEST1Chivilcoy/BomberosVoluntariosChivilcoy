@using Vista.Data.ViewModels
@using System.Timers
@using System.Web
@using Vista.Data.ViewModels.APIResponse
@using Vista.Data.Enums.Salidas

@*Servicios Utilizados*@
@using Vista.Services
@inject GeorefService GeorefService
@inject ISalidaService SalidaService

<div class="slick-contenedor @animationClass">
    <h6>Datos Principales</h6>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl"></label>
        @if (Model.TimeLlegada < Model.TimeSalida)
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Fechas (salida y llegada)</label>
                <RangePicker TValue="DateTime[]" Disabled="new bool[] { false, true }"
                             @bind-Value="@FechaRange" />
            </div>
        }
        else
        {
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Fecha</label>
                <DatePicker TValue="DateTime" Picker="@DatePickerType.Date" @bind-Value="@Model.FechaSalida" />
            </div>
        }
    </div>

    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Tipo zona</label>
        <EnumSelect TEnum="TipoZona" @bind-Value="@Model.TipoZona" />
    </div>

    @if (Model.TipoZona == TipoZona.Urbana)
    {
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Dirección</label>
            @if (isApiAvailable)
            {
                <Select TItem="Direccion"
                        TItemValue="Direccion"
                        DataSource="@direcciones"
                        @bind-Value="@Model.Direccion"
                        Placeholder="Seleccione una calle"
                        LabelName="@nameof(Direccion.NombreYAltura)"
                        OnSearch="OnSearch"
                        EnableSearch
                        OnSelectedItemChanged="OnStreetSelected">
                </Select>
            }
            else
            {
                <Input @bind-Value="@Model.CalleORuta" />
            }
        </div>

        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Latitud</label>
                <Input @bind-Value="@Model.Latitud" Disabled="true" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Longitud</label>
                <Input @bind-Value="@Model.Longitud" Disabled="true" />
            </div>
        </div>
    }
    else
    {
        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Latitud</label>
                <Input @bind-Value="@Model.Latitud" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Longitud</label>
                <Input @bind-Value="@Model.Longitud" />
            </div>
        </div>
    }

    @if (Model.Latitud != 0.0 && Model.Longitud != 0.0)
    {
        <div class="map-container">
            <iframe width="300"
                    height="300"
                    style="border:0;"
                    src="@GetOpenStreetMapUrl(Model.Latitud, Model.Longitud)"
                    frameborder="0" allowfullscreen></iframe>
        </div>
    }

    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Región Cuartel</label>
        <EnumSelect TEnum="CuartelRegionChivilcoy?" @bind-Value="@Model.CuartelRegion" DefaultActiveFirstOption="false" />
    </div>

    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Descripcion</label>
        <TextArea Placeholder="Descripcion" @bind-Value="@Model.Descripcion" />
    </div>

    @if (!esSoloDireccion && MostrarOpcionDepartamento)
    {
        <div class="inpt-cont" style="display: flex; flex-direction: column; justify-content: space-around; min-width: 80px;">
            <label class="inpt-cont--lbl">¿Se encuentra en un departamento?</label>
            <Switch @bind-Checked="@esDepartamento" Style="width: 10px!important;" />
        </div>
    }

    @if (esDepartamento)
    {
        <div class="inpt-cont-inline">
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Numero de Piso</label>
                <Input @bind-Value="@Model.PisoNumero" />
            </div>
            <div class="inpt-cont">
                <label class="inpt-cont--lbl">Departamento</label>
                <Input @bind-Value="@Model.Depto" />
            </div>
        </div>
    }

    <div class="inpt-cont" style="display: flex; flex-direction: column; justify-content: space-around; min-width: 80px;">
        <label class="inpt-cont--lbl">¿Se convoca a la guardia ?</label>
        <Switch @bind-Checked="@SeConvocoGuardia" Style="width: 10px!important;" />
    </div>

    @if (SeConvocoGuardia)
    {
        <div class="inpt-cont">
            <label class="inpt-cont--lbl">Selecione la Guardia</label>
            <EnumSelect TEnum="Guardia" @bind-Value="@Model.GuardiaSelecionada" />
        </div>
    }

</div>

@code {
    [Parameter] public SalidasViewModels Model { get; set; }
    [Parameter] public string animationClass { get; set; }
    [Parameter] public bool esSoloDireccion { get; set; } = false;
    [Parameter] public bool MostrarOpcionDepartamento { get; set; } = true;

    private bool isApiAvailable;
    private int anio = DateTime.Now.Year;
    private bool esDepartamento;
    private bool SeConvocoGuardia;

    //Timers para la API
    private Timer _debounceTimer = null!;
    private int _debounceTime = 500; // Tiempo de espera en milisegundos

    private string? searchValue; // Variable para almacenar temporalmente el valor de búsqueda

    private List<Direccion> direcciones = new();

    protected override async Task OnInitializedAsync()
    {
        isApiAvailable = await GeorefService.CheckApiConnectionAsync();
    }

    private void OnStreetSelected(Direccion selectedStreet)
    {
        if (selectedStreet != null)
        {
            Model.CalleORuta = $"{selectedStreet.Calle.Nombre} {selectedStreet.Altura.Valor}";
            Model.Latitud = selectedStreet.Ubicacion.Lat;
            Model.Longitud = selectedStreet.Ubicacion.Lon;
            StateHasChanged();
        }
    }

    private async void OnSearch(string value)
    {
        if (value.Length >= 3) // Verificación de caracteres mínimos
        {
            // Guarda el valor actual de búsqueda
            searchValue = value;

            // Reinicia el Timer en cada cambio
            _debounceTimer.Stop();
            _debounceTimer.Start();
        }
    }

    private DateTime[] FechaRange
    {
        get => new DateTime[] { Model.FechaSalida, Model.FechaLlegada };
        set
        {
            if (value.Length == 1)
            {
                Model.FechaSalida = value[0];
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Inicializa el Timer
        _debounceTimer = new Timer(_debounceTime);
        _debounceTimer.Elapsed += OnDebounceElapsed;
        _debounceTimer.AutoReset = false; // No queremos que se reinicie automáticamente

        if (Model != null)
        {
            if (Model.FechaSalida == DateTime.MinValue)
            {
                Model.FechaSalida = DateTime.Today;
            }
            esDepartamento = !string.IsNullOrEmpty(Model.PisoNumero) ||
                              !string.IsNullOrEmpty(Model.Depto);
        }
    }

    private async void OnDebounceElapsed(object sender, ElapsedEventArgs e)
    {
        // Llama a la API para obtener sugerencias de calles usando el valor almacenado
        _debounceTimer.Stop();

        if (!string.IsNullOrWhiteSpace(searchValue))
        {
            direcciones = await GeorefService.GetStreetSuggestionsAsync(searchValue);
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetOpenStreetMapUrl(double latitud, double longitud)
    {
        // URL base para el embed de OpenStreetMap
        string baseUrl = "https://www.openstreetmap.org/export/embed.html";

        // Redondear a 5 decimales para las coordenadas
        string latString = Math.Round(latitud, 5).ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonString = Math.Round(longitud, 5).ToString(System.Globalization.CultureInfo.InvariantCulture);

        // Generar los valores para el parámetro bbox (rango de coordenadas alrededor del punto)
        double latMin = latitud - 0.005;  // Ajuste más pequeño para un mejor zoom
        double latMax = latitud + 0.005;
        double lonMin = longitud - 0.005;
        double lonMax = longitud + 0.005;

        // Formatear las coordenadas para asegurar que se usen puntos como separadores decimales
        string latMinString = latMin.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string latMaxString = latMax.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonMinString = lonMin.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonMaxString = lonMax.ToString(System.Globalization.CultureInfo.InvariantCulture);

        // Parámetros para el mapa
        string bbox = $"{lonMinString},{latMinString},{lonMaxString},{latMaxString}";
        string marker = $"{latString},{lonString}";

        // Codificar las coordenadas para las comas
        string encodedBbox = HttpUtility.UrlEncode(bbox);  // Codifica las comas
        string encodedMarker = HttpUtility.UrlEncode(marker);  // Codifica las comas

        // Generar la URL completa con los parámetros codificados
        string urlParameters = $"?bbox={encodedBbox}&layer=mapnik&marker={encodedMarker}";

        // Combinar la URL base con los parámetros
        return baseUrl + urlParameters;
    }
}