@using System.Timers
@using System.Web
@using Vista.DTOs.Nominatim
@using Vista.Data.Enums.Salidas
@using Vista.Data.ViewModels

@*Servicios Utilizados*@
@using Vista.Services
@inject INominatimService GeorefService

<style>

    .map-container {
        width: 300px;
        height: 300px;
        border: 1px solid #ccc;
        border-radius: 6px;
        overflow: hidden;
        margin: 20px auto;
    }

    @@media screen and (max-width: 450px) {
        .map-container {
            width: 100%;
            height: auto;
        }
    }

      .datos-generales {
        border: 2px solid #40a9ff;
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 4px 16px rgba(24,144,255,0.08);
        padding: 2.5rem 2rem 2rem 2rem;
        margin-bottom: 2rem;
        transition: box-shadow 0.2s;
    }
    .datos-generales .section-title {
        color: #1890ff;
        display: flex;
        align-items: center;
        gap: 0.7rem;
    }

    .hora-row {
        display: flex;
        gap: 24px; 
        align-items: flex-end;
        margin-bottom: 16px;
    }
    .hora-row .ant-form-item {
        margin-bottom: 0;
        min-width: 180px;
    }
    
</style>

<div class="datos-generales">
    <Form Model="Model" OnFieldChanged="@ValidateForm">

        @* 🕒 Información Temporal *@
        <div style="margin-bottom: 24px;">
            <div style="border-bottom: 2px solid #1890ff; padding-bottom: 8px; margin-bottom: 16px;">
                <h4 style="color: #1890ff; margin: 0; font-weight: 600;">🕒 Información Temporal</h4>
            </div>
            @if (Model.TimeLlegada < Model.TimeSalida)
            {
                <FormItem Label="Fechas" Required>
                    <RangePicker TValue="DateTime[]" Disabled="new bool[] { false, true }"
                                 @bind-Value="@FechaRange" />
                </FormItem>
            }
            else
            {
                <FormItem Label="Fecha" Required>
                    <DatePicker TValue="DateTime" Picker="@DatePickerType.Date" @bind-Value="@Model.FechaSalida" />
                </FormItem>
            }

            <div class="hora-row">
                <FormItem Label="Hora Salida" Required>
                    <TimePicker @bind-Value="@Model.TimeSalida" Format="HH:mm" />
                </FormItem>
                <FormItem Label="Hora Llegada" Required>
                    <TimePicker @bind-Value="@Model.TimeLlegada" Format="HH:mm" />
                </FormItem>
            </div>
        </div>

        @* 📍 Ubicación *@
        <div style="margin-bottom: 14px;">
            <div style="border-bottom: 2px solid #1890ff; padding-bottom: 4px; margin-bottom: 8px;">
                <h4 style="color: #1890ff; margin: 0; font-weight: 600; font-size: 1.08rem;">📍 Ubicación</h4>
            </div>
            <Row Gutter="16">
                <AntDesign.Col Span="12">
                    <FormItem Label="Tipo Zona" Required>
                        <EnumSelect TEnum="TipoZona" @bind-Value="@Model.TipoZona" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <FormItem Label="Región Cuartel" Required>
                        <EnumSelect TEnum="CuartelRegionChivilcoy" @bind-Value="@Model.CuartelRegion" DefaultActiveFirstOption="false" />
                    </FormItem>
                </AntDesign.Col>
            </Row>

            <Row Gutter="16">
                <AntDesign.Col Span="12">
                    <FormItem Label="Dirección" Required>
                        @if (isApiAvailable)
                        {
                            <Select TItem="Direccion"
                                    TItemValue="Direccion"
                                    DataSource="@direcciones"
                                    @bind-Value="@Model.Direccion"
                                    Placeholder="Seleccione una calle"
                                    LabelName="@nameof(Direccion.NombreYAltura)"
                                    OnSearch="OnSearch"
                                    SearchDebounceMilliseconds="350"
                                    EnableSearch
                                    Loading="@_loading"
                                    OnSelectedItemChanged="OnStreetSelected">
                            </Select>
                        }
                        else
                        {
                            <Input @bind-Value="@Model.CalleORuta" Placeholder="Ingrese dirección" />
                        }
                    </FormItem>
                </AntDesign.Col>
            </Row>

            @if (Model.Latitud != 0.0 && Model.Longitud != 0.0)
            {
                <div class="map-container">
                    <iframe width="220"
                            height="220"
                            style="border:0;"
                            src="@GetOpenStreetMapUrl(Model.Latitud, Model.Longitud)"
                            frameborder="0" allowfullscreen></iframe>
                </div>
            }
        </div>

        @* 🏢 Detalles del Lugar *@
        @if (!esSoloDireccion && MostrarOpcionDepartamento)
        {
            <div style="margin-bottom: 24px;">
                <div style="border-bottom: 2px solid #1890ff; padding-bottom: 8px; margin-bottom: 16px;">
                    <h4 style="color: #1890ff; margin: 0; font-weight: 600;">🏢 Detalles del Lugar</h4>
                </div>
                <FormItem Label="¿Es Departamento?">
                    <Switch @bind-Checked="@esDepartamento" />
                </FormItem>

                @if (esDepartamento)
                {
                    <Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <FormItem Label="Piso">
                                <Input @bind-Value="@Model.PisoNumero" Placeholder="Número de piso" />
                            </FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <FormItem Label="Departamento">
                                <Input @bind-Value="@Model.Depto" Placeholder="Nro. de depto." />
                            </FormItem>
                        </AntDesign.Col>
                    </Row>
                }
            </div>
        }

        @* 🚒 Información Operativa *@
        <div style="margin-bottom: 24px;">
            <div style="border-bottom: 2px solid #1890ff; padding-bottom: 8px; margin-bottom: 16px;">
                <h4 style="color: #1890ff; margin: 0; font-weight: 600;">🚒 Información Operativa</h4>
            </div>
            <FormItem Label="¿Se convoca Guardia?">
                <Switch @bind-Checked="@SeConvocoGuardia" />
            </FormItem>

            @if (SeConvocoGuardia)
            {
                <FormItem Label="Guardia">
                    <EnumSelect TEnum="Guardia" @bind-Value="@Model.GuardiaSelecionada" />
                </FormItem>
            }
        </div>

        @* 📝 Descripción *@
        <div style="margin-bottom: 24px;">
            <div style="border-bottom: 2px solid #1890ff; padding-bottom: 8px; margin-bottom: 16px;">
                <h4 style="color: #1890ff; margin: 0; font-weight: 600;">📝 Descripción</h4>
            </div>
            <FormItem Label="Descripción" Required>
                <TextArea Placeholder="Describa la situación o evento..."
                          @bind-Value="@Model.Descripcion"
                          Rows="4" />
            </FormItem>
        </div>

    </Form>
</div>

@code {
    [Parameter, EditorRequired] public required SalidasViewModels Model { get; set; }
    [Parameter] public bool esSoloDireccion { get; set; } = false;
    [Parameter] public bool MostrarOpcionDepartamento { get; set; } = true;
    [Parameter] public EventCallback<bool> OnCompleted { get; set; } // Evento para notificar que se ha completado el formulario

    private bool isApiAvailable;
    private int anio = DateTime.Now.Year;
    private bool _loading = false; // Variable para controlar el estado de carga
    private bool esDepartamento;
    private bool SeConvocoGuardia;
    private List<Direccion> direcciones = new();

    protected override async Task OnInitializedAsync()
    {
        isApiAvailable = await GeorefService.CheckApiConnectionAsync();
    }

    private async Task ValidateForm()
    {
        var esValido = true;

        if (Model.FechaSalida == default ||
            Model.TimeSalida == default ||
            Model.TimeLlegada == default ||
            string.IsNullOrWhiteSpace(Model.Descripcion))
        {
            esValido = false;
        }

        await OnCompleted.InvokeAsync(esValido);
    }

    private void OnStreetSelected(Direccion selectedStreet)
    {
        if (selectedStreet != null)
        {
            Model.CalleORuta = $"{selectedStreet.Calle.Nombre} {selectedStreet.Altura.Valor}";
            Model.Latitud = selectedStreet.Ubicacion.Lat;
            Model.Longitud = selectedStreet.Ubicacion.Lon;
            StateHasChanged();
        }
    }

    private async void OnSearch(string value)
    {
        if (value.Length >= 3)
        {
            _loading = true;
            StateHasChanged(); // actualiza el componente para que se muestre el spinner

            try
            {
                direcciones = await GeorefService.GetStreetSuggestionsAsync(value);
            }
            catch (Exception ex)
            {
                // Podés loguear el error si querés
                Console.Error.WriteLine($"Error al buscar direcciones: {ex.Message}");
                direcciones.Clear();
            }

            _loading = false;
            await InvokeAsync(StateHasChanged); // vuelve a actualizar el componente
        }
        else
        {
            direcciones.Clear();
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private DateTime[] FechaRange
    {
        get => new DateTime[] { Model.FechaSalida, Model.FechaLlegada };
        set
        {
            if (value.Length == 1)
            {
                Model.FechaSalida = value[0];
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Model != null)
        {
            if (Model.FechaSalida == DateTime.MinValue)
            {
                Model.FechaSalida = DateTime.Today;
            }
            esDepartamento = !string.IsNullOrEmpty(Model.PisoNumero) ||
                              !string.IsNullOrEmpty(Model.Depto);
        }
    }

    private string GetOpenStreetMapUrl(double latitud, double longitud)
    {
        // URL base para el embed de OpenStreetMap
        string baseUrl = "https://www.openstreetmap.org/export/embed.html";

        // Redondear a 5 decimales para las coordenadas
        string latString = Math.Round(latitud, 5).ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonString = Math.Round(longitud, 5).ToString(System.Globalization.CultureInfo.InvariantCulture);

        // Generar los valores para el parámetro bbox (rango de coordenadas alrededor del punto)
        double latMin = latitud - 0.005;  // Ajuste más pequeño para un mejor zoom
        double latMax = latitud + 0.005;
        double lonMin = longitud - 0.005;
        double lonMax = longitud + 0.005;

        // Formatear las coordenadas para asegurar que se usen puntos como separadores decimales
        string latMinString = latMin.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string latMaxString = latMax.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonMinString = lonMin.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonMaxString = lonMax.ToString(System.Globalization.CultureInfo.InvariantCulture);

        // Parámetros para el mapa
        string bbox = $"{lonMinString},{latMinString},{lonMaxString},{latMaxString}";
        string marker = $"{latString},{lonString}";

        // Codificar las coordenadas para las comas
        string encodedBbox = HttpUtility.UrlEncode(bbox);  // Codifica las comas
        string encodedMarker = HttpUtility.UrlEncode(marker);  // Codifica las comas

        // Generar la URL completa con los parámetros codificados
        string urlParameters = $"?bbox={encodedBbox}&layer=mapnik&marker={encodedMarker}";

        // Combinar la URL base con los parámetros
        return baseUrl + urlParameters;
    }
}