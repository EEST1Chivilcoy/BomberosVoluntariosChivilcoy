@using Vista.Data.ViewModels
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Vehiculos.Flota
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Mappers

@*Servicios Utilizados*@
@using Vista.Services
@inject IMessageService MessageService
@inject IVehiculoSalidaService VehiculoSalidaService

<Form Model="movilSalidaView">

    @*Sección Datos del Vehículo*@
    <div style="margin-bottom: 24px;">
        <div style="border-bottom: 2px solid #fa8c16; padding-bottom: 8px; margin-bottom: 16px;">
            <h4 style="color: #fa8c16; margin: 0; font-weight: 600;">Datos del Vehículo</h4>
        </div>

        <Row Gutter="16">
            <Col Xs="24" Sm="12" Md="12" Lg="12">
            <FormItem Label="Seleccione al Chofer" Required>
                <Select TItem="BomberoViweModel"
                        TItemValue="BomberoViweModel"
                        DataSource="@bomberoChoferesSalir"
                        @bind-Value="@movilSalidaView.Chofer"
                        LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                        Placeholder="Seleccione a un bombero"
                        DefaultActiveFirstOption="false"
                        AllowClear="true"
                        EnableSearch>
                </Select>
            </FormItem>
            </Col>
            <Col Xs="24" Sm="12" Md="12" Lg="12">
            <FormItem Label="Número de Móvil" Required>
                <Select TItem="Movil"
                        TItemValue="string"
                        DataSource="@Moviles"
                        @bind-Value="@movilSalidaView.NumeroMovil"
                        LabelName="@nameof(Movil.NumeroMovil)"
                        ValueName="@nameof(Movil.NumeroMovil)"
                        Placeholder="Seleccione el móvil"
                        DefaultActiveFirstOption="false"
                        AllowClear="true"
                        EnableSearch>
                </Select>
            </FormItem>
            </Col>
        </Row>

        @if (movilSalidaView.NumeroMovil is not null)
        {
            movilSalidaView.KmSalida = Moviles.FirstOrDefault(m => m.NumeroMovil == movilSalidaView.NumeroMovil)?.Kilometraje ?? 0;
        }

        <Row Gutter="16">
            <Col Xs="24" Sm="12" Md="8" Lg="8">
            <FormItem Label="Kilometraje Actual">
                <Input @bind-Value="movilSalidaView.KmSalida" Disabled>
                <Suffix>Km</Suffix>
                </Input>
            </FormItem>
            </Col>
            <Col Xs="24" Sm="12" Md="8" Lg="8">
            <FormItem Label="Kilometraje de Llegada" Required>
                <Input @bind-Value="movilSalidaView.KmLlegada"
                       Placeholder="Ingrese el kilometraje de llegada">
                <Suffix>Km</Suffix>
                </Input>
            </FormItem>
            </Col>
            <Col Xs="24" Sm="24" Md="8" Lg="8">
            <FormItem Label="¿Cargó Combustible?">
                <div style="padding-top: 4px;">
                    <Switch @bind-Checked="switchMoviles" OnChange="@OnChangeSwitch" />
                    <span style="margin-left: 8px; color: #666;">
                        @(switchMoviles ? "Sí" : "No")
                    </span>
                </div>
            </FormItem>
            </Col>
        </Row>

        <Row Justify="RowJustify.End" style="margin-top: 16px;">
            <Col>
            <Button Type="@ButtonType.Primary"
                    OnClick="@AgregarMovilSalida"
                    Icon="plus"
                    Style="background-color: #fa8c16; border-color: #fa8c16;">
                Cargar Móvil
            </Button>
            </Col>
        </Row>
    </div>
</Form>

@*Modal para los Datos de la Carga de Combustible*@
<Modal Title="Datos de la Carga de Combustible"
       Visible="@_visible"
       OnCancel="@HandleCancelMovil"
       OkText="@("Cargar Móvil")"
       CancelText="@("Cancelar")"
       Width="600">
    <Form Model="@movilSalidaView">
        <div style="margin-bottom: 16px;">
            <div style="border-bottom: 1px solid #fa8c16; padding-bottom: 8px; margin-bottom: 16px;">
                <h5 style="color: #fa8c16; margin: 0; font-weight: 500;">Información del Combustible</h5>
            </div>

            <Row Gutter="16">
                <Col Xs="24" Sm="12">
                <FormItem Label="Número de Remito" Required>
                    <Input @bind-Value="@movilSalidaView.NumeroFactura"
                           Placeholder="Ingrese el número de remito" />
                </FormItem>
                </Col>
                <Col Xs="24" Sm="12">
                <FormItem Label="Fecha de la Factura" Required>
                    <DatePicker TValue="DateTime?"
                                @bind-Value="@movilSalidaView.FechaFactura"
                                Placeholder="@("Seleccione la fecha")" />
                </FormItem>
                </Col>
            </Row>

            <Row Gutter="16">
                <Col Xs="24" Sm="12">
                <FormItem Label="Tipo de Combustible" Required>
                    <Input @bind-Value="@movilSalidaView.TipoConbustible"
                           Placeholder="Ej: Nafta Super, Gasoil" />
                </FormItem>
                </Col>
                <Col Xs="24" Sm="12">
                <FormItem Label="Cantidad de Litros" Required>
                    <Input @bind-Value="@movilSalidaView.CantidadLitros"
                           Placeholder="Cantidad en litros">
                    <Suffix>L</Suffix>
                    </Input>
                </FormItem>
                </Col>
            </Row>

            <Row>
                <Col Span="24">
                <FormItem Label="Quien llenó el tanque" Required>
                    <Select TItem="BomberoViweModel"
                            TItemValue="BomberoViweModel"
                            DataSource="@bomberoChoferes"
                            @bind-Value="@movilSalidaView.QuienLleno"
                            LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                            ValueName="@nameof(BomberoViweModel.Nombre)"
                            Placeholder="Seleccione a un bombero"
                            DefaultActiveFirstOption="false"
                            AllowClear="true"
                            EnableSearch>
                    </Select>
                </FormItem>
                </Col>
            </Row>
        </div>
    </Form>
</Modal>

@*Sección Móviles Asignados*@
@if (Model.Moviles != null && Model.Moviles.Any())
{
    <div style="margin-top: 32px;">
        <div style="border-bottom: 2px solid #fa8c16; padding-bottom: 8px; margin-bottom: 16px;">
            <h4 style="color: #fa8c16; margin: 0; font-weight: 600; display: flex; align-items: center;">
                <Icon Type="car" style="margin-right: 8px;" />
                Móviles Asignados a la Salida
                <Badge Count="@Model.Moviles.Count"
                       Style="margin-left: 12px; background-color: #fa8c16;" />
            </h4>
        </div>

        <div style="overflow-x: auto;">
            <Table Size="TableSize.Small"
                   PageSize="10"
                   Context="MovilesSalidasL1"
                   DataSource="Model.Moviles"
                   Bordered
                   Style="min-width: 600px;">

                <PropertyColumn Property="c => c.Movil.NumeroMovil"
                                Title="Número de Móvil"
                                Sortable="true">
                    <Template>
                        <Tag Color="@TagColor.Blue">@MovilesSalidasL1.Movil.NumeroMovil</Tag>
                    </Template>
                </PropertyColumn>

                <PropertyColumn Property="c => c.Chofer.Nombre"
                                Title="Chofer">
                    <Template>
                        <div>
                            <strong>@($"{MovilesSalidasL1.Chofer.Apellido}, {MovilesSalidasL1.Chofer.Nombre}")</strong>
                            <br />
                            <small style="color: #666;">Legajo: @MovilesSalidasL1.Chofer.NumeroLegajo</small>
                        </div>
                    </Template>
                </PropertyColumn>

                <PropertyColumn Property="c => c.KmLlegada"
                                Title="Kilometraje">
                    <Template>
                        <div style="text-align: center;">
                            <div><small>Llegada:</small> <strong>@MovilesSalidasL1.KmLlegada km</strong></div>
                        </div>
                    </Template>
                </PropertyColumn>

                <PropertyColumn Property="c => c.CargoCombustible"
                                Title="Combustible">
                    <Template>
                        @if (MovilesSalidasL1.CargoCombustible)
                        {
                            <Tag Color="TagColor.Green">
                                <Icon Type="check-circle" /> Cargó
                            </Tag>
                            @if (!string.IsNullOrEmpty(MovilesSalidasL1.CantidadLitros))
                            {
                                <div><small>@MovilesSalidasL1.CantidadLitros L</small></div>
                            }
                        }
                        else
                        {
                            <Tag Color="default">
                                <Icon Type="close-circle" /> No cargó
                            </Tag>
                        }
                    </Template>
                </PropertyColumn>

                <ActionColumn Title="Acciones" Width="80">
                    <Template>
                        <Popconfirm Title="¿Está seguro de eliminar este móvil?"
                                    OnConfirm="()=> DeleteRowMovil(MovilesSalidasL1.Movil.NumeroMovil)"
                                    OkText="Sí, eliminar"
                                    CancelText="Cancelar">
                            <Button Type="@ButtonType.Text"
                                    Danger
                                    Size="@ButtonSize.Small"
                                    Icon="delete">
                            </Button>
                        </Popconfirm>
                    </Template>
                </ActionColumn>
            </Table>
        </div>
    </div>
}
else
{
    <div style="margin-top: 32px; text-align: center; padding: 24px; background-color: #fafafa; border-radius: 8px; border: 1px dashed #d9d9d9;">
        <Icon Type="car" style="font-size: 48px; color: #fa8c16; margin-bottom: 16px;" />
        <h5 style="color: #666; margin: 0;">No hay móviles asignados</h5>
        <p style="color: #999; margin: 8px 0 0 0;">Complete el formulario superior para agregar móviles a la salida</p>
    </div>
}

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;
    [Parameter, EditorRequired] public List<Bombero> BomberosTodos { get; set; } = null!;
    [Parameter, EditorRequired] public List<VehiculoSalida> Flota { get; set; } = null!;

    private List<BomberoViweModel> bomberoChoferes { get; set; } = new();
    private List<BomberoViweModel> bomberoChoferesSalir { get; set; } = new();
    private List<BomberoViweModel> BomberosViewModelTodos { get; set; } = null!;

    private List<Movil> Moviles { get; set; } = new();

    private MovilSalidaViewModels movilSalidaView = new MovilSalidaViewModels();

    private bool switchMoviles = false;
    private bool _visible = false;
    private bool loading = false;

    protected override async Task OnParametersSetAsync()
    {
        // Inicializar la lista de moviles si es null
        if (Model.Moviles == null)
        {
            Model.Moviles = new List<Movil_Salida>();
        }

        // Clonar la lista para que el componente hijo trabaje con una copia
        BomberosViewModelTodos = BomberosTodos.ToBomberoViewModelList().ToList();

        // Filtrar los moviles de la flota
        Moviles = Flota.OfType<Movil>().ToList();

        // Obtener las listas de bomberos choferes y móviles
        bomberoChoferes = await FiltrarBomberosChoferesAsync(BomberosViewModelTodos);
        bomberoChoferesSalir = bomberoChoferes.ToList();

        // Verificar si hay móviles en el modelo
        if (Model.Moviles.Any())
        {
            var bomberosToRemove = new List<BomberoViweModel>();
            var movilesToRemove = new List<Movil>();

            // Recorrer los móviles en el modelo
            foreach (var movil in Model.Moviles)
            {
                // Buscar el móvil correspondiente en la lista de todos los móviles
                Movil? movilRem = Moviles.FirstOrDefault(m => m.NumeroMovil == movil.Movil.NumeroMovil);

                // Buscar el chofer correspondiente en la lista de bomberos choferes
                BomberoViweModel? bombero = bomberoChoferes.FirstOrDefault(b => b.NumeroLegajo == movil.Chofer.NumeroLegajo);

                if (movilRem != null)
                {
                    movilesToRemove.Add(movilRem);
                }

                if (bombero != null)
                {
                    bomberosToRemove.Add(bombero);
                }
            }

            // Eliminar los móviles que están en la lista de removibles
            Moviles.RemoveAll(m => movilesToRemove.Contains(m));

            // Eliminar los bomberos que están en la lista de removibles
            bomberoChoferesSalir.RemoveAll(b => bomberosToRemove.Contains(b));
        }
    }

    private void toggle(bool value) => loading = value;

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
    }

    private void HandleCancelMovil(MouseEventArgs e)
    {
        _visible = false;
        switchMoviles = false;

        movilSalidaView.NumeroFactura = null;
        movilSalidaView.FechaFactura = null;
        movilSalidaView.TipoConbustible = null;
        movilSalidaView.CantidadLitros = null;
        movilSalidaView.QuienLleno = null;
    }

    private void OnChangeSwitch()
    {
        _visible = switchMoviles;
    }

    private async Task<List<BomberoViweModel>> FiltrarBomberosChoferesAsync(List<BomberoViweModel> bomberos)
    {
        if (bomberos == null || !bomberos.Any())
        {
            await MessageService.ErrorAsync("No hay bomberos disponibles para filtrar.");
            return new List<BomberoViweModel>(); // Retorna lista vacía para evitar errores
        }

        // Filtra los choferes y crea copias independientes de cada objeto
        var choferes = bomberos
            .Where(b => b.EsChofer)
            .ToList();


        if (!choferes.Any())
        {
            await MessageService.WarningAsync("No se encontraron bomberos con el rol de chofer.");
        }

        await MessageService.SuccessAsync("Bomberos choferes filtrados correctamente.");
        return choferes;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaView)}");
    }

    private async void DeleteRowMovil(string numeroMovil)
    {
        var movilToDelete = Model.Moviles.FirstOrDefault(m => m.Movil.NumeroMovil == numeroMovil);

        if (movilToDelete != null)
        {
            // Obtener el chofer y el móvil antes de eliminarlos de la lista
            var chofer = movilToDelete.Chofer;
            var movil = movilToDelete.Movil;

            var choferview = BomberosViewModelTodos.FirstOrDefault(b => b.NumeroLegajo == movilSalidaView.Chofer?.NumeroLegajo);

            // Eliminar el móvil de la lista
            Model.Moviles.Remove(movilToDelete);

            // Añadir el chofer nuevamente a la lista de choferes disponibles
            if (chofer != null && choferview != null)
            {
                bomberoChoferesSalir.Add(choferview);
            }

            // Añadir el móvil a la lista de móviles disponibles
            Moviles.Add(movil);

            // Notificar que el estado ha cambiado
            StateHasChanged();
        }
        else
        {
            await MessageService.ErrorAsync($"El móvil con número {numeroMovil} no fue encontrado.");
        }
    }

    private async Task AgregarMovilSalida()
    {
        try
        {
            Bombero? bomberoChofer = BomberosTodos.FirstOrDefault(b => b.NumeroLegajo == movilSalidaView.Chofer.NumeroLegajo);

            Movil? Movilsalida = Moviles.FirstOrDefault(m => m.NumeroMovil == movilSalidaView.NumeroMovil);

            if (bomberoChofer == null || Movilsalida == null)
            {
                await MessageService.ErrorAsync("No se encontraron los datos ingresados");
                return;
            }

            // Elimina el bombero y movil seleccionado de la lista
            bomberoChoferesSalir.RemoveAll(b => b.NumeroLegajo == bomberoChofer.NumeroLegajo);
            Moviles.RemoveAll(m => m.NumeroMovil == Movilsalida.NumeroMovil);

            string? QuienLleno = movilSalidaView.QuienLleno != null ? $"{movilSalidaView.QuienLleno.Apellido}, {movilSalidaView.QuienLleno.Nombre}" : null;

            // Crear el Objeto Movil Salida
            Movil_Salida m = new()
            {
                Movil = Movilsalida,
                CargoCombustible = switchMoviles,
                NumeroFactura = movilSalidaView.NumeroFactura,
                FechaFactura = movilSalidaView.FechaFactura,
                TipoConbustible = movilSalidaView.TipoConbustible,
                CantidadLitros = movilSalidaView.CantidadLitros,
                QuienLleno = QuienLleno,
                TelefonoQuienLleno = movilSalidaView.TelefonoQuienLleno,
                KmLlegada = movilSalidaView.KmLlegada,
                Chofer = bomberoChofer
            };

            // Añade el MovilSalida a la Salida
            Model.Moviles.Add(m);

            // Limpiar el formulario
            movilSalidaView = new MovilSalidaViewModels();
            switchMoviles = false;

            StateHasChanged(); // Notifica el Cambio y Actualiza
            await MessageService.SuccessAsync("Móvil añadido correctamente");
        }
        catch (Exception e)
        {
            StateHasChanged();
            await MessageService.ErrorAsync(e.InnerException?.Message ?? e.Message, 5);
        }
    }
}
