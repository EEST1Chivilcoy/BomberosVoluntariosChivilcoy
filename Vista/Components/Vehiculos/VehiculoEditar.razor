@using Vista.Services
@using System.Reflection
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Models.Vehiculos.Flota

@implements IDisposable
@inject IVehiculoService VehiculoService
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message

<link rel="stylesheet" href="css/EditarMovilEstilos.css">

<div style="width: 100%;">
    <Steps Current="current">
        @foreach (var item in steps)
        {
            <Step Title="@item.Title" Subtitle="@item.Content" />
        }
    </Steps>
    <div class="steps-content" style="height: 100%;width: 100%;padding-top: 0;border: none;">
        <div style="width: 100%;height: 100%; background: #fff;">
            @if (current == 0)
            {
                <div style="height: 22em;width: 100%;padding: 10px;">
                    <div class="inpt-container">
                        <input type="text" @bind="vehiculoView.Marca" placeholder="Marca: " />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="vehiculoView.Modelo" placeholder="Modelo: " />
                    </div>
                    <div class="inpt-container">
                        <input type="number" @bind="vehiculoView.Año" placeholder="Año: " />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="vehiculoView.Patente" placeholder="Patente: " />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="vehiculoView.Tipo" placeholder="Tipo: " />
                    </div>
                    <div class="inpt-container">
                        <input type="text" @bind="vehiculoView.Color" placeholder="Color: " />
                    </div>
                    <div class="inpt-container">
                        <label class="lblInputFile" for="fotoMovil"><Icon Type="cloud-upload" Theme="IconThemeType.Outline" Style="height: 14px;width: 14px;" />Cargar foto del móvil</label>
                        <InputFile OnChange="SubirFoto" id="fotoMovil" style="display: none;" />
                        <h3 id="path" style="display: inline-block;font-size:12px;">@imagenView.Nombre @* <Icon Type="eye" Theme="IconThemeType.Outline" /> *@</h3>
                    </div>
                </div>
            }
            else if (current == 1)
            {
                <div style="height: 30em;width: 100%;padding: 10px;">
                    <div class="inpt-container">
                        <input type="text" @bind="vehiculoView.NumeroMovil" placeholder="Nº del Móvil:" />
                    </div>
                    <div class="inpt-container">
                        Es un movil: <Switch @bind-Checked="@EsMovil" Value="@EsMovil" />
                    </div>
                    @if (EsMovil == true)
                    {
                        <div class="inpt-container">
                            <input type="text" @bind="movilView.NumeroMotor" placeholder="Nº Motor:" />
                        </div>
                        <div class="inpt-container">
                            <input type="text" @bind="movilView.NumeroChasis" placeholder="Nº Chasis:" />
                        </div>
                        <div class="inpt-container">
                            <input type="text" @bind="movilView.ModeloBomba" placeholder="Modelo de bomba:" />
                        </div>
                    }
                    <div class="inpt-container">
                        <select @bind="vehiculoView.Estado" class="select-estadoMovil">
                            <option value="@TipoEstadoMovil.Estado" selected disabled hidden>Seleccione estado del vehículo</option>
                            <option value="@TipoEstadoMovil.Activo">Activo</option>
                            <option value="@TipoEstadoMovil.Inactivo">Inactivo</option>
                            <option value="@TipoEstadoMovil.Reparacion">Reparación</option>
                            <option value="@TipoEstadoMovil.Limpieza">Limpieza</option>
                        </select>
                    </div>
                    <div class="inpt-container">
                        <Select TItem="BomberoViewModel"
                                TItemValue="int"
                                DataSource="@ListaBomberos"
                                Placeholder="Seleccione Bombero Encargado"
                                @bind-Value="@vehiculoView.EncargadoId"
                                LabelName="@nameof(BomberoViewModel.NombreYApellido)"
                                ValueName="@nameof(BomberoViewModel.PersonaId)"
                                DefaultValue="@vehiculoView.EncargadoId">
                        </Select>
                    </div>
                    

                </div>
            }

        </div>
    </div>
    <div class="steps-action">
        @if (current > 0)
        {
            <Button Class="boton_p" OnClick="OnPreClick">Anterior</Button>
        }
        @if (current < steps.Length - 1)
        {
            <Button Class="boton_p" OnClick="OnNextClick">Siguiente</Button>
        }
        @if (current == steps.Length - 1)
        {
            <Button Class="boton_guardar" @onclick="EditarMovil">
                Guardar
            </Button>
        }
    </div>
</div>

<style>
    .steps-content {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
    }

    .steps-action {
        margin-top: 24px;
    }
</style>
@code {
    [Parameter] public int VehiculoId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    BomberosDbContext? Context { get; set; }
    public VehiculoSalida vehiculo { get; set; }
    public VehiculoViewModel vehiculoView { get; set; } = new();
    public MovilViewModel movilView { get; set; } = new();
    public ImagenViewModel imagenView { get; set; } = new();
    public List<BomberoViewModel> ListaBomberos = new();
    bool EsMovil { get; set; }

    // View Models
    public class VehiculoViewModel
    {
        public string? Marca { get; set; }
        public string? Color { get; set; }
        public string? Modelo { get; set; }
        public int? Año { get; set; }
        public string? Patente { get; set; }
        public string? NombreYApellido { get; set; }
        public string? Tipo { get; set; }
        public string? NumeroMovil { get; set; }
        public TipoEstadoMovil Estado { get; set; }
        public int EncargadoId { get; set; }
    }
    public class MovilViewModel
    {
        public string? NumeroMotor { get; set; }
        public string? NumeroChasis { get; set; }
        public string? ModeloBomba { get; set; }
    }
    public class ImagenViewModel
    {
        public string? Base64 { get; set; }
        public string? TipoImagen { get; set; }
        public string? Nombre { get; set; }
    }
    public class BomberoViewModel
    {
        public string? Nombre { get; set; }
        public string? Apellido { get; set; }
        public string NombreYApellido { get { return Nombre + " " + Apellido; } }
        public int PersonaId { get; set; }
    }

    // Carga de datos

    private async Task CargarMovil()
    {

        vehiculo = await Context.Set<VehiculoSalida>().SingleOrDefaultAsync(v => v.VehiculoId == VehiculoId);

        if (vehiculo is not null)
        {
            vehiculoView.Marca = vehiculo.Marca;
            vehiculoView.Color = vehiculo.Color;
            vehiculoView.Modelo = vehiculo.Modelo;
            vehiculoView.Año = vehiculo.Año;
            vehiculoView.Patente = vehiculo.Patente;
            vehiculoView.Tipo = vehiculo.Tipo;
            vehiculoView.NumeroMovil = vehiculo.NumeroMovil;
            if (vehiculo is Movil)
            {
                EsMovil = true;
                var movil = (Movil)vehiculo;
                movilView.NumeroMotor = movil.NumeroMotor;
                movilView.NumeroChasis = movil.NumeroChasis;
                movilView.ModeloBomba = movil.ModeloBomba;
            }
            vehiculoView.Estado = vehiculo.Estado;
            if (!string.IsNullOrEmpty(imagenView.Base64))
            {
                imagenView.Nombre = vehiculo.Imagen.NombreImagen;
                imagenView.TipoImagen = vehiculo.Imagen.TipoImagen;
                imagenView.Base64 = vehiculo.Imagen.Base64Imagen;
            }
            vehiculoView.NombreYApellido = vehiculo.Encargado != null ? vehiculo.Encargado.Nombre + " " + vehiculo.Encargado.Apellido : "";
            StateHasChanged();
        }
    }

    public async void EditarMovil()
    {
        try
        {
            if (vehiculoView.NumeroMovil is not null)
            {
                VehiculoSalida? comprobante = await Context.Set<VehiculoSalida>().SingleOrDefaultAsync(v => v.NumeroMovil == vehiculoView.NumeroMovil);
                Bombero? EncargadoNew = await Context.Bomberos.SingleOrDefaultAsync(b => b.PersonaId == vehiculoView.EncargadoId);

                if (comprobante != null && vehiculoView.NumeroMovil != vehiculo.NumeroMovil)
                {
                    message.Error("Existe un vehiculo con el mismo Nº Móvil");
                    return;
                }
                if (string.IsNullOrEmpty(imagenView.Base64))
                {
                    message.Warning("No se ingreso una foto del vehiculo");
                }
                Embarcacion vehiculoNew = new Embarcacion()
                    {
                        VehiculoId = VehiculoId,
                        Marca = vehiculoView.Marca,
                        Color = vehiculoView.Color,
                        Modelo = vehiculoView.Modelo,
                        Año = vehiculoView.Año,
                        Patente = vehiculoView.Patente,
                        Tipo = vehiculoView.Tipo,
                        Encargado = EncargadoNew != null ? EncargadoNew : vehiculo.Encargado,
                        Imagen = string.IsNullOrEmpty(imagenView.Base64) ? null : new()
                        {
                            NombreImagen = imagenView.Nombre,
                            TipoImagen = imagenView.TipoImagen,
                            Base64Imagen = imagenView.Base64
                        },
                        NumeroMovil = vehiculoView.NumeroMovil,
                        Estado = vehiculoView.Estado,
                    };
                if (EsMovil == true)
                {
                    Movil movil = Convertir<Movil>(vehiculoNew);
                    movil.NumeroMotor = movilView.NumeroMotor;
                    movil.NumeroChasis = movilView.NumeroChasis;
                    movil.ModeloBomba = movilView.ModeloBomba;
                    await VehiculoService.EditarVehiculo(movil);
                }
                else
                {
                    await VehiculoService.EditarVehiculo(vehiculoNew);
                }
                StateHasChanged();
                await Init();
                await OnClose.InvokeAsync();
                await message.SuccessAsync("Se logro editar correctamente");
            }
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.ErrorAsync(e.InnerException.Message, 5);
            else
                await message.ErrorAsync(e.Message, 5);
        }
    }


    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        if (e == null) return;
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenView.Base64 = imagenBase64;
        imagenView.TipoImagen = e.File.ContentType;
        imagenView.Nombre = e.File.Name;

        await message.SuccessAsync("Imagen cargada");
        StateHasChanged();
    }

    private async Task CargarBomberosView()
    {
        ListaBomberos = new();
        var bomberos = await Context.Bomberos.ToListAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel Bvm = new()
                {
                    Apellido = b.Apellido,
                    Nombre = b.Nombre
                };
            ListaBomberos.Add(Bvm);
        }
    }
    public class StepItem
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public int current { get; set; } = 0;

    public StepItem[] steps =
    {
        new StepItem {Title = "Básico"},
        new StepItem {Title = "Datos"},
    };

    void OnPreClick()
    {
        current--;
    }

    void OnNextClick()
    {
        current++;
    }

    // Convertir a Móvil
    private T Convertir<T>(object source) where T : new()
    {
        T movil = new T();
        PropertyInfo[] Propiedades = typeof(T).GetProperties();

        foreach (PropertyInfo PropModificar in Propiedades)
        {
            PropertyInfo PropValor = source.GetType().GetProperty(PropModificar.Name);
            if (PropValor != null && PropValor.PropertyType == PropModificar.PropertyType)
            {
                PropModificar.SetValue(movil, PropValor.GetValue(source));
            }
        }

        return movil;
    }

    // Otros

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        movilView = new();
        imagenView = new();
        Context = DbFactory.CreateDbContext();

        await CargarMovil();
        await CargarBomberosView();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}