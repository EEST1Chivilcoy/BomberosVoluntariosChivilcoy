﻿@using Vista.Services
@using System.Reflection
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Models.Vehiculos.Flota
@inject IVehiculoService VehiculoService
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@inject IJSRuntime jsRuntime


<link rel="stylesheet" href="css/AgregarVehiculosEstilos.css">

@if (movilView is not null)
{
    <div class="modal-content-container">
        <div class="agregar-vehiculo-wrapper">
            <div class="image-preview-column">
                <Card Class="image-preview-card" BodyStyle="padding:0;">
                    @if (!string.IsNullOrEmpty(imagenView.Base64))
                    {
                        <img src="data:@imagenView.TipoImagen;base64,@imagenView.Base64" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: contain;" />
                    }
                    else
                    {
                        <div class="no-image-placeholder">
                            <Icon Type="picture" Theme="IconThemeType.Outline" Style="font-size: 48px;" />
                            <span>Ninguna foto seleccionada</span>
                        </div>
                    }
                </Card>
                <div class="upload-container">
                    <label class="lblInputFile" for="fotoMovil">
                        <Icon Type="cloud-upload" Theme="IconThemeType.Outline" Style="width: 20px; height: 20px;" /> 
                        Cargar foto del móvil
                    </label>
                    <InputFile OnChange="SubirFoto" id="fotoMovil" accept=".jpg,.jpeg,.png" style="display: none;" />
                    <h3 id="path">@imagenView.Nombre</h3>
                </div>
            </div>

            <div class="steps-and-form-column">
                <Steps Current="current" Direction="StepsDirection.Horizontal">
                    @foreach (var item in steps)
                    {
                        <Step Title="@item.Title" Description="@item.Content" />
                    }
                </Steps>
                <div class="steps-content">
                    @if (current == 0)
                    {
                        <div class="form-section">
                            <div class="inpt-container">
                                <label for="numero-movil-input">Marca</label>
                                <Input Size="InputSize.Large" Placeholder="Marca" @bind-Value="@vehiculoView.Marca" AllowClear />
                            </div>
                            <div class="inpt-container">
                                <label for="numero-movil-input">Modelo</label>
                                <Input Size="InputSize.Large" Placeholder="Modelo" @bind-Value="@vehiculoView.Modelo" AllowClear />
                            </div>
                            <div class="inpt-container">
                                <label for="numero-movil-input">Año</label>
                                <Input Size="InputSize.Large" Placeholder="Año" @bind-Value="@vehiculoView.Año" Min="1900" Max="@DateTime.Now.Year" AllowClear />
                            </div>
                            <div class="inpt-container">
                                <label for="numero-movil-input">Patente</label>
                                <Input Size="InputSize.Large" Placeholder="Patente" @bind-Value="@vehiculoView.Patente" AllowClear />
                            </div>
                            <div class="inpt-container">
                                <label for="numero-movil-input">Tipo</label>
                                <Input Size="InputSize.Large" Placeholder="Tipo" @bind-Value="@vehiculoView.Tipo" AllowClear />
                            </div>
                            <div class="inpt-container">
                                <label for="combustible-input">Combustible</label>
                                <Input Size="InputSize.Large" Placeholder="Combustible" @bind-Value="@vehiculoView.Combustible" AllowClear id="combustible-input" />
                            </div>
                            <div>
                                <label for="fecha-ultimo-service-date-picker">Fecha del último service</label>
                                <DatePicker Size="InputSize.Large" Placeholder="@("Fecha del último service")" @bind-Value="@vehiculoView.FechaUltimoService" id="fecha-ultimo-service-date-picker" />
                            </div>
                            <div>
                                <label for="fecha-proximo-service-date-picker">Fecha del próximo service</label>
                                <DatePicker Size="InputSize.Large" Placeholder="@("Fecha del próximo service")" @bind-Value="@vehiculoView.FechaProximoService" id="fecha-proximo-service-date-picker" />
                            </div>
                            <div class="inpt-container">
                                <label for="observaciones-textarea">Observaciones</label>
                                <TextArea Size="InputSize.Large" Placeholder="Observaciones" @bind-Value="@vehiculoView.Observaciones" AllowClear id="observaciones-textarea" />
                            </div>
                        </div>
                    }
                    else if (current == 1)
                    {
                        <div class="form-section">
                            <div class="inpt-container">
                                <label for="numero-movil-input">Nº Móvil</label>
                                <Input Size="InputSize.Large" Placeholder="Nº Móvil" @bind-Value="@vehiculoView.NumeroMovil" AllowClear id="numero-movil-input" />
                            </div>
                            <div class="inpt-container" style="display: flex; flex-direction: column;">
                                    <div style="display: flex; flex-direction: column; justify-content: flex-end; align-items: center; white-space: nowrap; margin-bottom: 2px;">
                                        <span>Es una Embarcación:</span>
                                        <Switch @bind-Checked="@EsEmbarcacion" CheckedChildren="Sí" UnCheckedChildren="No" />
                                    </div>
                            </div>
                            
                            @if (!EsEmbarcacion)
                            {
                                <div class="inpt-container">
                                    <label for="numero-motor-input">Nº Motor</label>
                                    <Input Size="InputSize.Large" Placeholder="Nº Motor" @bind-Value="@movilView.NumeroMotor" AllowClear id="numero-motor-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="numero-chasis-input">Nº Chasis</label>
                                    <Input Size="InputSize.Large" Placeholder="Nº Chasis" @bind-Value="@movilView.NumeroChasis" AllowClear id="numero-chasis-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="modelo-bomba-input">Modelo de bomba</label>
                                    <Input Size="InputSize.Large" Placeholder="Modelo de bomba" @bind-Value="@movilView.ModeloBomba" AllowClear id="modelo-bomba-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="cantidad-litros-input">Cantidad de litros</label>
                                    <AntDesign.InputNumber Size="InputSize.Large" Placeholder="Cantidad de litros" @bind-Value="@movilView.CantidadLitros" Min="0" id="cantidad-litros-input"></AntDesign.InputNumber>
                                </div>
                                <div class="inpt-container">
                                    <label for="tipo-aceite-input">Tipo de aceite</label>
                                    <Input Size="InputSize.Large" Placeholder="Tipo de aceite" @bind-Value="@movilView.TipoAceite" AllowClear id="tipo-aceite-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="marca-aceite-input">Marca de aceite</label>
                                    <Input Size="InputSize.Large" Placeholder="Marca de aceite" @bind-Value="@movilView.MarcaAceite" AllowClear id="marca-aceite-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="cantidad-aceite-input">Cantidad de aceite</label>
                                    <AntDesign.InputNumber Size="InputSize.Large" Placeholder="Cantidad de aceite" @bind-Value="@movilView.CantidadAceite" Min="0" id="cantidad-aceite-input"></AntDesign.InputNumber>
                                </div>
                                <div class="inpt-container">
                                    <label for="modelo-filtro-aire-input">Modelo de filtro de aire</label>
                                    <Input Size="InputSize.Large" Placeholder="Modelo de filtro de aire" @bind-Value="@movilView.ModeloFiltroAire" AllowClear id="modelo-filtro-aire-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="medidas-cubiertas-input">Medidas de cubiertas</label>
                                    <Input Size="InputSize.Large" Placeholder="Medidas de cubiertas" @bind-Value="@movilView.MedidasCubiertas" AllowClear id="medidas-cubiertas-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="libras-cubiertas-input">Libras de cubiertas</label>
                                    <Input Size="InputSize.Large" Placeholder="Libras de cubiertas" @bind-Value="@movilView.LibrasCubiertas" AllowClear id="libras-cubiertas-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="caja-velocidades-select">Caja de velocidades</label>
                                    <EnumSelect TEnum="TipoCajaVelocidades" Size="InputSize.Large" Placeholder="Seleccione tipo de caja de velocidades" @bind-Value="movilView.CajaVelocidades" id="caja-velocidades-select" />
                                </div>
                                <div class="inpt-container">
                                    <label for="tension-electrica-select">Tensión eléctrica</label>
                                    <EnumSelect TEnum="TipoTension" Size="InputSize.Large" Placeholder="Seleccione tipo de tensión eléctrica" @bind-Value="movilView.TensionCElectrico" id="tension-electrica-select" />
                                </div>
                                <div class="inpt-container">
                                    <label for="tipo-direccion-select">Tipo de dirección</label>
                                    <EnumSelect TEnum="TipoDireccionUnidades" Size="InputSize.Large" Placeholder="Seleccione tipo de dirección" @bind-Value="movilView.TipoDireccion" id="tipo-direccion-select" />
                                </div>
                                <div class="inpt-container">
                                    <label for="marca-bateria-input">Marca de batería</label>
                                    <Input Size="InputSize.Large" Placeholder="Marca de batería" @bind-Value="@movilView.MarcaBateria" AllowClear id="marca-bateria-input" />
                                </div>
                                <div class="inpt-container">
                                    <label for="fecha-cambio-bateria-date-picker">Fecha del último cambio de batería</label>
                                    <DatePicker Size="InputSize.Large" Placeholder="@("Fecha del último cambio de batería")" @bind-Value="@movilView.FechaUltimoCambioBateria" id="fecha-cambio-bateria-date-picker" />
                                </div>
                            }
                            <div class="inpt-container">
                                <label for="estado-select">Estado del vehículo</label>
                                <EnumSelect TEnum="TipoEstadoMovil" Size="InputSize.Large" Placeholder="Seleccione estado del vehículo" @bind-Value="vehiculoView.Estado" id="estado-select" />
                            </div>
                            <div class="inpt-container">
                                <label for="bombero-encargado-select">Bombero encargado</label>
                                <Select TItem="BomberoViewModel" TItemValue="int" DataSource="@ListaBomberos" @bind-Value="@vehiculoView.EncargadoId" LabelName="@nameof(BomberoViewModel.NombreYApellido)" ValueName="@nameof(BomberoViewModel.PersonaId)" Placeholder="Seleccione el bombero encargado" Size="InputSize.Large" DefaultActiveFirstOption="false" AllowClear EnableSearch id="bombero-encargado-select">
                                </Select>
                            </div>
                        </div>
                    }
                </div>
                <div class="steps-action">
                    @if (current > 0)
                    {
                        <Button Class="btn-secondary" OnClick="OnPreClick"><Icon Type="left" /> Anterior </Button>
                    }

                    @if (current < steps.Length - 1)
                    {
                        <Button Class="btn-primary" OnClick="OnNextClick"><Icon Type="right" /> Siguiente </Button>
                    }

                    @if (current == steps.Length - 1)
                    {
                        <Button Class="btn-success" OnClick="SubirVehiculo" Loading="@isLoading"> <Icon Type="save" /> Guardar Vehículo
                        </Button>
                    }
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter] public EventCallback OnClose { get; set; }
    BomberosDbContext Context { get; set; }
    public ImagenViewModel imagenView { get; set; } = new();
    public VehiculoViewModel vehiculoView { get; set; } = new();
    public MovilViewModel movilView { get; set; } = new();
    public List<BomberoViewModel> ListaBomberos = new();
    public bool EsEmbarcacion = false;

    private bool isLoading = false;
    // Funciones Steps
    public class StepItem
    {
        public string Title { get; set; } = null!;
        public string? Content { get; set; }
        public string Icon { get; set; } = null!;
    }

    public int current { get; set; } = 0;

    public StepItem[] steps =
    {
        new StepItem {Title = "Datos Básicos del Vehículo"},
        new StepItem {Title = "Asignación de Detalles del Vehículo"},
    };

    void OnPreClick()
    {
        current--;
    }

    void OnNextClick()
    {
        current++;
    }

    // View Models
    public class VehiculoViewModel
    {
        public string? Marca { get; set; }
        public string? Modelo { get; set; }
        public int? Año { get; set; }
        public string? Patente { get; set; }
        public string? Tipo { get; set; }
        public string? NumeroMovil { get; set; }
        public TipoEstadoMovil Estado { get; set; }
        public int EncargadoId { get; set; }
        public string? Combustible { get; set;}
        public DateTime? FechaUltimoService { get; set; }
        public DateTime? FechaProximoService { get; set; }
        public string? Observaciones { get; set; }
    }

    public class MovilViewModel
    {
        public string? NumeroMotor { get; set; }
        public string? NumeroChasis { get; set; }
        public string? ModeloBomba { get; set; }
        public int? CantidadLitros { get; set; }
        public string? TipoAceite { get; set; }
        public string? MarcaAceite { get; set; }
        public int? CantidadAceite { get; set; }
        public string? ModeloFiltroAire { get; set; }
        public string? MedidasCubiertas { get; set; }
        public string? LibrasCubiertas { get; set; }
        public TipoCajaVelocidades CajaVelocidades { get; set; }
        public TipoTension TensionCElectrico { get; set; }
        public TipoDireccionUnidades TipoDireccion { get; set; }
        public string? MarcaBateria { get; set; }
        public DateTime? FechaUltimoCambioBateria { get; set; }
    }

    public class ImagenViewModel
    {
        public string? Base64 { get; set; }
        public string? TipoImagen { get; set; }
        public string? Nombre { get; set; }
    }

    public class BomberoViewModel
    {
        public string? Nombre { get; set; }
        public string? Apellido { get; set; }
        public string NombreYApellido { get { return Nombre + " " + Apellido; } }
        public int PersonaId { get; set; }
    }

    // Carga de datos

    private async Task SubirFoto(InputFileChangeEventArgs e)
    {
        try
        {
            var archivo = e.File;

            // Validar el tamaño del archivo (máximo 5MB)
            const long maxSizeInBytes = 5 * 1024 * 1024; // 5 MB
            if (archivo.Size > maxSizeInBytes)
            {
                await message.ErrorAsync("El archivo no debe superar los 5MB");
                return;
            }

            // Validar el tipo de archivo permitido
            string[] allowedExtensions = { ".jpg", ".jpeg", ".png" };
            string extension = Path.GetExtension(archivo.Name).ToLower();
            if (!allowedExtensions.Contains(extension))
            {
                await message.ErrorAsync("Solo se permiten archivos JPG, JPEG o PNG");
                return;
            }

            // Convertir el archivo a Base64
            string imagenBase64 = await Base64Helper.StreamToBase64(archivo.OpenReadStream());

            // Asignar los valores a la vista de la imagen
            imagenView.Base64 = imagenBase64;
            imagenView.TipoImagen = archivo.ContentType;
            imagenView.Nombre = archivo.Name;

            // Mostrar mensaje de éxito
            await message.SuccessAsync("Imagen cargada exitosamente");

            // Actualizar el estado del componente
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Manejar errores y mostrar un mensaje
            await message.ErrorAsync($"Error al procesar la imagen: {ex.Message}");
        }
    }

    private async void SubirVehiculo()
    {
        try
        {
            if (vehiculoView is not null)
            {
                Bombero? Encargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.PersonaId == vehiculoView.EncargadoId);
                //Validaciones
                VehiculoSalida? comprobante = await Context.Set<VehiculoSalida>().Where(e => e.NumeroMovil == vehiculoView.NumeroMovil).SingleOrDefaultAsync();
                if (comprobante != null)
                {
                    await message.ErrorAsync("Existe un vehiculo con el mismo Nº Móvil");
                    return;
                }
                if (string.IsNullOrEmpty(imagenView.Base64))
                {
                    await message.WarningAsync("No se ingreso una foto del vehiculo");
                }
                // Se crea una embarcación ya que VehiculoSalida es abstracta
                Embarcacion vehiculo = new Embarcacion()
                    {
                        Marca = vehiculoView.Marca,
                        Modelo = vehiculoView.Modelo,
                        Año = vehiculoView.Año,
                        Patente = vehiculoView.Patente,
                        Tipo = vehiculoView.Tipo,
                        Encargado = Encargado,
                        Combustible = vehiculoView.Combustible,
                        FechaUltimoService = vehiculoView.FechaUltimoService,
                        FechaProximoService = vehiculoView.FechaProximoService,
                        Observaciones = vehiculoView.Observaciones,
                        Imagen = string.IsNullOrEmpty(imagenView.Base64) ? null : new()
                        {
                            NombreImagen = imagenView.Nombre,
                            TipoImagen = imagenView.TipoImagen,
                            Base64Imagen = imagenView.Base64
                        },
                        NumeroMovil = vehiculoView.NumeroMovil,
                        Estado = vehiculoView.Estado == TipoEstadoMovil.Estado ? TipoEstadoMovil.Activo : vehiculoView.Estado,
                    };

                if (EsEmbarcacion == false)
                {
                    Movil movil = Convertir<Movil>(vehiculo);
                    movil.NumeroMotor = movilView.NumeroMotor;
                    movil.NumeroChasis = movilView.NumeroChasis;
                    movil.ModeloBomba = movilView.ModeloBomba;
                    movil.CantidadLitros = movilView.CantidadLitros;
                    movil.TipoAceite = movilView.TipoAceite;
                    movil.MarcaAceite = movilView.MarcaAceite;
                    movil.CantidadAceite = movilView.CantidadAceite;
                    movil.ModeloFiltroAire = movilView.ModeloFiltroAire;
                    movil.MedidasCubiertas = movilView.MedidasCubiertas;
                    movil.LibrasCubiertas = movilView.LibrasCubiertas;
                    movil.CajaVelocidades = movilView.CajaVelocidades;
                    movil.TensionCElectrico = movilView.TensionCElectrico;
                    movil.TipoDireccion = movilView.TipoDireccion;
                    movil.MarcaBateria = movilView.MarcaBateria;
                    movil.FechaUltCambioBateria = movilView.FechaUltimoCambioBateria;
                    await VehiculoService.AgregarVehiculo(movil);
                }
                else
                {
                    await VehiculoService.AgregarVehiculo(vehiculo);
                }

                await message.SuccessAsync("Se agrego el movil");

                StateHasChanged();

                await Init();
                await OnClose.InvokeAsync();
            }
        }

        catch (Exception e)
        {
            StateHasChanged();
            await Init();

            if (e.InnerException != null)
            {
                await message.ErrorAsync("Información de movil ausente u ocurrio un error inesperado");
                Console.WriteLine(e.InnerException.Message);
            }

            else
            {
                await message.ErrorAsync(("Error inesperado: " + e.Message), 5);
                Console.WriteLine(e.Message);
            }
        }
    }

    private async Task CargarBomberosView()
    {
        ListaBomberos = new();
        var bomberos = await Context.Bomberos.ToListAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel Bvm = new()
                {
                    Apellido = b.Apellido,
                    Nombre = b.Nombre,
                    PersonaId = b.PersonaId

                };
            ListaBomberos.Add(Bvm);
        }
    }

    // Convertir a Móvil
    private T Convertir<T>(object source) where T : new()
    {
        T movil = new T();
        PropertyInfo[] Propiedades = typeof(T).GetProperties();

        foreach (PropertyInfo PropModificar in Propiedades)
        {
            PropertyInfo PropValor = source.GetType().GetProperty(PropModificar.Name);
            if (PropValor != null && PropValor.PropertyType == PropModificar.PropertyType)
            {
                PropModificar.SetValue(movil, PropValor.GetValue(source));
            }
        }

        return movil;
    }

    // Otros
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        await CargarBomberosView();
    }
}