@using Vista.Services
@using System.Reflection
@using Vista.Data.Models.Vehiculos.Moviles

@inject IVehiculoService VehiculoService
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@inject IJSRuntime jsRuntime

<style>
    /* Variables CSS para consistencia */
    :root {
        --primary-color: #732D2D;
        --primary-hover: #8B3737;
        --secondary-color: #1890ff;
        --secondary-hover: #40a9ff;
        --border-radius: 8px;
        --spacing-sm: 8px;
        --spacing-md: 16px;
        --spacing-lg: 24px;
    }

    .modal-content-container {
        padding: var(--spacing-md);
    }

    .steps-content {
        border: none !important;
        margin-bottom: var(--spacing-lg);
        min-height: 400px;
    }

    .form-section {
        display: grid;
        gap: var(--spacing-md);
        padding: var(--spacing-md) 0;
    }

    .inpt-container {
        margin-bottom: var(--spacing-md);
    }

    /* Estilos mejorados para el upload */
    .upload-container {
        border: 2px dashed #d9d9d9;
        border-radius: var(--border-radius);
        background-color: #fafafa;
        transition: border-color 0.3s;
    }

        .upload-container:hover {
            border-color: var(--secondary-color);
        }

    .ant-upload.ant-upload-select-picture-card {
        width: 100%;
        max-width: 300px;
        height: 200px;
        margin: 0 auto;
        background-color: #fafafa;
        border: 2px dashed #d9d9d9;
        border-radius: var(--border-radius);
        cursor: pointer;
        transition: all 0.3s;
    }

        .ant-upload.ant-upload-select-picture-card:hover {
            border-color: var(--secondary-color);
            background-color: #f0f0f0;
        }

    /* Estilos para los botones */
    .steps-action {
        display: flex;
        justify-content: flex-end;
        gap: var(--spacing-md);
        margin-top: var(--spacing-lg);
    }

    .ant-btn.boton_p {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 24px;
        border-radius: var(--border-radius);
        transition: background-color 0.3s;
    }

        .ant-btn.boton_p:hover {
            background-color: var(--primary-hover);
        }

    .ant-btn.boton_guardar {
        background-color: var(--secondary-color);
        color: white;
        border: none;
        padding: 8px 24px;
        border-radius: var(--border-radius);
        transition: background-color 0.3s;
    }

        .ant-btn.boton_guardar:hover {
            background-color: var(--secondary-hover);
        }

    /* Estilos responsivos */
    @@media (max-width: 768px) {
        .modal-content-container {
            padding: var(--spacing-sm);
        }

        .steps-action {
            flex-direction: column;
            align-items: stretch;
        }

        .ant-btn {
            width: 100%;
            margin-bottom: var(--spacing-sm);
        }
    }

    /* Estilos para el preview de imagen */
    .image-preview {
        max-width: 100%;
        border-radius: var(--border-radius);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
</style>

@if (movilView is not null)
{
    <div class="modal-content-container">

        <Steps Current="current">
            @foreach (var item in steps)
            {
                <Step Title="@item.Title" Description="@item.Content" />
            }
        </Steps>

        <div class="steps-content">
            @if (current == 0)
            {
                <div class="form-section">
                    <div class="inpt-container">
                        <Input Size="large" Placeholder="Marca" @bind-Value="@vehiculoView.Marca"
                               AllowClear />
                    </div>

                    <div class="inpt-container">
                        <Input Size="large" Placeholder="Modelo" @bind-Value="@vehiculoView.Modelo"
                               AllowClear />
                    </div>

                    <div class="inpt-container">
                        <AntDesign.InputNumber Size="InputSize.Large" Placeholder="Año" @bind-Value="@vehiculoView.Año"
                                               Min="1900" Max="@DateTime.Now.Year"></AntDesign.InputNumber>
                    </div>

                    <div class="inpt-container">
                        <Input Size="large" Placeholder="Patente" @bind-Value="@vehiculoView.Patente"
                               AllowClear />
                    </div>

                    <div class="inpt-container">
                        <Input Size="large" Placeholder="Tipo" @bind-Value="@vehiculoView.Tipo"
                               AllowClear />
                    </div>

                    <div class="inpt-container">
                        <Input Size="large" Placeholder="Color" @bind-Value="@vehiculoView.Color"
                               AllowClear />
                    </div>

                    <div class="upload-container">
                        <Upload Name="vehiculo-foto"
                                Accept=".jpg,.jpeg,.png"
                                ShowUploadList="true"
                                ShowPreviewIcon="true"
                                ShowRemoveIcon="true"
                                @bind-FileList="fileList"
                                ShowButton="fileList?.Count < 1"
                                ListType="UploadListType.PictureCard"
                                BeforeUpload="OnBeforeUpload"
                                OnRemove="OnRemove"
                                OnPreview="HandlePreview">
                            <div>
                                <Icon Type="upload" Theme="outline" />
                                <div style="margin-top: 8px;">Cargar foto del vehículo</div>
                                <div style="margin-top: 4px; color: #888;">
                                    (JPG, JPEG o PNG)
                                </div>
                            </div>
                        </Upload>
                    </div>
                </div>
            }
            else if (current == 1)
            {
                <div class="form-section">
                    <div class="inpt-container">
                        <Input Size="large" Placeholder="Nº Móvil" @bind-Value="@vehiculoView.NumeroMovil"
                               AllowClear />
                    </div>

                    <div class="inpt-container">
                        <Space>
                            <SpaceItem>Es un móvil:</SpaceItem>
                            <SpaceItem>
                                <Switch @bind-Checked="@EsMovil"
                                        CheckedChildren="Sí"
                                        UnCheckedChildren="No" />
                            </SpaceItem>
                        </Space>
                    </div>

                    @if (EsMovil)
                    {
                        <div class="inpt-container">
                            <Input Size="large" Placeholder="Nº Motor" @bind-Value="@movilView.NumeroMotor"
                                   AllowClear />
                        </div>

                        <div class="inpt-container">
                            <Input Size="large" Placeholder="Nº Chasis" @bind-Value="@movilView.NumeroChasis"
                                   AllowClear />
                        </div>

                        <div class="inpt-container">
                            <Input Size="large" Placeholder="Modelo de bomba" @bind-Value="@movilView.ModeloBomba"
                                   AllowClear />
                        </div>

                        <div class="inpt-container">

                            <AntDesign.InputNumber Size="InputSize.Large"
                                                   Placeholder="Cantidad de litros"
                                                   @bind-Value="@movilView.CantidadLitros"
                                                   Min="0"></AntDesign.InputNumber>

                        </div>
                    }

                    <div class="inpt-container">
                        <EnumSelect TEnum="TipoEstadoMovil"
                                    @bind-Value="vehiculoView.Estado"
                                    Size="large"
                                    Placeholder="Seleccione estado del vehículo" />
                    </div>

                    <div class="inpt-container">
                        <Select TItem="BomberoViewModel"
                                TItemValue="int"
                                DataSource="@ListaBomberos"
                                @bind-Value="@vehiculoView.EncargadoId"
                                LabelName="@nameof(BomberoViewModel.NombreYApellido)"
                                ValueName="@nameof(BomberoViewModel.PersonaId)"
                                Placeholder="Seleccione el bombero encargado"
                                Size="large"
                                DefaultActiveFirstOption="false"
                                AllowClear
                                EnableSearch>
                        </Select>
                    </div>
                </div>
            }
        </div>

        <div class="steps-action">
            @if (current > 0)
            {
                <Button Class="boton_p" OnClick="OnPreClick">
                    <Icon Type="left" /> Anterior
                </Button>
            }

            @if (current < steps.Length - 1)
            {
                <Button Class="boton_p" OnClick="OnNextClick">
                    Siguiente <Icon Type="right" />
                </Button>
            }

            @if (current == steps.Length - 1)
            {
                <Button Class="boton_guardar" OnClick="SubirVehiculo"
                        Loading="@isLoading">
                    <Icon Type="save" /> Guardar Vehículo
                </Button>
            }
        </div>
    </div>

    <Modal Visible="previewVisible"
           Title="@previewTitle"
           OnCancel="() => previewVisible = false"
           Footer="null">
        <img alt="preview" class="image-preview" src="@imgUrl" />
    </Modal>
}

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    BomberosDbContext Context { get; set; }
    public ImagenViewModel imagenView { get; set; } = new();
    public VehiculoViewModel vehiculoView { get; set; } = new();
    public MovilViewModel movilView { get; set; } = new();
    public List<BomberoViewModel> ListaBomberos = new();
    public bool EsMovil = false;

    // Cosa Nueva para Usar Ant Desing Blazor para Cargar la Imagen
    private bool isLoading = false;

    private async Task HandlePreview(UploadFileItem file)
    {
        previewVisible = true;
        previewTitle = file.FileName;
        imgUrl = file.Url;
    }

    bool previewVisible = false;
    string previewTitle = string.Empty;
    string imgUrl = string.Empty;
    List<UploadFileItem> fileList = new();

    private bool OnBeforeUpload(UploadFileItem fileInfo)
    {
        if (fileInfo.State == UploadState.Success)
        {
            try
            {       
                // Validar el tamaño del archivo (ejemplo: máximo 5MB)
                if (fileInfo.Size > 5 * 1024 * 1024)
                {
                    message.Error("El archivo no debe superar los 5MB").Wait(); // Manejo síncrono
                    return false;
                }

                // Validar el tipo de archivo
                string[] allowedTypes = { ".jpg", ".jpeg", ".png" };
                string extension = Path.GetExtension(fileInfo.FileName).ToLower();
                if (!allowedTypes.Contains(extension))
                {
                    message.Error("Solo se permiten archivos JPG, JPEG o PNG").Wait(); // Manejo síncrono
                    return false;
                }

                // Obtener Base64 desde el ObjectURL utilizando JavaScript
                var base64 = Task.Run(async () =>
                {
                    return await jsRuntime.InvokeAsync<string>("readBlobAsBase64", fileInfo.ObjectURL);
                }).Result;

                imagenView.Base64 = base64;
                imagenView.TipoImagen = fileInfo.Type;
                imagenView.Nombre = fileInfo.FileName;
                fileInfo.Url = fileInfo.ObjectURL;

                message.Success("Imagen cargada exitosamente").Wait();
                StateHasChanged();

                return true;
            }
            catch (Exception ex)
            {
                message.Error($"Error al procesar la imagen: {ex.Message}").Wait();
                fileInfo.State = UploadState.Fail;
                return false;
            }
        }
        return false;
    }


    private async Task<bool> OnRemove(UploadFileItem file)
    {
        imagenView = new ImagenViewModel();
        await message.Info("Imagen eliminada");
        return true;
    }

    // Funciones Steps
    public class StepItem
    {
        public string Title { get; set; } = null!;
        public string? Content { get; set; }
        public string Icon { get; set; } = null!;
    }

    public int current { get; set; } = 0;

    public StepItem[] steps =
    {
        new StepItem {Title = "Datos Básicos del Vehículo"},
        new StepItem {Title = "Asignación de Detalles del Vehículo"},
    };

    void OnPreClick()
    {
        current--;
    }

    void OnNextClick()
    {
        current++;
    }

    // View Models
    public class VehiculoViewModel
    {
        public string? Marca { get; set; }

        public string? Color { get; set; }

        public string? Modelo { get; set; }

        public int? Año { get; set; }

        public string? Patente { get; set; }

        public string? Tipo { get; set; }

        public string? NumeroMovil { get; set; }

        public TipoEstadoMovil Estado { get; set; }

        public int EncargadoId { get; set; }
    }

    public class MovilViewModel
    {
        public string? NumeroMotor { get; set; }

        public string? NumeroChasis { get; set; }

        public string? ModeloBomba { get; set; }

        public int? CantidadLitros { get; set; }
    }

    public class ImagenViewModel
    {
        public string? Base64 { get; set; }

        public string? TipoImagen { get; set; }

        public string? Nombre { get; set; }
    }

    public class BomberoViewModel
    {
        public string? Nombre { get; set; }

        public string? Apellido { get; set; }

        public string NombreYApellido { get { return Nombre + " " + Apellido; } }

        public int PersonaId { get; set; }
    }

    // Carga de datos

    private async void SubirVehiculo()
    {
        try
        {
            if (vehiculoView is not null)
            {
                Bombero? Encargado = await Context.Bomberos.SingleOrDefaultAsync(b => b.PersonaId == vehiculoView.EncargadoId);
                //Validaciones
                VehiculoSalida? comprobante = await Context.Set<VehiculoSalida>().Where(e => e.NumeroMovil == vehiculoView.NumeroMovil).SingleOrDefaultAsync();
                if (comprobante != null)
                {
                    await message.Error("Existe un vehiculo con el mismo Nº Móvil");
                    return;
                }
                if (string.IsNullOrEmpty(imagenView.Base64))
                {
                    await message.Warning("No se ingreso una foto del vehiculo");
                }
                // Se crea una embarcación ya que VehiculoSalida es abstracta
                Embarcacion vehiculo = new Embarcacion()
                    {
                        Marca = vehiculoView.Marca,
                        Color = vehiculoView.Color,
                        Modelo = vehiculoView.Modelo,
                        Año = vehiculoView.Año,
                        Patente = vehiculoView.Patente,
                        Tipo = vehiculoView.Tipo,
                        Encargado = Encargado,
                        Imagen = string.IsNullOrEmpty(imagenView.Base64) ? null : new()
                        {
                            NombreImagen = imagenView.Nombre,
                            TipoImagen = imagenView.TipoImagen,
                            Base64Imagen = imagenView.Base64
                        },
                        NumeroMovil = vehiculoView.NumeroMovil,
                        Estado = vehiculoView.Estado == TipoEstadoMovil.Estado ? TipoEstadoMovil.Activo : vehiculoView.Estado,
                    };

                if (EsMovil == true)
                {
                    Movil movil = Convertir<Movil>(vehiculo);

                    movil.NumeroMotor = movilView.NumeroMotor;

                    movil.NumeroChasis = movilView.NumeroChasis;

                    movil.ModeloBomba = movilView.ModeloBomba;

                    await VehiculoService.AgregarVehiculo(movil);
                }
                else
                {
                    await VehiculoService.AgregarVehiculo(vehiculo);
                }

                await message.Success("Se agrego el movil");

                StateHasChanged();

                await Init();
                await OnClose.InvokeAsync();
            }
        }

        catch (Exception e)
        {
            StateHasChanged();
            await Init();

            if (e.InnerException != null)
            {
                await message.Error("Información de movil ausente u ocurrio un error inesperado");
                Console.WriteLine(e.InnerException.Message);
            }

            else
            {
                await message.Error(("Error inesperado: " + e.Message), 5);
                Console.WriteLine(e.Message);
            }
        }
    }

    private async Task CargarBomberosView()
    {
        ListaBomberos = new();
        var bomberos = await Context.Bomberos.ToListAsync();

        foreach (Bombero b in bomberos)
        {
            BomberoViewModel Bvm = new()
                {
                    Apellido = b.Apellido,
                    Nombre = b.Nombre,
                    PersonaId = b.PersonaId

                };
            ListaBomberos.Add(Bvm);
        }
    }

    // Convertir a Móvil
    private T Convertir<T>(object source) where T : new()
    {
        T movil = new T();
        PropertyInfo[] Propiedades = typeof(T).GetProperties();

        foreach (PropertyInfo PropModificar in Propiedades)
        {
            PropertyInfo PropValor = source.GetType().GetProperty(PropModificar.Name);
            if (PropValor != null && PropValor.PropertyType == PropModificar.PropertyType)
            {
                PropModificar.SetValue(movil, PropValor.GetValue(source));
            }
        }

        return movil;
    }

    // Otros
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        await CargarBomberosView();
    }
}