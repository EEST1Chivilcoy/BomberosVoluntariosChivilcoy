@implements ﻿IDisposable
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@inject IVehiculoService VehiculoService
@using System.ComponentModel
@using AntDesign.TableModels
@using Vista.Services

<style>

    .ant-table-pagination.ant-pagination {
        display: none !important;
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
    }
    
    .ant-table-tbody > tr.ant-table-row.selected-row > td {
        background-color: #3363ff !important;
    }

    .ant-table-tbody > tr.ant-table-row.selected-row:hover > td {
        background-color: #3363ff !important;
    }


    .inpt-cont--lbl {
        min-width: 170px;
        text-align: start;
        font-weight: bold;
        overflow: hidden !important;
    }

    .inpt-cont {
        min-width: 170px;
        display: flex;
        flex-direction: column;
        padding: .3em 0;
        width: 100%;
        overflow: hidden !important;
    }

    .inpt-cont-inline {
        min-width: 170px;
        display: flex;
        align-items: flex-end;
        gap: 1em;
        overflow: hidden !important;
        height: 100%;
    }

    .botonesCont {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
    }

</style>

@if (existe)
{
    <div>
        <div class="inpt-cont-inline">
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Desde: </label>
                        <DatePicker TValue="DateTime" @bind-Value="@FechaDesde" />
                    </div>
                    <div class="inpt-cont">
                        <label class="inpt-cont--lbl">Hasta: </label>
                        <DatePicker TValue="DateTime" @bind-Value="@FechaHasta" DefaultValue="DateTime.Now" />
                    </div>
                    <div class="buton-cont">
                        <Button Style="margin-bottom: 5px;">
                            <Icon Type="search" OnClick="@MostrarDatos" Theme="outline" />
                        </Button>
                    </div>
                </div>
        <Table TItem="IncidenteView" DataSource="@incidentes" Responsive OnRowClick="@OnRowClick"
            RowClassName="@(c => selectedIncidente is not null && c.Data.IncidenteId == selectedIncidente.IncidenteId ? "selected-row" : "")">
            <PropertyColumn Property="c=>c.Fecha" />
            <PropertyColumn Property="c=>c.Observacion">
                <Template>
                    @{
                        // PENDIENTE: terminar la muestra de una segunda linea
                        var descripcion = context.Observacion;
                        if( descripcion != null && descripcion.Length > 9)
                        {
                            descripcion = descripcion.Substring(0, 7) + "...";
                        }
                        <div>@descripcion</div>
                     }
                </Template>
            </PropertyColumn>
            <PropertyColumn Property="c=>c.Tipo" />
            <PropertyColumn Property="c=>c.Encargado" />
        </Table>
        <Button Class="boton_p" Disabled="selectedIncidente == null" OnClick="BorrarIncidente">
            Borrar
        </Button>
        <Button Class="boton_p" OnClick="()=>NuevoIncidenteVisible = true">
            Nuevo
        </Button>
        <Button Class="boton_p" Disabled="selectedIncidente == null" OnClick="()=> VerIncidenteVisible = true">
            Ver
        </Button>
        <Button Class="boton_p" OnClick="OnClose">
            Cerrar
        </Button>
    </div>
}
else if (!existe)
{
    <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
        <Spin Delay="500" Indicator=antIcon />
    </div>
}

<Modal Footer="null" OnCancel="() => NuevoIncidenteVisible = false" Visible="@NuevoIncidenteVisible">
    <IncidenteAgregar VehiculoId="@VehiculoId" OnClose="@HandleCancel" />
</Modal>

<Modal Title="@("Detalles del incidente")" Visible="VerIncidenteVisible" OnCancel="()=>VerIncidenteVisible = false" Footer="null">
    <p>Numero Vehiculo: @vehiculo?.NumeroMovil</p>
    <p>Fecha: @selectedIncidente?.Fecha</p>
    <p>Responsable: @selectedIncidente?.Encargado</p>
    <p>Incidente: @selectedIncidente?.Tipo</p>
    <p>Descripción: @selectedIncidente?.Observacion</p>
</Modal>

@code {
    RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;
    [Parameter] public int? VehiculoId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    BomberosDbContext Context;
    VehiculoSalida? vehiculo { get; set; }
    public bool existe;
    List<IncidenteView> incidentes = new();
    bool NuevoIncidenteVisible { get; set; }
    bool VerIncidenteVisible { get; set; }

    public class IncidenteView
    {
        public int IncidenteId { get; set; }
        public DateTime Fecha { get; set; }
        public string? Observacion { get; set; }
        public TipoIncidente Tipo { get; set; }
        public string? Encargado { get; set; }
    }

    IncidenteView? selectedIncidente;
    public void OnRowClick(RowData<IncidenteView> rowData)
    {
        selectedIncidente = rowData.Data;
    }

    // Funciones de visibilidad de Modals
    public async void HandleCancel()
    {
        NuevoIncidenteVisible = false;
        FechaHasta = DateTime.Now;
        await MostrarDatos();
        StateHasChanged();
    }
    
    private async Task RefreshData()
    {
        message.Success("TEST");
        incidentes = new();
        await MostrarDatos();
        await Init();
        await InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    // Funciones relacionadas con datos
    public async void BorrarIncidente()
    {
        if (selectedIncidente != null)
        {
            Incidente incidente = await Context.Set<Incidente>().SingleOrDefaultAsync(e => e.IncidenteId == selectedIncidente.IncidenteId);
            await VehiculoService.BorrarIncidente(incidente);
            await MostrarDatos();
            StateHasChanged();
            selectedIncidente = null;
            message.Success("Incidente borrado");
        }
    }
    DateTime FechaDesde = new DateTime();
    DateTime FechaHasta = DateTime.Now;
    public async Task MostrarDatos()
    {
        vehiculo = await Context.Set<VehiculoSalida>().SingleOrDefaultAsync(e => e.VehiculoId == VehiculoId);
        if (vehiculo != null)
        {
            incidentes = new();
            foreach (Incidente inci in Context.Set<Incidente>().Where(inci=>inci.Fecha >= FechaDesde && inci.Fecha <= FechaHasta).ToArray())
            {
                if (inci != null && inci.Vehiculo != null)
                {
                    if (inci.Vehiculo.VehiculoId == vehiculo.VehiculoId){
                        Bombero? EncargadoIn = await Context.Bomberos.SingleOrDefaultAsync(b => b.PersonaId == inci.PersonaId);
                        IncidenteView incidente = new()
                        {
                            IncidenteId = inci.IncidenteId,
                            Fecha = inci.Fecha,
                            Observacion = inci.Observacion,
                            Tipo = inci.Tipo,
                            Encargado = EncargadoIn != null ? inci.Encargado.Nombre + ", " + inci.Encargado.Apellido : ""
                        };
                    incidentes.Add(incidente);
                    }
                }
            }
            existe = true;
        }
        else if (vehiculo is null)
        {
            existe = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        await MostrarDatos();
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}