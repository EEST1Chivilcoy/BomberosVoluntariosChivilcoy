@implements IDisposable

@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Models.Vehiculos.Flota

@*Servicios Utilizados*@
@inject IDbContextFactory<BomberosDbContext> DbFactory

@if (existe)
{
    <div>
        <p>Marca: @vehiculo.Marca</p>
        <p>Modelo: @vehiculo.Modelo</p>
        <p>Año: @vehiculo.Año</p>
        <p>Patente: @vehiculo.Patente</p>
        <p>Tipo: @vehiculo.Tipo</p>
        <p>Numero de movil: @vehiculo.NumeroMovil</p>
        @if(vehiculo is Movil){
            var movil = (Movil)vehiculo;
            <p>Numero de motor: @movil.NumeroMotor</p>
            <p>Numero de chasis: @movil.NumeroChasis</p>
            <p>Modelo de bomba: @movil.ModeloBomba</p>
            <p>Cantidad de litros: @movil.CantidadLitros</p>
        }
        <p>Estado: @vehiculo.Estado</p>
        <p>Encargado: @Encargado()</p>
    </div>
}
else if (!existe)
{
    <div style="display: flex; justify-content: center;width: 100%;margin: 1em 1em;">
        <Spin Delay="500" Indicator=antIcon />
    </div>
}

@code
{
    RenderFragment antIcon = @<Icon Type="loading" Theme="IconThemeType.Outline" Style="font-size: 24px; text-align: center; color: rgb(62, 24, 24);" Spin />;

    [Parameter] public int? VehiculoId { get; set; }

    BomberosDbContext Context;
    VehiculoSalida? vehiculo { get; set; }
    public bool existe;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        await MostrarDatos();
    }
    public async Task MostrarDatos()
    {
        if (VehiculoId != null)
        {
            vehiculo = await Context.Set<VehiculoSalida>().Where(e => e.VehiculoId == VehiculoId).SingleOrDefaultAsync();
        }
        existe = vehiculo is not null;
    }
    public string Encargado()
    {
        if (vehiculo.EncargadoId != null && vehiculo.EncargadoId != 0)
        {
            Bombero encargado = Context.Bomberos.Where(b => b.PersonaId == vehiculo.EncargadoId).SingleOrDefault();
            return(encargado.Nombre + " " + encargado.Apellido);
        }
        return "";
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
}