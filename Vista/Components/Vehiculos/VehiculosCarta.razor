﻿@using Vista.Services
@inject IVehiculoService VehiculoService
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService _message

@using Vista.Data.Models.Imagenes
@using Vista.Data.Models.Vehiculos.Flota
<link rel="stylesheet" href="css/Unidades.css" />

<card class="vehiculo-card">
    <div class="vehiculo-imagen-contenedor">
        <img src="@CargarImage(Vehiculo)" class="vehiculo-imagen" />
    </div>

    <div class="vehiculo-info">
        <div class="vehiculo-titulo">
            <p>N° Unidad @Vehiculo.NumeroMovil</p>
        </div>

        <div class="botones-grid">
            <Button OnClick="() => DetallesVisible = true">
                <Icon Type="Menu" Theme="IconThemeType.Outline" />
            </Button>



            <Button OnClick="() => EditarVisible = true">
                <Icon Type="Edit" Theme="IconThemeType.Outline" />
            </Button>

            @if (Vehiculo.Estado == TipoEstadoMovil.Activo)
            {
                <Popconfirm Title="¿Estás seguro de dar de baja a este móvil?" OnConfirm="() => CambiarEstado(Vehiculo.VehiculoId, TipoEstadoMovil.Inactivo)" OnCancel="Cancel">
                    <Button>
                        <i class="fa fa-trash" aria-hidden="true"></i>
                    </Button>
                </Popconfirm>
            }
            else
            {
                <Popconfirm Title="¿Estás seguro de dar de alta a este móvil?" OnConfirm="() => CambiarEstado(Vehiculo.VehiculoId, TipoEstadoMovil.Activo)" OnCancel="Cancel">
                    <Button>
                        <Icon Type="Up" Theme="IconThemeType.Outline" />
                    </Button>
                </Popconfirm>
            }
        </div>
    </div>
</card>

@if (EditarVisible)
{
    <Modal Footer="null" Title="Editar" OnCancel="() => EditarVisible = false" Visible="@EditarVisible">
        <VehiculoEditar VehiculoId="@VehiculoId" OnClose="HandleCancelEditar" />
    </Modal>
}

@if (DetallesVisible)
{
    <Modal Footer="null" Title="Detalles" OnCancel="() => DetallesVisible = false" Visible="@DetallesVisible" Class="modal-detalles">
        <VehiculoDetalles vehiculoId="@VehiculoId" />
    </Modal>
}

@code {
    [Parameter] public VehiculoSalida Vehiculo { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    BomberosDbContext Context { get; set; }
    int VehiculoId { get; set; }
    bool EditarVisible { get; set; }
    bool DetallesVisible { get; set; }
    bool FichaVisible { get; set; }
    bool AgregarVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    public async void HandleCancelEditar()
    {
        EditarVisible = false;
        await OnChange.InvokeAsync();
    }

    private async Task Init()
    {
        Context = DbFactory.CreateDbContext();
        VehiculoId = Vehiculo.VehiculoId;
    }

    public string CargarImage(VehiculoSalida vehiculo)
    {
        Context = DbFactory.CreateDbContext();
        string src = "/";
        Imagen? imagen = Context.ImagenesVehiculo.Where(i => i.ImagenId == vehiculo.ImagenId).SingleOrDefault();
        if (imagen is not null)
        {
            src = $"data:{imagen.TipoImagen}; base64,{imagen.Base64Imagen}";
        }
        return src;
    }

    public async void CambiarEstado(int movilid, TipoEstadoMovil estado)
    {
        await VehiculoService.CambiarEstado(movilid, estado);
        await OnChange.InvokeAsync();
        StateHasChanged();
        await _message.SuccessAsync("Este movil se dio de baja");
    }

    private void Cancel()
    {
        _message.Error("Operación cancelada.");
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}